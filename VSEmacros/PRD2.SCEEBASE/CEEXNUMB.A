*/********************************************************************* 00001000
*    :module                                                          * 00002000
*       CEEXNUMB - Internal macro to determine if a character string  * 00003000
*                    is validly binary, decimal, or hex               * 00004000
*    :emodule                                                         * 00005000
*                                                                     * 00006000
*    :security                                                        * 00007000
*                                                                     * 00008000
*      Licensed Materials - Property of IBM                           * 00009000
*                                                                     * 00010000
*      5686-094  (C) Copyright IBM Corp. 1991,  1996                  * 00011000
*      All Rights Reserved.                                           * 00012000
*                                                                     * 00013000
*       US Government Users Restricted Rights - Use, duplication or   * 00014000
*       disclosure restricted by GSA ADP Schedule Contract with IBM   * 00015000
*       Corp.                                                         * 00016000
*                                                                     * 00017000
*    :esecurity                                                       * 00018000
*                                                                     * 00019000
*    :status                                                          * 00020000
*       LE/VSE Version 1 Release 4 Modification 0                     * 00021000
*    :estatus                                                         * 00022000
*                                                                     * 00023000
*    :function                                                        * 00024000
*       Nested macro CEEXNUMB, used to determine if a character       * 00025000
*       string consists solely of either valid binary, decimal, or    * 00026000
*       hex characters, has three positional parameter inputs,        * 00027000
*       assumed to be non-null:                                       * 00028000
*             &STR    : the string, which must contain at least 1     * 00029000
*                       character                                     * 00030000
*             &TYP    : the numeric type for which the string is      * 00031000
*                       being examined, which must be either B        * 00032000
*                       (binary), D (decimal), or H (hex)             * 00033000
*             &LEN    : the length of the string being examined       * 00034000
*       The string is simply scanned character by character to verify * 00035000
*       that all characters are appropriate for the intended numeric  * 00036000
*       type; neither length nor range check is performed.  The       * 00037000
*       single global output produced is:                             * 00038000
*             &NUMBOK : binary flag, 0 if &STR is found to contain    * 00039000
*                       an invalid character, else 1                  * 00040000
*    :efunction                                                       * 00041000
*                                                                     * 00042000
*    :notes                                                           * 00043000
*       Dependencies - None.                                          * 00044000
*                                                                     * 00045000
*       Restrictions - To be invoked only from CEEXOPT or CEEXAPRC.   * 00046000
*    :enotes                                                          * 00047000
*                                                                     * 00048000
*    :regs - Register Conventions                                     * 00049000
*       (none)                                                        * 00050000
*    :eregs                                                           * 00051000
*                                                                     * 00052000
*    :entry                                                           * 00053000
*       (none)                                                        * 00054000
*    :eentry                                                          * 00055000
*                                                                     * 00056000
*    :exit                                                            * 00057000
*       (none)                                                        * 00058000
*    :eexit                                                           * 00059000
*                                                                     * 00060000
*    :retcode                                                         * 00061000
*       (none)                                                        * 00062000
*    :eretcode                                                        * 00063000
*                                                                     * 00064000
*    :external - List of external routines used by this module        * 00065000
*       (none)                                                        * 00066000
*    :eexternal                                                       * 00067000
*                                                                     * 00068000
*    :data - Major data areas, control blocks, tables, etc.           * 00069000
*       (none)                                                        * 00070000
*    :edata                                                           * 00071000
*                                                                     * 00072000
*    :macros                                                          * 00073000
*       Macros defined in this module                                 * 00074000
*         (none)                                                      * 00075000
*       Macros used by this module                                    * 00076000
*         (none)                                                      * 00077000
*    :emacros                                                         * 00078000
*                                                                     * 00079000
*    :include                                                         * 00080000
*       (none)                                                        * 00081000
*    :einclude                                                        * 00082000
*                                                                     * 00083000
*    :messages                                                        * 00084000
*       (none)                                                        * 00085000
*    :emessages                                                       * 00086000
*                                                                     * 00087000
*    :history                                                         * 00088000
*       07/13/90 (DMW) New                                            * 00089000
*    :ehistory                                                        * 00090000
*                                                                     * 00091000
*    :pseudocode                                                      * 00092000
*       (none)                                                        * 00093000
*    :epseudocode                                                     * 00094000
*                                                                     * 00095000
*    :epls                                                            * 00096000
**********************************************************************/ 00097000
         MACRO                                                          00098000
         CEEXNUMB &STR,                String being examined           X00099000
               &TYP,                   B, D, or H (bin, dec, or hex)   X00100000
               &LEN                    Length of &STR                   00101000
.********************************************************************** 00102000
.*   SET symbols                                                      * 00103000
.********************************************************************** 00104000
         LCLA  &SUB                    String scanning subscript        00105000
.*                                                                      00106000
         GBLB  &NUMBOK                 Flag for error detection         00107000
.*                                                                      00108000
         LCLC  &CHR                    Character being examined         00109000
         LCLC  &STRING                 String parameter obtained        00110000
.********************************************************************** 00111000
.*   Initialize scanning subscript and error flag.                    * 00112000
.********************************************************************** 00113000
&SUB     SETA  1                       Initialize subscript for scan    00114000
&NUMBOK  SETB  1                       Assume no errors                 00115000
&STRING  SETC  '&STR'                  Obtain parameter                 00116000
         AIF   ('&TYP' EQ 'D').NUM2                                     00117000
         AIF   ('&TYP' EQ 'H').NUM3                                     00118000
.*                                                                      00119000
.NUM1    ANOP                          Loop to check for binary         00120000
         AIF   (&SUB GT &LEN).NUM5     Exit if finished successfully    00121000
&CHR     SETC  '&STRING'(&SUB,1)       Obtain current character         00122000
         AIF   (('&CHR' NE '0') AND ('&CHR' NE '1')).NUM4               00123000
&SUB     SETA  &SUB+1                  Increment for next character     00124000
         AGO   .NUM1                   Continue scan                    00125000
.*                                                                      00126000
.NUM2    ANOP                          Loop to check for decimal        00127000
         AIF   (&SUB GT &LEN).NUM5     Exit if finished successfully    00128000
&CHR     SETC  '&STRING'(&SUB,1)       Obtain current character         00129000
         AIF   (('&CHR' LT '0') OR ('&CHR' GT '9')).NUM4                00130000
&SUB     SETA  &SUB+1                  Increment for next character     00131000
         AGO   .NUM2                   Continue scan                    00132000
.*                                                                      00133000
.NUM3    ANOP                          Loop to check for hexadecimal    00134000
         AIF   (&SUB GT &LEN).NUM5     Exit if finished successfully    00135000
&CHR     SETC  '&STRING'(&SUB,1)       Obtain current character         00136000
         AIF   (NOT ((('&CHR' GE '0') AND ('&CHR' LE '9')) OR          X00137000
               (('&CHR' GE 'A') AND ('&CHR' LE 'F')))).NUM4             00138000
&SUB     SETA  &SUB+1                  Increment for next character     00139000
         AGO   .NUM3                   Continue scan                    00140000
.*                                                                      00141000
.NUM4    ANOP                          Indicate error detected          00142000
&NUMBOK  SETB  0                                                        00143000
.*                                                                      00144000
.NUM5    ANOP                                                           00145000
         MEND                                                           00146000
