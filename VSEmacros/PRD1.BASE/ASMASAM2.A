 title 'Sample Program2.'                                               00001000
*********************************************************************   00002000
*   Licensed Materials - Property of IBM                            *   00003000
*                                                                   *   00004000
*   5696-234                                                        *   00005000
*                                                                   *   00006000
*   (C) Copyright IBM Corp. 1992, 2004. All Rights Reserved.        *   00007000
*                                                                   *   00008000
*   US Government Users Restricted Rights - Use,                    *   00009000
*   duplication or disclosure restricted by GSA ADP                 *   00010000
*   Schedule Contract with IBM Corp.                                *   00011000
*                                                                   *   00012000
*********************************************************************   00013000
*********************************************************************   00014000
* DISCLAIMER OF WARRANTIES                                          *   00015000
*                                                                   *   00016000
*  The following enclosed code is sample code created by IBM        *   00017000
*  Corporation. This sample code is licensed under the terms of     *   00018000
*  the High Level Assembler license, but is not part of any         *   00019000
*  standard IBM product.  It is provided to you solely for the      *   00020000
*  purpose of demonstrating the usage of some of the features of    *   00021000
*  High Level Assembler.  The code is not supported by IBM and      *   00022000
*  is provided on an "AS IS" basis, without warranty of any kind.   *   00023000
*  IBM shall not be liable for any damages arising out of your      *   00024000
*  use of the sample code, even if IBM has been advised of the      *   00025000
*  possibility of such damages.                                     *   00026000
*********************************************************************   00027000
         csect                                                          00028000
*        copy  lnsrch                                                   00029000
         macro                                                          00030000
&name   lnsrch &arg,&offset=stnumb-stchain                              00031000
         lclc  &label                                                   00032000
&label   setc  'A&sysndx'          Generate symbol                      00033000
         aif   (t'&name eq 'O').skip                                    00034000
&label   setc  '&name'             If MACRO call has label, use it      00035000
.skip    anop                      instead of generated symbol          00036000
&label   la    0,&offset           Load reg. 0                          00037000
         schi  &arg,0(1)           Search                               00038000
         bc    1,&label            If max reached, continue             00039000
         mend                                                           00040000
         eject                                                          00041000
*        copy  schi                                                     00042000
         macro                                                          00043000
&nm      schi  &comp,&list                                              00044000
         lcla  &cnt                                                     00045000
         lclc  &cmpadr                                                  00046000
&cnt     seta  1                                                        00047000
&nm      stm   1,15,4(13)                                               00048000
.test    anop                                                           00049000
&cmpadr  setc  '&cmpadr'.'&comp'(&cnt,1)                                00050000
         aif   ('&comp'(&cnt,1) eq '(').lpar                            00051000
&cnt     seta  &cnt+1                                                   00052000
         aif   (&cnt lt k'&comp).test                                   00053000
.nolnth  anop                                                           00054000
         la    3,&comp             Comparand                            00055000
         ago   .contin                                                  00056000
.lpar    aif   ('&comp'(&cnt+1,1) eq ',').finish                        00057000
&cnt     seta  &cnt+1                                                   00058000
         aif   (&cnt lt k'&comp).lpar                                   00059000
         ago   .nolnth                                                  00060000
.finish  anop                                                           00061000
&cmpadr  setc  '&cmpadr'.'&comp'(&cnt+2,k'&comp-&cnt)                   00062000
         la    3,&cmpadr           Comparand sans length                00063000
.contin  anop                                                           00064000
         la    1,&list             List header                          00065000
         mvc   &comp,0(0)          Dummy move to get comp length        00066000
         org   *-6                 Change MVC to MVI                    00067000
         dc    x'92'               MVI Opcode                           00068000
         org   *+1                 Preserve length as immed opnd        00069000
         dc    x'd000'             Result is MVI 0(13),L                00070000
         l     15,=v(schi)                                              00071000
         balr  14,15                                                    00072000
         lm   1,15,4(13)                                                00073000
         mexit                                                          00074000
         mend                                                           00075000
         eject                                                          00076000
test     csect                                                          00077000
         balr  12,0                                                     00078000
         using *,12                                                     00079000
         space 3                                                        00080000
         mhelp b'11111'                                                 00081000
         lnsrch listline,offset=listline-listnext                       00082000
listnext ds    h                                                        00083000
listline ds    fl3'0'                                                   00084000
         ltorg                                                          00085000
         end   test                                                     00086000
