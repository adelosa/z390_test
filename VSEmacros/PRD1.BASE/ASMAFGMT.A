*PROCESS BATCH                                                          00001000
**************************************************************          00002000
*   Licensed Materials - Property of IBM                     *          00003000
*                                                            *          00004000
*   5696-234   5647-A01                                      *          00005000
*                                                            *          00006000
*   (C) Copyright IBM Corp. 1992, 2004. All Rights Reserved. *          00007000
*                                                            *          00008000
*   US Government Users Restricted Rights - Use,             *          00009000
*   duplication or disclosure restricted by GSA ADP          *          00010000
*   Schedule Contract with IBM Corp.                         *          00011000
*                                                            *          00012000
**************************************************************          00013000
*********************************************************************   00014000
* DISCLAIMER OF WARRANTIES                                          *   00015000
*  The following enclosed code is sample code created by IBM        *   00016000
*  Corporation. This sample code is licensed under the terms of     *   00017000
*  the High Level Assembler license, but is not part of any         *   00018000
*  standard IBM product.  It is provided to you solely for the      *   00019000
*  purpose of demonstrating the usage of some of the features of    *   00020000
*  High Level Assembler.  The code is not supported by IBM and      *   00021000
*  is provided on an "AS IS" basis, without warranty of any kind.   *   00022000
*  IBM shall not be liable for any damages arising out of your      *   00023000
*  use of the sample code, even if IBM has been advised of the      *   00024000
*  possibility of such damages.                                     *   00025000
*********************************************************************   00026000
ASMAFRAG TITLE  'High Level Assembler Code fragments'                   00027000
*********************************************************************   00028000
* The following codes fragments are examples of coding techniques   *   00029000
* taken from the High Level Assembler Language Reference            *   00030000
* manual.                                                           *   00031000
* Where applicable the fragments have been expanded, to give a      *   00032000
* clarity to the context in which the code practice applies, or to  *   00033000
* more fully highlight the results of the coding techniques.        *   00034000
*********************************************************************   00035000
         TITLE  'Length Attributes'                                     00036000
*********************************************************************   00037000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00038000
*  ***************************************************************  *   00039000
*  * Assignment of length Attribute Values to Symbols in         *  *   00040000
*  * name fields.                                                *  *   00041000
*  ***************************************************************  *   00042000
* Notes:                                                            *   00043000
*  For assembler instructions such as DC, DS, and EQU, the length   *   00044000
*  attribute of the location counter reference is equal to 1.       *   00045000
*  For machine instructions, the length attribute of the location   *   00046000
*  counter reference is equal to the length attribute of the        *   00047000
*  instruction appears.                                             *   00048000
*********************************************************************   00049000
         SPACE  3                                                       00050000
EXAMP1   CSECT                                                          00051000
         USING *,11                                                     00052000
A        EQU   10                                                       00053000
B        EQU   5                                                        00054000
*                                                                       00055000
* Source Statement       Length Attribute    Value of Length Attribute  00056000
*                             Reference          at Assembly time       00057000
* ----------------------  ----------------     -----------------------  00058000
MACHA    MVC   TO,FROM          L'MACHA                 6               00059000
MACHB    L     3,ADCON          L'MACHB                 4               00060000
MACHC    LR    3,4              L'MACHC                 2               00061000
*                                                                       00062000
TO       DS    CL80             L'TO                   80               00063000
FROM     DS    CL240            L'FROM                240               00064000
ADCON    DC    A(EXAMP1)        L'ADCON                 4               00065000
CHAR     DC    C'YUKON'         L'CHAR                  5               00066000
DUPL     DC    3F'200'          L'DUPL                  4               00067000
*                                                                       00068000
RELOC1   EQU   TO               L'RELOC1               80               00069000
RELOC2   EQU   TO+80            L'RELOC2               80               00070000
ABSOL1   EQU   FROM-TO          L'ABSOL1              240               00071000
ABSOL2   EQU   ABSOL1           L'ABSOL2              240               00072000
*                                                                       00073000
SDT1     EQU   102              L'SDT1                  1               00074000
SDT2     EQU   X'FF'+A-B        L'SDT2                  1               00075000
SDT3     EQU   C'YUK'           L'SDT3                  1               00076000
*                                                                       00077000
ASTERISK EQU   *+10             L'ASTERISK              1               00078000
*                                                                       00079000
LOCTREF  EQU   L'*              L'LOCTREF               1               00080000
LENGTH1  DC    A(L'*)           L'LENGTH1               4               00081000
*                               L'*                     1               00082000
*                                                                       00083000
LENGTH2  MVC   TO(L'*),FROM     L'LENGTH2               6               00084000
LENGTH3  MVC   TO(L'TO-20),FROM L'LENGTH3              80               00085000
         EJECT                                                          00086000
*                                                                       00087000
* Use MNOTE to show the values of the length attributes.                00088000
*                                                                       00089000
&LMACHA  SETA  L'MACHA                                                  00090000
         MNOTE 'Length is &LMACHA'                                      00091000
&LMACHB  SETA L'MACHB                                                   00092000
         MNOTE 'Length is &LMACHB'                                      00093000
&LMACHC  SETA L'MACHC                                                   00094000
         MNOTE 'Length is &LMACHC'                                      00095000
&LTO     SETA L'TO                                                      00096000
         MNOTE 'Length is &LTO'                                         00097000
&LFROM   SETA L'FROM                                                    00098000
         MNOTE 'Length is &LFROM'                                       00099000
&LADCON  SETA L'ADCON                                                   00100000
         MNOTE 'Length is &LADCON'                                      00101000
&LCHAR   SETA L'CHAR                                                    00102000
         MNOTE 'Length is &LCHAR'                                       00103000
&LDUPL   SETA L'DUPL                                                    00104000
         MNOTE 'Length is &LDUPL'                                       00105000
&LRELOC1 SETA L'RELOC1                                                  00106000
         MNOTE 'Length is &LRELOC1'                                     00107000
&LRELOC2 SETA L'RELOC2                                                  00108000
         MNOTE 'Length is &LRELOC2'                                     00109000
&LABSOL1 SETA L'ABSOL1                                                  00110000
         MNOTE 'Length is &LABSOL1'                                     00111000
&LABSOL2 SETA L'ABSOL2                                                  00112000
         MNOTE 'Length is &LABSOL2'                                     00113000
&LSDT1   SETA L'SDT1                                                    00114000
         MNOTE 'Length is &LSDT1'                                       00115000
&LSDT2   SETA L'SDT2                                                    00116000
         MNOTE 'Length is &LSDT2'                                       00117000
&LSDT3   SETA L'SDT3                                                    00118000
         MNOTE 'Length is &LSDT3'                                       00119000
&LASTERS SETA L'ASTERISK                                                00120000
         MNOTE 'Length is &LASTERS'                                     00121000
&LLOCTRF SETA L'LOCTREF                                                 00122000
         MNOTE 'Length is &LLOCTRF'                                     00123000
&LLENGT1 SETA L'LENGTH1                                                 00124000
         MNOTE 'Length is &LLENGT1'                                     00125000
&LLENGT2 SETA L'LENGTH2                                                 00126000
         MNOTE 'Length is &LLENGT2'                                     00127000
&LLENGT3 SETA L'LENGTH3                                                 00128000
         MNOTE 'Length is &LLENGT3'                                     00129000
         END                                                            00130000
         TITLE  'Literals'                                              00131000
*********************************************************************   00132000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00133000
*  ***************************************************************  *   00134000
*  * Literals,Constants and Self-Defining terms                  *  *   00135000
*  ***************************************************************  *   00136000
* Notes:                                                            *   00137000
*  The following example shows use of the L'symbol in moving a      *   00138000
*  character constant into either the high-order or low-order       *   00139000
*  end of a storage field.                                          *   00140000
*                                                                   *   00141000
*  B2. names a character constant 2 bytes in length and is assigned *   00142000
*  a length attribute of 2. The statement named HIORD moves the     *   00143000
*  contents of B2 into the first 2 bytes of A1.  The term B2 in     *   00144000
*  parentheses vides the length specification required by the       *   00145000
*  instruction.                                                     *   00146000
*                                                                   *   00147000
*  The statement named LOORD moves the contents of B2 into the      *   00148000
*  extreme right 2 bytes of A1.                                     *   00149000
*                                                                   *   00150000
*  The combination of terms A1+L'A1-L'B2 results in the addition    *   00151000
*  of the length of A1 to the beginning address of A1, and the      *   00152000
*  subtraction of the length of B2 from this value. The result is   *   00153000
*  the address of  the seventh byte in field A1.                    *   00154000
*                                                                   *   00155000
*  The constant represented by B2 is moved into A1 starting at this *   00156000
*  address. B2 in parentheses provides the length specification in  *   00157000
*  both instructions.                                               *   00158000
*                                                                   *   00159000
*  For ease in following, the length attributes ofA1 and B2 are     *   00160000
*  specified explicity in the DS and DC statements that define them.*   00161000
*********************************************************************   00162000
         SPACE  3                                                       00163000
EXAMP2   CSECT                                                          00164000
         USING *,11                                                     00165000
A1       DS    CL8                                                      00166000
B2       DC    CL2'AB'                                                  00167000
HIORD    MVC   A1(L'B2),B2                                              00168000
LOORD    MVC   A1+L'A1-L'B2(L'B2),B2                                    00169000
         EJECT                                                          00170000
*********************************************************************   00171000
* Notes:                                                            *   00172000
*   Differences between constants, self-defining terms, and         *   00173000
*   Constants.                                                      *   00174000
*   1. A literal both defines data and represents data. The address *   00175000
*      of the literal is assembled into the object code of the      *   00176000
*      instruction in whiich it is used. The constant specified by  *   00177000
*      the literal is assembled into the object code, in the        *   00178000
*      the literal pool.                                            *   00179000
*   2. A constant is represented by a symbol with a relocatable     *   00180000
*      value. The aress of a constant is assembled into the object  *   00181000
*      code.                                                        *   00182000
*   3. A self-defining term has an absolute value. In this example, *   00183000
*      the absolute value of the self-defining term is assembled    *   00184000
*      into the object code.                                        *   00185000
*   4. A symbol with an absolute value does not represent the       *   00186000
*      address of a constant, but represents either immediate data  *   00187000
*      or an absolute address. When a symbol with an absolute value *   00188000
*      represents immediate data, it is the absolute value that is  *   00189000
*      assembled into  the object code.                             *   00190000
*********************************************************************   00191000
*   A literal with a relocatable address:                               00192000
*                                                                       00193000
         L     3,=F'33'       Register 3 set to 33.    See note 1       00194000
         L     3,F33          Register 3 set to 33.    See note 2       00195000
F33      DC    F'33'                                                    00196000
*                                                                       00197000
*   A literal with a self-defining term and a symbol                    00198000
*   with an absolute value                                              00199000
*                                                                       00200000
         MVC   FLAG,=X'00'    FLAG set to X'00'.       See note 1       00201000
         MVI   FLAG,X'00'     FLAG set to X'00'.       See note 3       00202000
         MVI   FLAG,ZERO      FLAG set to X'00'.       See note 4       00203000
FLAG     DS    X                                                        00204000
ZERO     EQU   X'00'                                                    00205000
*                                                                       00206000
* A symbol having an absolute address value specified                   00207000
* by a self-defining term                                               00208000
*                                                                       00209000
         LA    4,LOCORE       Register 4 set to 1000.  See note 4       00210000
         LA    4,1000         Register 4 set to 1000.  See note 3       00211000
LOCORE   EQU   1000                                                     00212000
         LTORG                                                          00213000
         END                                                            00214000
         TITLE  'Addressing'                                            00215000
*********************************************************************   00216000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00217000
*  ***************************************************************  *   00218000
*  * Addressability                                              *  *   00219000
*  ***************************************************************  *   00220000
* Notes:                                                            *   00221000
*  The following examples show the use of qualified symbols.        *   00222000
*  SOURCE and TARGET are both symbol qualifiers previously defined  *   00223000
*  in two labed USING instructions.  X and Y are both symbols which *   00224000
*  name storage locations within the range of both labeled USING    *   00225000
*  instruction                                                      *   00226000
*********************************************************************   00227000
         SPACE  3                                                       00228000
DSECT4   DSECT                                                          00229000
FILLER   DS    8F                                                       00230000
X        DS    CL30                                                     00231000
Y        DS    CL30                                                     00232000
EXAMP4   CSECT                                                          00233000
         USING *,11                                                     00234000
SOURCE   USING DSECT4,2                                                 00235000
TARGET   USING DSECT4,3                                                 00236000
*                                                                       00237000
         MVC   TARGET.X,SOURCE.X                                        00238000
         MVC   TARGET.Y+5(3),SOURCE.Y+5                                 00239000
         XC    TARGET.X+10(L'X-10),TARGET.X+10                          00240000
         LA    2,SOURCE.Y                                               00241000
*                                                                       00242000
         DROP  SOURCE,TARGET                                            00243000
         END                                                            00244000
         TITLE  'Location counters'                                     00245000
*********************************************************************   00246000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00247000
*  ***************************************************************  *   00248000
*  * Use of multiple location counters                           *  *   00249000
*  ***************************************************************  *   00250000
* Notes:                                                            *   00251000
*  An example of the use of multiple location counters is shown     *   00252000
*  below. In the example, executable instructions and data areas    *   00253000
*  have been interspersed throughout the coding in their logical    *   00254000
*  sequence, each group of instructions preceded by a LOCTR         *   00255000
*  instruction identifying the location counter under which it is   *   00256000
*  to be assembled. The assembler will rearrange the control section*   00257000
*  so that the executable instructions are grouped together and the *   00258000
*  data areas are grouped together.                                 *   00259000
*********************************************************************   00260000
         SPACE  3                                                       00261000
INST6    CSECT                                                          00262000
         LR    12,15                                                    00263000
         USING INST6,12                                                 00264000
*        etc...                                                         00265000
DATA6    LOCTR                                                          00266000
INPUTREC DS    0CL80                                                    00267000
RECCODE  DS    CL1                                                      00268000
*        etc...                                                         00269000
INST6    LOCTR                                                          00270000
         CLC   0(14,3),0(2)                                             00271000
         BM    *+40                                                     00272000
*        etc...                                                         00273000
DATA6    LOCTR                                                          00274000
VAL1     DC    F'56'                                                    00275000
VAL2     DC    F'84'                                                    00276000
*        etc...                                                         00277000
NEXT6    CSECT                                                          00278000
*        etc...                                                         00279000
         END                                                            00280000
         TITLE  'The Literal Pool'                                      00281000
*********************************************************************   00282000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00283000
*  ***************************************************************  *   00284000
*  * The LTORG instruction, and literal pool segmentation        *  *   00285000
*  ***************************************************************  *   00286000
* Notes:                                                            *   00287000
*  Each literal pool has four segments into which the literals are  *   00288000
*  stored (a) in the order that the literals are specified, and (b) *   00289000
*  according totheir assembled lengths, which, for each literal, is *   00290000
*  the total explicit or implied length), as described below.       *   00291000
*  The first segment contains all literal constants whose assembled *   00292000
*  lengths are a multiple of 8.                                     *   00293000
*  The second segment contains those whose assembled lengths are a  *   00294000
*  multiple of 4, but not of 8.                                     *   00295000
*  The third segment contains those whose assembled lengths are     *   00296000
*  even, but not a multiple of 4.                                   *   00297000
*  The fourth segment contains all the remaining literal constants  *   00298000
*  whose assembled lengths are odd.                                 *   00299000
*  Literals from the following statements are in the pool, in the   *   00300000
*  segments indicated by the parenthesized numbers:                 *   00301000
*********************************************************************   00302000
         SPACE  3                                                       00303000
FIRST    START  0                                                       00304000
         USING  *,11                                                    00305000
         MVC    0(12,9),=3F'9'   (2)                                    00306000
         AD     2,=D'7'          (1)                                    00307000
         IC     2,=XL1'8'        (4)                                    00308000
         MVC    0(3,4),=CL3'JAN' (4)                                    00309000
         LM     4,5,=2F'1,2'     (1)                                    00310000
         AH     5,=H'33'         (3)                                    00311000
         L      2,=A(FIRST)      (2)                                    00312000
         MVC    0(8,5),=XL8'05'  (1)                                    00313000
         LTORG                                                          00314000
         END                                                            00315000
         TITLE  'The ORG instruction'                                   00316000
*********************************************************************   00317000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00318000
*  ***************************************************************  *   00319000
*  * Building a translation table with the help of the ORG       *  *   00320000
*  * instruction.                                                *  *   00321000
*  ***************************************************************  *   00322000
* Notes:                                                            *   00323000
*  You use the ORG instruction to alter the setting of the location *   00324000
*  counter and thus control the structure of the current control    *   00325000
*  section. This allows you to redefine portions of a control       *   00326000
*  section.                                                         *   00327000
*  The following example shows the use of the ORG instruction to    *   00328000
*  help build a simple translation table                            *   00329000
*********************************************************************   00330000
         SPACE  3                                                       00331000
FIRST    START 0                                                        00332000
TABLE    DC    XL256'0'       Start with an empty table                 00333000
         ORG   TABLE+0        Fill in the standard values               00334000
         DC    C'0'                                                     00335000
         DC    C'1'                                                     00336000
*     etc.                                                              00337000
         ORG   TABLE+13       At offset 13 & 14 in the table -          00338000
         DC    C'D'           - replace with EBCDIC D & E               00339000
         DC    C'E'                                                     00340000
*     etc.                                                              00341000
         ORG   TABLE+C'D'     Heres another format for -                00342000
         DC    AL1(13)        - replacing in the table                  00343000
         DC    AL1(14)                                                  00344000
*     etc.                                                              00345000
         ORG   TABLE+C'0'     And here's another                        00346000
         DC    AL1(0)                                                   00347000
         DC    AL1(1)                                                   00348000
*     etc.                                                              00349000
         ORG                                                            00350000
GOON     DS    0H                                                       00351000
         END                                                            00352000
         TITLE  'PUSH and POP Instructions'                             00353000
*********************************************************************   00354000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00355000
*  ***************************************************************  *   00356000
*  * The PUSH and POP Instructions                               *  *   00357000
*  ***************************************************************  *   00358000
* Notes:                                                            *   00359000
*  The POP instruction causes the status of the current PRINT or    *   00360000
*  USING instruction to be overridden by the PRINT or USING status  *   00361000
*  saved by the last PUSH instruction.                              *   00362000
*********************************************************************   00363000
         SPACE  3                                                       00364000
         MACRO                                                          00365000
         DCMAC  &P1,&P2                                                 00366000
         DC     &P1'&P2'                                                00367000
         MEND                                                           00368000
EXAMP1   CSECT                                                          00369000
         USING *,11                                                     00370000
         PRINT  GEN     Printed macro generated code                    00371000
         DCMAC  X,27    Call macro to generate DC (visable generation)  00372000
         PUSH   PRINT   Save PRINT status                               00373000
         PRINT  NOGEN   Suppress macro generated code                   00374000
         DCMAC  X,33    Call macro to gen. DC (supressed generation)    00375000
         POP    PRINT   Restore PRINT status                            00376000
         DCMAC  X,42    Call macro to generate DC (visable again)       00377000
         END                                                            00378000
         TITLE  'Macro Prototypes'                                      00379000
*********************************************************************   00380000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00381000
*  ***************************************************************  *   00382000
*  *  Alternative Ways of Coding the Prototype Statement         *  *   00383000
*  ***************************************************************  *   00384000
* Notes:                                                            *   00385000
*  The prototype statement can be specified in one of the following *   00386000
*  three ways:                                                      *   00387000
*                                                                   *   00388000
*  The normal way, with all the symbolic parameters preceding any   *   00389000
*  remarks                                                          *   00390000
*                                                                   *   00391000
*  An alternative way, allowing remarks for each parameter          *   00392000
*                                                                   *   00393000
*  A combination of the first two ways                              *   00394000
*********************************************************************   00395000
         SPACE  3                                                       00396000
         MACRO                                                          00397000
&NAME1   OP1   &OPERAND1,&OPERAND2,&OPERAND3                            00398000
&NAME1   DS    &OPERAND1.L&OPERAND2'&OPERAND3'                          00399000
         MEND                                                           00400000
         MACRO                                                          00401000
&NAME2   OP2   &OPERAND1,                                              X00402000
               &OPERAND2,                                              X00403000
               &OPERAND3                                                00404000
&NAME2   DS    &OPERAND1.L&OPERAND2'&OPERAND3'                          00405000
         MEND                                                           00406000
         MACRO                                                          00407000
&NAME3   OP3   &OPERAND1,                                              X00408000
               &OPERAND2,&OPERAND3                                      00409000
&NAME3   DS    &OPERAND1.L&OPERAND2'&OPERAND3'                          00410000
         MEND                                                           00411000
EXAMP1   CSECT                                                          00412000
LBL1     OP1   C,4,FRED                                                 00413000
LBL2     OP2   C,3,TOM                                                  00414000
LBL3     OP3   C,5,HARRY                                                00415000
         TITLE  'Symbolic Parameters'                                   00416000
*********************************************************************   00417000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00418000
*  ***************************************************************  *   00419000
*  * The following is an example of a macro definition with      *  *   00420000
*  * symbolic parameters.                                        *  *   00421000
*  ***************************************************************  *   00422000
*********************************************************************   00423000
         SPACE  3                                                       00424000
         MACRO                               Header                     00425000
&NAME    SWAP            &TO,&FROM           Prototype                  00426000
&NAME    ST              2,SAVE              Model                      00427000
         L               2,&FROM             Model                      00428000
         ST              2,&TO               Model                      00429000
         L               2,SAVE              Model                      00430000
         MEND                                Trailer                    00431000
                                                                        00432000
EXAMP1   CSECT                                                          00433000
         USING *,11                                                     00434000
BEGIN    SWAP  A,B                           Macro call                 00435000
         SWAP  A,C                           Macro call                 00436000
                                                                        00437000
A        DC    F'12'                                                    00438000
B        DC    F'3'                                                     00439000
C        DC    F'2'                                                     00440000
SAVE     DS    1F                                                       00441000
         TITLE  'Positional Parameters'                                 00442000
*********************************************************************   00443000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00444000
*  ***************************************************************  *   00445000
*  * The following is an example of a macro call usung           *  *   00446000
*  * keyword  parameters.                                        *  *   00447000
*  ***************************************************************  *   00448000
*********************************************************************   00449000
         SPACE  3                                                       00450000
         MACRO                                                          00451000
         KEYS  &KEYWORD=ABC,&KEY2=(A,B,C)                               00452000
         DC    C'&KEYWORD'                                              00453000
         DC    C'&KEY2'                                                 00454000
         MEND                                                           00455000
EXAMP1   CSECT                                                          00456000
         USING *,11                                                     00457000
*                                                                       00458000
* Call using defaults from prototype                                    00459000
*                                                                       00460000
         KEYS                                                           00461000
*                                                                       00462000
* Call using keywords                                                   00463000
*                                                                       00464000
         KEYS  KEYWORD=DEF,KEY2=(D,E,F)                                 00465000
         TITLE  'MEXIT instruction'                                     00466000
*********************************************************************   00467000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00468000
*  ***************************************************************  *   00469000
*  * The following is an example of a macro using the MEXIT      *  *   00470000
*  * statement                                                   *  *   00471000
*  ***************************************************************  *   00472000
*********************************************************************   00473000
         SPACE  3                                                       00474000
         MACRO                                                          00475000
         EXITS                                                          00476000
         DC     C'A'                                                    00477000
         DC     C'B'                                                    00478000
         DC     C'C'                                                    00479000
         MEXIT                                                          00480000
         DC     C'D'       Following lines not generated                00481000
         DC     C'E'       when macro is expanded                       00482000
         DC     C'F'                                                    00483000
         MEND                                                           00484000
         EXITS                                                          00485000
         TITLE  'AREAD instruction'                                     00486000
*********************************************************************   00487000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00488000
*  ***************************************************************  *   00489000
*  * The following is an example of a macro using the AREAD      *  *   00490000
*  * statement                                                   *  *   00491000
*  ***************************************************************  *   00492000
* Notes:                                                            *   00493000
*  The AREAD instruction has two formats.  Format 1 of the AREAD    *   00494000
*  instruction allows you to assign to a SETC symbol the character  *   00495000
*  string value of a statement that is placed immediately after a   *   00496000
*  macro instruction.                                               *   00497000
*  Format 2 of the AREAD instruction allows you to assign to a SETC *   00498000
*  symbol a character string containing the local time of day.      *   00499000
*********************************************************************   00500000
         SPACE  3                                                       00501000
         MACRO                                                          00502000
         MAC1                                                           00503000
&VAL     AREAD                                                          00504000
&VAL1    AREAD                                                          00505000
         DS     C'&VAL'                                                 00506000
         DS     C'&VAL1'                                                00507000
         MEND                                                           00508000
*                                                                       00509000
         MACRO                                                          00510000
         MAC2                                                           00511000
&VAL     AREAD CLOCKB                                                   00512000
         DC    C'&VAL'                                                  00513000
&VAL1    AREAD CLOCKD                                                   00514000
         DC    C'&VAL1'                                                 00515000
         MEND                                                           00516000
*                                                                       00517000
         MAC1                                                           00518000
THIS IS THE STATEMENT TO BE PROCESSED FIRST                             00519000
THIS IS THE SECOND STATEMENT FOR THE SECOND AREAD                       00520000
         MAC2                                                           00521000
*                                                                       00522000
         TITLE  'SYSECT system variable'                                00523000
*********************************************************************   00524000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00525000
*  ***************************************************************  *   00526000
*  * The following is an example of a macro using the &SYSECT    *  *   00527000
*  * system variable                                             *  *   00528000
*  ***************************************************************  *   00529000
* Notes:                                                            *   00530000
*  You can use &SYSECT in a macro definition to generate the name   *   00531000
*  of the current control section.  The current control section is  *   00532000
*  the control section in which the macro instruction that calls    *   00533000
*  the definition appears.                                          *   00534000
*  The local system variable symbol &SYSECT is assigned a read-only *   00535000
*  value each time a macro definition is called.                    *   00536000
*  The value assigned is the symbol that represents the name of the *   00537000
*  current control section from which the macro definition is       *   00538000
*  called.  Note that it is the control section in effect when the  *   00539000
*  macro is called.  A control section that has been initiated or   *   00540000
*  continued by substitution does not affect the value of &SYSECT   *   00541000
*  for the expansion of the current macro. However, it does affect  *   00542000
*  &SYSECT for a  subsequent macro call.  Nested macros cause the   *   00543000
*  assembler to assign a value to &SYSECT that depends on the       *   00544000
*  control section in  force inside the outer macro when the inner  *   00545000
*  macro is called.                                                 *   00546000
*  The following example shows these rules:                         *   00547000
*********************************************************************   00548000
         MACRO                                                          00549000
         INNER  &INCSECT                                                00550000
&INCSECT CSECT                                                          00551000
         DC     A(&SYSECT)                                              00552000
         MEND                                                           00553000
                                                                        00554000
         MACRO                                                          00555000
         OUTER1                                                         00556000
CSOUT1   CSECT                                                          00557000
         DS     100C                                                    00558000
         INNER  INA                                                     00559000
         INNER  INB                                                     00560000
         DC     A(&SYSECT)                                              00561000
         MEND                                                           00562000
                                                                        00563000
         MACRO                                                          00564000
         OUTER2                                                         00565000
         DC     A(&SYSECT)                                              00566000
         MEND                                                           00567000
MAINPROG CSECT                                                          00568000
         DS     200C                                                    00569000
         OUTER1                                                         00570000
         OUTER2                                                         00571000
*                                                                       00572000
         END                                                            00573000
                                                                        00574000
         TITLE  'SYSNDX system variable'                                00575000
*********************************************************************   00576000
* FUNCTIONAL DEMONSTRATION OF:                                      *   00577000
*  ***************************************************************  *   00578000
*  * The following is an example of a macro using the &SYSNDX    *  *   00579000
*  * system variable                                             *  *   00580000
*  ***************************************************************  *   00581000
* Notes:                                                            *   00582000
*  You can attach &SYSNDX to the end of a symbol inside a macro     *   00583000
*  definition to generate a unique suffix for that symbol each time *   00584000
*  you call the definition.  Although the same symbol is generated  *   00585000
*  by two or more calls to the same definition, the suffix provided *   00586000
*  by &SYSNDX produces two or more unique symbols.  Thus you avoid  *   00587000
*  an error being flagged for multiply defined symbols.             *   00588000
*********************************************************************   00589000
         MACRO                                                          00590000
         INNER1                                                         00591000
         GBLC   &NDXNUM                                                 00592000
A&SYSNDX SR     2,5                                                     00593000
         CR     2,5                                                     00594000
         BE     B&NDXNUM                                                00595000
         B      A&SYSNDX                                                00596000
         MEND                                                           00597000
*                                                                       00598000
         MACRO                                                          00599000
&NAME    OUTER1                                                         00600000
         GBLC   &NDXNUM                                                 00601000
&NDXNUM  SETC   '&SYSNDX'                                               00602000
&NAME    SR     2,4                                                     00603000
         AR     2,6                                                     00604000
         INNER1                                                         00605000
B&SYSNDX S      2,=F'1000'                                              00606000
         MEND                                                           00607000
         USING  *,11                                                    00608000
ALPHA    OUTER1                                                         00609000
BETA     OUTER1                                                         00610000
         END                                                            00611000
