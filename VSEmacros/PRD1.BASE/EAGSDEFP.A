         TITLE 'EAG   3.0 * EAGSDEFP  Stub EFPL Type PLIST'             00010000
****Start of Specifications****************************************     00020000
*                                                                       00030000
* Module name:      EAGSDEFP                                            00040000
*                                                                       00050000
* Descriptive name: Stub EFPL Type PLIST                                00060000
*                                                                       00070000
* Function:                                                             00080000
*   This module serves as stub and is combined with a compiled          00090000
*   REXX program of OBJ type.                                           00100000
*                                                                       00110000
*   The type of parameter list expected is supplied when from           00120000
*   within an EXEC the instruction CALL program_name is issued,         00130000
*   of if within an EXEC the program is invoked via function            00140000
*   invocation program_name().                                          00150000
*                                                                       00160000
*   The general processing sequence is as follows:                      00170000
*                                                                       00180000
*   1. Save registers.                                                  00190000
*   2. Obtain storage required for execution of the stub. If            00200000
*      storage can not be obtained simulate a system abend with         00210000
*      cancel code 0.                                                   00220000
*   3. Build a parameter list for the invocation of ARXEXEC. See        00230000
*      below for the mapping between input parameter list (upper        00240000
*      part of the picture) to the parameter list required for the      00250000
*      invocation of ARXEXEC (lower part of the figure).                00260000
*   4. Invoke ARXEXEC.                                                  00270000
*   5. Convert the result supplied by ARXEXEC to the form needed        00280000
*      for this type of invocation.                                     00290000
*   6. Free obtained storage, do not care about errors.                 00300000
*   8. Restore registers and return to the caller.                      00310000
*                                                                       00320000
*   Parameter list for the invocation of ARXEXEC:                       00330000
*                                                                       00340000
*   Parameter 1  Address of exec block (not supplied - 0).              00350000
*   Parameter 2  Address of the argument list.                          00360000
*   Parameter 3  Indicate type of invocation (Subroutine, extended      00370000
*                return codes).                                         00380000
*   Parameter 4  Address of in-storage block describing the             00390000
*                compiled program.                                      00400000
*   Parameter 5  Reserved, must be 0.                                   00410000
*   Parameter 6  Address of an EVALBLOCK to contain the result.         00420000
*   Parameter 7  Address of a work area vector (not supplied - 0).      00430000
*   Parameter 8  Address of user field (not supplied - 0).              00440000
*   Parameter 9  Address of Environment block passed in register 0      00450000
*                on invocation.                                         00460000
*                                                                       00470000
*   The necessary final EVALBLOCK handling (and the determination       00480000
*   of the return code to pass back) is as follows:                     00490000
*                                                                       00500000
*     RC_to_pass_back = 0                                               00510000
*     If RC_from_ARXEXEC ¬=0 Then                                       00520000
*       RC_to_pass_back=RC_from_ARXEXEC                                 00530000
*     Else                                                              00540000
*       Do                                                              00550000
*         If EVALBLOCK shows truncated result Then                      00560000
*           Do                                                          00570000
*             Invoke ARXRLT 'GETBLOCK'                                  00580000
*             If rc ¬= 0 Then                                           00590000
*               RC_to_pass_back=rc                                      00600000
*             Else                                                      00610000
*               Do                                                      00620000
*                 Put new EVALBLOCK address into parameter list         00630000
*                 Invoke ARXRLT 'GETRLTE' with new EVALBLOCK            00640000
*                 If rc ¬= 0 Then                                       00650000
*                   RC_to_pass_back=rc                                  00660000
*               End                                                     00670000
*           End                                                         00680000
*       End                                                             00690000
*                                                                       00700000
*   A return code of 100 is passed back in register 15 if               00710000
*   storage could not be obtained.  In this case register 0             00720000
*   contains a cancel code of 0.  If the return code passed back        00730000
*   from ARXEXEC is 100 or 104 (which indicates an abend),              00740000
*   register 0 contains the value passed back by ARXEXEC (cancel        00750000
*   code).                                                              00760000
*                                                                       00770000
* Ð-------¯ Ð----------------------------------¯                        00780000
* |       | | Saved entry R0  Ð-----------¯    |                        00790000
* Ó-------Õ | Ð-----------²-->| ENVBLOCK  |    |                        00800000
* |       | ¿>¿--Ô--Ô--Ô--]   ¿-----------]    |                        00810000
* Ó-------Õ                                    |                        00820000
* |       |                                    |                        00830000
* Ó-------Õ                 Ð----------------¯ |                        00840000
* |       |                 | Ð-----------¯  | |                        00850000
* Ó-------Õ                 ¿>| ArgList   |  | |                        00860000
* |       Ó------------------>¿-----------]  | |                        00870000
* Ó-Ô-Ô-Ô-Õ                   Ð-----------¯  | |                        00880000
* |       Ó-->Ð-----------²-->| EVALBLOK  |  | |                        00890000
* ¿-Ô-Ô-Ô-] Ð>¿--Ô--Ô--Ô--]   ¿-----------]  | |                        00900000
*           |                                | |                        00910000
*           |                                | |                        00920000
* Ð-------¯ | Ð-----------¯                  | |                        00930000
* |       Ó²->|00 00 00 00|                  | |                        00940000
* Ó-------Õö| ¿--Ô--Ô--Ô--]   Ð-----------²--] |                        00950000
* |       Ó|----------------->¿--Ô--Ô--Ô--]    |                        00960000
* Ó-------Õ|| Ð-----------¯                    |                        00970000
* |       Ó|->|30 00 00 00|                    |                        00980000
* Ó-------Õ|| ¿--Ô--Ô--Ô--]   Ð-----------¯    |                        00990000
* |       Ó|->Ð-----------²-->| INSTBLK   |    |                        01000000
* Ó-------Õ|| ¿--Ô--Ô--Ô--]   ¿-----------]    |                        01010000
* |       ÓÕ|                                  |                        01020000
* Ó-------Õö|                                  |                        01030000
* |       Ó|]                                  |                        01040000
* Ó-------Õ|                                   |                        01050000
* |       ÓÕ                                   |                        01060000
* Ó-------Õö                                   |                        01070000
* |       Ó]                                   |                        01080000
* Ó-------Õ                                    |                        01090000
* |       Ó------------------------------------]                        01100000
* ¿-------]                                                             01110000
*                                                                       01120000
* Status:           IBM Library for REXX/370 (5695-014),                01130000
*                   Release 3, Level 0                                  01140000
*                                                                       01150000
* Module type:      see below                                           01160000
*   Processor:      HASM V2                                             01170000
*   Attributes:     Reentrant                                           01180000
*   Code page:      00037                                               01190000
*   Character set:  00697                                               01200000
*   Module size:    000238                                              01210000
*                                                                       01220000
* Entry points:                                                         01230000
*   EAGSTUB  - Stub EFPL Type PLIST                                     01240000
*                                                                       01250000
* Maclibs:                                                              01260000
*   SYS1.MACLIB                                                         01270000
*                                                                       01280000
* Macros and control blocks:                                            01290000
*   GETVIS   - Allocate Virtual Storage                                 01300000
*   FREEVIS  - Free Virtual Storage                                     01310000
*   ARXENVB  - Environment Block                                        01320000
*   ARXEVALB - EVALBLOCK                                                01330000
*   ARXEXTE  - REXX Vector of External Entry Points                     01340000
*   ARXINSTB - In-Storage Block                                         01350000
*                                                                       01360000
* Change activity:                                                      01370000
*   94-10-27  Release 3.0                                               01380000
*                                                                       01390000
****End of Specifications******************************************     01400000
                                                            SPACE 1     01410000
EAGSTUB  RMODE ANY                                                      01420000
EAGSTUB  AMODE 31                                                       01430000
                                                            SPACE 1     01440000
EAGSTUB  CSECT                                                          01450000
         ENTRY EAGSTUB              Make name known                     01460000
         EXTRN EAGOBJ               Compiled program                    01470000
         USING *,R15                                                    01480000
         B     PROLOG               Branch around header                01490000
         DROP  R15                                                      01500000
                                                            SPACE 1     01510000
STIDL    DC    AL2(L'STID+L'STIDX)  ID string                           01520000
STID     DC    C' Compiled REXX - EFPL type PLIST - VSE'                01530000
STIDX    DC    C' Generated &SYSDATE &SYSTIME'                          01540000
                                                            SPACE 1     01550000
* ****** ***** ****************************************************     01560000
*                                                                       01570000
*        DC    C' Any string you would like to show'                    01580000
*        DC    C' up in your linked programs, like a'                   01590000
*        DC    C' copyright notice, may be added here.'                 01600000
*                                                                       01610000
* ****** ***** ****************************************************     01620000
                                                            SPACE 1     01630000
*******************************************************************     01640000
* Save registers, establish addressability.                             01650000
*******************************************************************     01660000
                                                            SPACE 1     01670000
         DS   0D                                                        01680000
         DC    A(EAGSTBL)           Length of stub                      01690000
         DC    F'0'                                                     01700000
PROLOG   DS   0D                                                        01710000
         STM   R14,R12,12(R13)      Save registers                      01720000
         BALR  R12,R0               Establish base register             01730000
         USING *,R12                Tell assembler                      01740000
                                                            SPACE 1     01750000
*******************************************************************     01760000
* Get required storage, return with R15=100, R0=0 (system abend,        01770000
* cancel code 0) if storage cannot be obtained.                         01780000
*******************************************************************     01790000
                                                            SPACE 1     01800000
         LR    R2,R1                Addr input parm vector              01810000
         LR    R3,R0                Addr environment block              01820000
         LA    R0,STSTORAL          Storage required                    01830000
         GETVIS ADDRESS=(1),LENGTH=(0),LOC=ANY                          01840000
         LTR   R15,R15              Did we get the storage?             01850000
         BNZ   NOSTOR               ...No, give up                      01860000
         ST    R13,4(,R1)           Save caller's save area addr        01870000
         ST    R1,8(R13)            Save my save area addr              01880000
         LR    R13,R1               Address my storage                  01890000
         USING STSTORAG,R13         Establish addressability            01900000
         ST    R0,STSTLEN           Keep size of gotten storage         01910000
                                                            SPACE 1     01920000
*******************************************************************     01930000
* Now fill required control blocks.                                     01940000
* R2 points to original parameter vector.                               01950000
*******************************************************************     01960000
                                                            SPACE 1     01970000
* Initialize PLIST.                                                     01980000
         LA    R3,NIL               No exec block                       01990000
         LA    R4,STAARGV           Addr argument vector                02000000
         LA    R5,INVOTYPE          Invocation type                     02010000
         LA    R6,STAINST           Addr in-storage block               02020000
         LR    R7,R3                Parameter 5, must be 0              02030000
         L     R8,20(,R2)           Addr of addr of EVALBLOCK           02040000
         LA    R8,0(,R8)            Clear HOB                           02050000
         L     R9,0(,R8)            Addr of EVALBLOCK                   02060000
         SR    R10,R10              Length zero                         02070000
         ST    R10,EVALBLOCK_EVLEN-EVALBLOCK(,R9) Keep it               02080000
         LR    R9,R3                No work area                        02090000
         LR    R10,R3               No user field                       02100000
         L     R11,4(,R13)          Addr caller's save area             02110000
         LA    R11,20(,R11)         Addr of original R0                 02120000
         O     R11,LASTARG          Last argument                       02130000
         STM   R3,R11,STPLIST       Store in PLIST                      02140000
* Initialize addresses of control blocks.                               02150000
         L     R3,16(,R2)           Addr argument vector                02160000
         ST    R3,STAARGV           Keep it                             02170000
         LA    R3,STINSTB           Addr in-storage block               02180000
         ST    R3,STAINST           Keep it                             02190000
* Initialize in-storage control block.                                  02200000
         LA    R3,STINSTB           Address of in-storage block         02210000
         USING INSTBLK,R3           Make it addressable                 02220000
         MVI   0(R3),X'00'          Init in-storage block to X'00'      02230000
         MVC   1(LINSTB-1,R3),0(R3)                                     02240000
         MVC   INSTBLK_ACRONYM,INSTBLK_ACRYN Identifier                 02250000
         LA    R4,LINSTB            Length of in-storage block          02260000
         ST    R4,INSTBLK_HDRLEN    Keep in in-storage block            02270000
         LA    R4,STINSTE           Addr of first entry                 02280000
         ST    R4,INSTBLK_ADDRESS   Keep in in-storage block            02290000
         LA    R4,LINSTE            Length of entries                   02300000
         ST    R4,INSTBLK_USEDLEN   Keep in in-storage block            02310000
         MVI   INSTBLK_MEMBER,C'?'  Want default search order           02320000
         MVI   INSTBLK_MEMBER+1,C' ' But don't know member name         02330000
         MVC   INSTBLK_MEMBER+2(L'INSTBLK_MEMBER-2),INSTBLK_MEMBER+1    02340000
         MVI   INSTBLK_DDNAME,C' '  Don't know DD name                  02350000
         MVC   INSTBLK_DDNAME+1(L'INSTBLK_DDNAME-1),INSTBLK_DDNAME      02360000
         MVI   INSTBLK_SUBCOM,C' '  Don't know initial SUBCOM           02370000
         MVC   INSTBLK_SUBCOM+1(L'INSTBLK_SUBCOM-1),INSTBLK_SUBCOM      02380000
*        SR    R4,R4                Length of DSN is zero               02390000
*        ST    R4,INSTBLK_DSNLEN    Keep in in-storage block            02400000
         DROP  R3                                                       02410000
* Initialize in-storage control block entry.                            02420000
         LA    R3,STINSTE           Address of in-storage block entry   02430000
         USING INSTBLK_ENTRY,R3     Make it addressable                 02440000
         L     R4,AOBJECT           Address of compiled program         02450000
         ST    R4,INSTBLK_STMT@                                         02460000
         LA    R4,20                Say it's 20 bytes                   02470000
         ST    R4,INSTBLK_STMTLEN                                       02480000
         DROP  R3                                                       02490000
                                                            SPACE 1     02500000
*******************************************************************     02510000
* Invoke ARXEXEC, store return code (and abend code) in original        02520000
* save area, so that when registers are restored R15 (and R0) will      02530000
* be set correctly.                                                     02540000
*******************************************************************     02550000
                                                            SPACE 1     02560000
         L     R10,4(,R13)          Addr caller's save area             02570000
         L     R7,20(,R10)          Original R0 = addr environment      02580000
         L     R8,ENVBLOCK_IRXEXTE-ENVBLOCK(,R7) Addr ARXEXTE           02590000
         L     R15,ARXEXEC-ARXEXTE(,R8) Addr of ARXEXEC                 02600000
         LR    R0,R7                addr environment                    02610000
         LA    R1,STPLIST           Addr PLIST for ARXEXEC              02620000
         BALR  R14,R15              Invoke ARXEXEC                      02630000
         C     R15,SABEND           System Abend?                       02640000
         BE    ABEND                ...Yes, keep register 0             02650000
         C     R15,UABEND           User Abend?                         02660000
         BE    ABEND                ...Yes, keep register 0             02670000
         LTR   R15,R15              Got return code in register         02680000
         BNZ   NOABEND              ...Yes, need not convert            02690000
                                                            SPACE 1     02700000
*******************************************************************     02710000
* Return code from ARXEXEC is 0, we inspect whether the EVALBLOCK       02720000
* shows a truncated result. If it does we request a new EVALBLOCK       02730000
* (stop with return code if this is not possible), and then             02740000
* we request from ARXRLT that this EVALBLOCK be filled (stop with       02750000
* return code if this is not possible).                                 02760000
*******************************************************************     02770000
                                                            SPACE 1     02780000
         L     R3,20(,R2)           Addr of addr of EVALBLOCK           02790000
         L     R3,0(,R3)            Addr of EVALBLOCK                   02800000
         L     R7,EVALBLOCK_EVLEN-EVALBLOCK(,R3) Data length            02810000
         LCR   R7,R7                Check on truncated result           02820000
         BNP   NOABEND              Ok result, R15 still 0              02830000
         ST    R7,STRLTEL           Store required length               02840000
         LA    R4,GETBLOCK          Was negative, not X'80000000'       02850000
         LA    R5,STRAEVB           Address of EVALBLOCK                02860000
         SR    R6,R6                Originally zero                     02870000
         ST    R6,0(,R5)            Init EVALBLOCK address              02880000
         LA    R6,STRLTEL           Required length                     02890000
         L     R10,4(,R13)          Addr caller's save area             02900000
         LA    R7,20(,R10)          Addr of original R0                 02910000
         O     R7,LASTARG           Last argument                       02920000
         STM   R4,R7,STRLTPL        Store in PLIST                      02930000
         L     R7,20(,R10)          Original R0 = addr environment      02940000
         L     R8,ENVBLOCK_IRXEXTE-ENVBLOCK(,R7) Addr ARXEXTE           02950000
         L     R15,ARXRLT-ARXEXTE(,R8) Addr of ARXRLT                   02960000
         LR    R0,R7                Addr environment                    02970000
         LA    R1,STRLTPL           Addr PLIST                          02980000
         LR    R7,R15               Keep address of ARXRLT              02990000
         BALR  R14,R15              ARXRLT 'GETBLOCK'                   03000000
         LTR   R15,R15              Successful?                         03010000
         BNZ   NOABEND              No, give up                         03020000
         L     R3,20(,R2)           Addr of addr of EVALBLOCK           03030000
         MVC   0(4,R3),STRAEVB      Update invocation parm list         03040000
         LA    R4,GETRLTE           Get result function                 03050000
         ST    R4,STRLTPL           Store in PLIST                      03060000
         LR    R15,R7               Addr of ARXRLT                      03070000
         LR    R8,R0                Addr environment                    03080000
         BALR  R14,R15              ARXRLT 'GETRLTE'                    03090000
*                                   Fall through, R15 set               03100000
* In case of no abend we must keep R15.                                 03110000
NOABEND  DS   0H                                                        03120000
         L     R10,4(,R13)          Addr caller's save area             03130000
         ST    R15,16(,R10)         Keep return code                    03140000
         B     DONE                 Common processing                   03150000
* In case we did not get storage we simulate a system abend with        03160000
* cancel code 0.                                                        03170000
NOSTOR   DS   0F                                                        03180000
         L     R15,SABEND           System abend                        03190000
         SR    R0,R0                Cancel code 0                       03200000
         STM   R15,R0,16(R10)       Keep abend and return code          03210000
         B     ALLDONE                                                  03220000
* In case of an abend we must keep R15 and R0.                          03230000
ABEND    DS   0F                                                        03240000
         L     R10,4(,R13)          Addr caller's save area             03250000
         STM   R15,R0,16(R10)       Keep abend and return code          03260000
                                                            SPACE 1     03270000
*******************************************************************     03280000
* Give back storage gotten, reestablish caller's save area.             03290000
* Give back storage conditionally, do not care if not successful.       03300000
*******************************************************************     03310000
                                                            SPACE 1     03320000
DONE     DS   0H                                                        03330000
         L     R0,STSTLEN           Size of storage gotten              03340000
         DROP  R13                  Storage no longer available         03350000
         LR    R1,R13               Copy my storage address             03360000
         L     R13,4(,R13)          Restore caller's save area          03370000
         FREEVIS ADDRESS=(1),LENGTH=(0) Give back storage               03380000
                                                            SPACE 1     03390000
*******************************************************************     03400000
* Restore register (R15 and R0 may be changed), return to caller        03410000
*******************************************************************     03420000
                                                            SPACE 1     03430000
ALLDONE  DS   0H                                                        03440000
         DROP  R12                  No longer base                      03450000
         LM    R14,R12,12(R13)      Restore registers                   03460000
         BR    R14                  Return to caller                    03470000
         EJECT                                                          03480000
*******************************************************************     03490000
* Required constants and DSECTS                                         03500000
*******************************************************************     03510000
                                                            SPACE 1     03520000
*                                                                       03530000
AOBJECT  DC    V(EAGOBJ)            Address of compiled program         03540000
*                                                                       03550000
NIL      DC    XL4'00000000'        NIL                                 03560000
INVOTYPE DC    XL4'30000000'        Subrtn, extended return code        03570000
LASTARG  DC    XL4'80000000'        Last argument                       03580000
SABEND   DC    F'100'               System Abend                        03590000
UABEND   DC    F'104'               User Abend                          03600000
FENCE    DC    XL8'FFFFFFFFFFFFFFFF' Fence                              03610000
GETBLOCK DC    CL8'GETBLOCK'        Function for ARXRLT                 03620000
GETRLTE  DC    CL8'GETRLTE'         Function for ARXRLT                 03630000
*                                                                       03640000
STSTORAG DSECT                                                          03650000
STSAVE   DS    18F                  Save area                           03660000
STSTLEN  DS    F                    Length of storage in bytes          03670000
STPLIST  DS    9A                   PLIST for ARXEXEC invocation        03680000
STAARGV  DS    A                    Addr of argument vector             03690000
STAINST  DS    A                    Addr of in-storage block            03700000
         DS   0D                                                        03710000
STINSTB  DS    CL(LINSTB)           In-storage block                    03720000
STINSTE  DS    CL(LINSTE)           In-storage block entry              03730000
         DS   0D                                                        03740000
         ORG   STPLIST              Use storage efficiently             03750000
STRLTPL  DS    4F                   PLIST for ARXRLT                    03760000
STRLTEL  DS    F                    Required length of EVALBLOCK        03770000
STRAEVB  DS    F                    Address of Environment              03780000
         ORG   ,                    Set to maximum                      03790000
STSTORAL EQU   *-STSTORAG           Length of DSECT                     03800000
                                                            SPACE 1     03810000
EAGSTUB  CSECT                                                          03820000
         ARXINSTB DECLARE=YES       In-Storage Block                    03830000
EAGSTUB  CSECT                                                          03840000
         ARXEVALB DECLARE=NO        EVALBLOK                            03850000
EAGSTUB  CSECT                                                          03860000
         ARXENVB                    Environment block                   03870000
EAGSTUB  CSECT                                                          03880000
EAGSTUB  CSECT                                                          03890000
         ARXEXTE                    REXX Vector of Ext.Ent.Pts          03900000
EAGSTUB  CSECT                                                          03910000
         EJECT                                                          03920000
*******************************************************************     03930000
* Find length of various DSECTs, register equates                       03940000
*******************************************************************     03950000
                                                            SPACE 1     03960000
INSTBLK  DSECT ,                                                        03970000
         ORG                                                            03980000
LINSTB   EQU   *-INSTBLK            In-storage block length             03990000
                                                            SPACE 1     04000000
INSTBLK_ENTRY DSECT ,                                                   04010000
         ORG                                                            04020000
LINSTE   EQU   *-INSTBLK_ENTRY      In-storage block entry length       04030000
                                                            SPACE 1     04040000
EVALBLOCK DSECT ,                                                       04050000
         ORG                                                            04060000
LEVALB   EQU   *-EVALBLOCK+11       EVALBLOCK required length           04070000
                                                            SPACE 1     04080000
R0       EQU   0                                                        04090000
R1       EQU   1                                                        04100000
R2       EQU   2                                                        04110000
R3       EQU   3                                                        04120000
R4       EQU   4                                                        04130000
R5       EQU   5                                                        04140000
R6       EQU   6                                                        04150000
R7       EQU   7                                                        04160000
R8       EQU   8                                                        04170000
R9       EQU   9                                                        04180000
R10      EQU   10                                                       04190000
R11      EQU   11                                                       04200000
R12      EQU   12                                                       04210000
R13      EQU   13                                                       04220000
R14      EQU   14                                                       04230000
R15      EQU   15                                                       04240000
                                                            SPACE 1     04250000
EAGSTUB  CSECT                                                          04260000
         DS   0D                    Compiled prog starts here           04270000
EAGSTBL  EQU   *-EAGSTUB            Length of stub                      04280000
         END                                                            04290000
