         TITLE 'EAG   3.0 * EAGSDVSE  Stub VSE Type PLIST'              00010000
****Start of Specifications****************************************     00020000
*                                                                       00030000
* Module name:      EAGSDVSE                                            00040000
*                                                                       00050000
* Descriptive name: Stub VSE Type PLIST                                 00060000
*                                                                       00070000
* Function:                                                             00080000
*   This module serves as stub and is combined with a compiled          00090000
*   REXX program of OBJ type.                                           00100000
*                                                                       00110000
*   The type of parameter list expected is supplied when a program      00120000
*   is invoked from VSE JCL by means of EXEC program_name.              00130000
*                                                                       00140000
*   The general processing sequence is as follows:                      00150000
*                                                                       00160000
*   1. Obtain storage required for execution of the stub. If            00170000
*      storage cannot be obtained return with return code 4095          00180000
*      in R15.                                                          00190000
*   2. Build a parameter list for the invocation of ARXEXEC. See        00200000
*      below for the mapping between input parameter list (upper        00210000
*      part of the picture) to the parameter list required for the      00220000
*      invocation of ARXEXEC (lower part of the figure).                00230000
*      Note that R1=R15 on entry of the stub means that no              00240000
*      parameter list is supplied.                                      00250000
*   3. Invoke ARXEXEC, if ARXEXEC cannot be CDLOADed return with        00260000
*      return code 4095 in R15.                                         00270000
*   4. Convert the result supplied by ARXEXEC to the form needed        00280000
*      for this type of invocation.                                     00290000
*   5. CDDELETE ARXEXEC, do not care about errors.                      00300000
*   6. Free obtained storage, do not care about errors.                 00310000
*   7. Return to the caller.                                            00320000
*                                                                       00330000
*   Parameter list for the invocation of ARXEXEC:                       00340000
*                                                                       00350000
*   Parameter 1  Address of exec block (not supplied - 0).              00360000
*   Parameter 2  Address of the argument list.                          00370000
*   Parameter 3  Indicate type of invocation (Command, extended         00380000
*                return codes).                                         00390000
*   Parameter 4  Address of in-storage block describing the             00400000
*                compiled program.                                      00410000
*   Parameter 5  Reserved, must be 0.                                   00420000
*   Parameter 6  Address of an EVALBLOCK to contain the result          00430000
*                (capable to hold 11 bytes).                            00440000
*   Parameter 7  Address of a work area vector (not supplied - 0).      00450000
*   Parameter 8  Address of user field (not supplied - 0).              00460000
*                                                                       00470000
*   A return code of 4095 is passed back in register 15 if              00480000
*   either storage could not be obtained, or if ARXEXEC could           00490000
*   not be loaded successfully, or if ARXEXEC returns with a            00500000
*   return code different to 0 (indicating that the program did         00510000
*   not run to completion successfully).  If the return code            00520000
*   from ARXEXEC is 0, the value contained in the EVALBLOCK             00530000
*   control block is divided by 4096, and the remainder is              00540000
*   passed back in register 15.                                         00550000
*                                                                       00560000
*                   Ð------------------------¯                          00570000
*                   ò                        |                          00580000
* Ð-------¯   Ð-----²-- ---- -----¯          |                          00590000
* |x      Ó-->|Len  |             |          |                          00600000
* ¿-Ô-Ô-Ô-]   ¿--Ô--Ô-- ---- -----]          |                          00610000
*  x='1xxxxxxx'B if length of parm > 0       |                          00620000
*  x='0xxxxxxx'B if length of parm = 0       |                          00630000
*                                            |                          00640000
* Ð-------¯   Ð-----------¯                  |                          00650000
* |       Ó²->|00 00 00 00|                  |                          00660000
* Ó-------Õö  ¿--Ô--Ô--Ô--]                  |                          00670000
* |       Ó|----------------->Ð-----------²-->Ð-----------²-----------¯ 00680000
* Ó-------Õ|  Ð-----------¯   ¿--Ô--Ô--Ô--]  ¿Õ           |00 00 Len  | 00690000
* |       Ó|->|90 00 00 00|                   Ó--Ô--Ô--Ô--±--Ô--Ô--Ô--Õ 00700000
* Ó-------Õ|  ¿--Ô--Ô--Ô--]   Ð-----------¯   |FF FF FF FF|FF FF FF FF| 00710000
* |       Ó|->Ð-----------²-->| INSTBLK   |   ¿--Ô--Ô--Ô--Ô--Ô--Ô--Ô--] 00720000
* Ó-------Õ|  ¿--Ô--Ô--Ô--]   ¿-----------]                             00730000
* |       ÓÕ                                                            00740000
* Ó-------Õö                  Ð-----------¯                             00750000
* |       Ó|->Ð-----------²-->| EVALBLOK  |                             00760000
* Ó-------Õ|  ¿--Ô--Ô--Ô--]   ¿-----------]                             00770000
* |       ÓÕ                                                            00780000
* Ó-------Õö                                                            00790000
* |       Ó]                                                            00800000
* ¿-------]                                                             00810000
*                                                                       00820000
* Status:           IBM Library for REXX/370 (5695-014),                00830000
*                   Release 3, Level 0                                  00840000
*                                                                       00850000
* Module type:      see below                                           00860000
*   Processor:      HASM V2                                             00870000
*   Attributes:     Reentrant                                           00880000
*   Code page:      00037                                               00890000
*   Character set:  00697                                               00900000
*   Module size:    000238                                              00910000
*                                                                       00920000
* Entry points:                                                         00930000
*   EAGSTUB  - Stub VSE Type PLIST                                      00940000
*                                                                       00950000
* Maclibs:                                                              00960000
*   SYS1.MACLIB                                                         00970000
*                                                                       00980000
* Macros and control blocks:                                            00990000
*   GETVIS   - Allocate Virtual Storage                                 01000000
*   FREEVIS  - Free Virtual Storage                                     01010000
*   CDLOAD   - Bring a Load Module into Virtual Storage                 01020000
*   CDDELETE - Relinquish Control of a Load Module                      01030000
*   ARXEVALB - EVALBLOCK                                                01040000
*   ARXINSTB - In-Storage Block                                         01050000
*                                                                       01060000
* Change activity:                                                      01070000
*   94-10-27  Release 3.0                                               01080000
*                                                                       01090000
****End of Specifications******************************************     01100000
                                                            SPACE 1     01110000
EAGSTUB  RMODE ANY                                                      01120000
EAGSTUB  AMODE 31                                                       01130000
                                                            SPACE 1     01140000
EAGSTUB  CSECT                                                          01150000
         ENTRY EAGSTUB              Make name known                     01160000
         EXTRN EAGOBJ               Compiled program                    01170000
         BALR  R12,0                Establish base                      01180000
         LA    R12,0(,R12)          Clear HOB                           01190000
         BCTR  R12,0                Decrement base                      01200000
         BCTR  R12,0                Base to CSECT                       01210000
         USING EAGSTUB,R12                                              01220000
         B     PROLOG               Branch around header                01230000
                                                            SPACE 1     01240000
STIDL    DC    AL2(L'STID+L'STIDX)  ID string                           01250000
STID     DC    C' Compiled REXX - VSE type PLIST'                       01260000
STIDX    DC    C' Generated &SYSDATE &SYSTIME'                          01270000
                                                            SPACE 1     01280000
* ****** ***** ****************************************************     01290000
*                                                                       01300000
*        DC    C' Any string you would like to show'                    01310000
*        DC    C' up in your linked programs, like a'                   01320000
*        DC    C' copyright notice, may be added here.'                 01330000
*                                                                       01340000
* ****** ***** ****************************************************     01350000
                                                            SPACE 1     01360000
*******************************************************************     01370000
* Header data.                                                          01380000
*******************************************************************     01390000
                                                            SPACE 1     01400000
         DS   0D                                                        01410000
         DC    A(EAGSTBL)           Length of stub                      01420000
         DC    F'0'                                                     01430000
PROLOG   DS   0D                                                        01440000
                                                            SPACE 1     01450000
*******************************************************************     01460000
* Get required storage, stop with return code 100, reason code 0        01470000
* if not successful.                                                    01480000
*******************************************************************     01490000
                                                            SPACE 1     01500000
         LR    R2,R1                Addr input parm vector              01510000
         LR    R11,R15              Keep R15 for later                  01520000
         L     R4,SERROR            Assume getvis will fail             01530000
         LA    R0,STSTORAL          Storage required                    01540000
         GETVIS ADDRESS=(1),LENGTH=(0),LOC=ANY                          01550000
         LTR   R15,R15              Did it work?                        01560000
         BNZ   ALLDONE              ...No, give up                      01570000
         LR    R13,R1               Address my storage                  01580000
         USING STSTORAG,R13         Establish addressability            01590000
         ST    R0,STSTLEN           Keep size of gotten storage         01600000
         ST    R14,STSSR14          Keep return address                 01610000
                                                            SPACE 1     01620000
*******************************************************************     01630000
* Now fill required control blocks.                                     01640000
* R2 points to original parameter vector.                               01650000
* R11 is the original register 15.                                      01660000
*******************************************************************     01670000
                                                            SPACE 1     01680000
* Initialize PLIST.                                                     01690000
         LA    R3,NIL               No exec block                       01700000
         LA    R4,STAARGV           Addr argument vector                01710000
         LA    R5,INVOTYPE          Invocation type                     01720000
         LA    R6,STAINST           Addr in-storage block               01730000
         LR    R7,R3                Parameter 5 must be 0               01740000
         LA    R8,STAEVAL           Addr EVALBLOCK                      01750000
         LR    R9,R3                No work area                        01760000
         LR    R10,R3               No user field                       01770000
         O     R10,LASTARG          Last argument                       01780000
         STM   R3,R10,STPLIST       Store in PLIST                      01790000
* Initialize addresses of control blocks.                               01800000
         LA    R3,STARGV            Addr argument vector                01810000
         ST    R3,STAARGV           Keep it                             01820000
         LA    R3,STINSTB           Addr in-storage block               01830000
         ST    R3,STAINST           Keep it                             01840000
         LA    R3,STEVALB           Addr EVALBLOCK                      01850000
         ST    R3,STAEVAL           Keep it                             01860000
* Initialize argument vector.                                           01870000
         CR    R2,R11               R1 equal R15?                       01880000
         BNE   GOTARG               ...No, means arg exists             01890000
         LM    R4,R5,FENCE          Indicate no argument                01900000
         B     KEEPARG              Keep in control block               01910000
GOTARG   DS   0H                                                        01920000
         TM    0(R2),B'10000000'    Is HOB on?                          01930000
         BO    LONGARG              ...Yes, arg has length > 0          01940000
         SR    R4,R4                Address of arg is NIL               01950000
         SR    R5,R5                Length of arg is 0                  01960000
         B     KEEPARG              Keep in control block               01970000
LONGARG  DS   0H                                                        01980000
         SR    R3,R3                Clear register                      01990000
         ICM   R3,B'0111',1(R2)     Get 24 bit address                  02000000
         LA    R4,2(,R3)            Addr string part of parm            02010000
         LH    R5,0(,R3)            Length of parm                      02020000
KEEPARG  DS   0H                                                        02030000
         LM    R6,R7,FENCE          DW fence                            02040000
         STM   R4,R7,STARGV         Arg vector with fence               02050000
* Initialize in-storage control block.                                  02060000
         LA    R3,STINSTB           Address of in-storage block         02070000
         USING INSTBLK,R3           Make it addressable                 02080000
         MVI   0(R3),X'00'          Init in-storage block to X'00'      02090000
         MVC   1(LINSTB-1,R3),0(R3)                                     02100000
         MVC   INSTBLK_ACRONYM,INSTBLK_ACRYN Identifier                 02110000
         LA    R4,LINSTB            Length of in-storage block          02120000
         ST    R4,INSTBLK_HDRLEN    Keep in in-storage block            02130000
         LA    R4,STINSTE           Addr of first entry                 02140000
         ST    R4,INSTBLK_ADDRESS   Keep in in-storage block            02150000
         LA    R4,LINSTE            Length of entries                   02160000
         ST    R4,INSTBLK_USEDLEN   Keep in in-storage block            02170000
         MVI   INSTBLK_MEMBER,C'?'  Want default search order           02180000
         MVI   INSTBLK_MEMBER+1,C' ' But don't know member name         02190000
         MVC   INSTBLK_MEMBER+2(L'INSTBLK_MEMBER-2),INSTBLK_MEMBER+1    02200000
         MVI   INSTBLK_DDNAME,C' '  Don't know DD name                  02210000
         MVC   INSTBLK_DDNAME+1(L'INSTBLK_DDNAME-1),INSTBLK_DDNAME      02220000
         MVI   INSTBLK_SUBCOM,C' '  Don't know initial SUBCOM           02230000
         MVC   INSTBLK_SUBCOM+1(L'INSTBLK_SUBCOM-1),INSTBLK_SUBCOM      02240000
*        SR    R4,R4                Length of DSN is zero               02250000
*        ST    R4,INSTBLK_DSNLEN    Keep in in-storage block            02260000
         DROP  R3                                                       02270000
* Initialize in-storage control block entry.                            02280000
         LA    R3,STINSTE           Address of in-storage block entry   02290000
         USING INSTBLK_ENTRY,R3     Make it addressable                 02300000
         L     R4,AOBJECT           Address of compiled program         02310000
         ST    R4,INSTBLK_STMT@                                         02320000
         LA    R4,20                Say it's 20 bytes                   02330000
         ST    R4,INSTBLK_STMTLEN                                       02340000
         DROP  R3                                                       02350000
* Initialize EVALBLOCK.                                                 02360000
         LA    R3,STEVALB           Address of EVALBLOCK                02370000
         USING EVALBLOCK,R3         Make it addressable                 02380000
         SR    R4,R4                Zero                                02390000
         ST    R4,EVALBLOCK_EVPAD1  Zero into EVALBLOCK                 02400000
         LA    R5,(LEVALB+7)/8      Size of EVALBLOCK in DWs            02410000
         ST    R5,EVALBLOCK_EVSIZE  Keep in EVALBLOCK                   02420000
         ST    R4,EVALBLOCK_EVLEN   Length zero into EVALBLOCK          02430000
         ST    R4,EVALBLOCK_EVPAD2  Zero into EVALBLOCK                 02440000
         DROP  R3                                                       02450000
                                                            SPACE 1     02460000
*******************************************************************     02470000
* Invoke ARXEXEC, keep return code.                                     02480000
*******************************************************************     02490000
                                                            SPACE 1     02500000
         L     R4,SERROR            Assume CDLOAD  or ARXEXEC fail      02510000
         ST    R4,STSSR15           Keep fitting return code            02520000
         CDLOAD ARXEXEC,RETPNF=YES                                      02530000
         LTR   R15,R15              Did it work?                        02540000
         BNZ   DONE                 ...No, give up                      02550000
         LR    R15,R1               Entry point address                 02560000
         SR    R0,R0                No environment                      02570000
         LA    R1,STPLIST           Addr PLIST for ARXEXEC              02580000
         BALR  R14,R15              Invoke ARXEXEC                      02590000
         LTR   R15,R15              Got return code in register         02600000
         BNZ   NOCONV               ...Yes, return code already set     02610000
* Convert return code from EVALBLOCK module 4096.                       02620000
         LA    R3,STEVALB           Address of EVALBLOCK                02630000
         USING EVALBLOCK,R3         Make it addressable                 02640000
         L     R4,EVALBLOCK_EVLEN   Length of data                      02650000
         LA    R5,EVALBLOCK_EVDATA  Addr of data                        02660000
         DROP  R3                                                       02670000
         CLI   0(R5),C'-'           Result negative?                    02680000
         BNE   ZONESET              ...No, positive                     02690000
         BCTR  R4,0                 Decrement length                    02700000
         LA    R3,0(R4,R5)          Now at last byte                    02710000
         NI    0(R3),X'0F'          Preserve low nibble                 02720000
         OI    0(R3),X'D0'          Set zone to minus                   02730000
         LA    R5,1(,R5)            Skip leading minus                  02740000
ZONESET  DS   0H                                                        02750000
         BCTR  R4,0                 Decrement for EX                    02760000
         EX    R4,PACKIT            Now in packed format                02770000
         CVB   R15,STCONV           Now binary value                    02780000
         SLL   R15,20               Throw away high order bits          02790000
         SRL   R15,20               Keep only value modulo 4096         02800000
         ST    R15,STSSR15          Keep return code                    02810000
* Return code is now set, relinquish control of ARXEXEC.                02820000
NOCONV   DS   0H                                                        02830000
         CDDELETE ARXEXEC           Relinquish control                  02840000
                                                            SPACE 1     02850000
*******************************************************************     02860000
* Give back storage gotten, do not care if not successful.              02870000
*******************************************************************     02880000
                                                            SPACE 1     02890000
DONE     DS   0H                                                        02900000
         L     R14,STSSR14          Get return address                  02910000
         L     R4,STSSR15           Get return code                     02920000
         L     R0,STSTLEN           Size of storage gotten              02930000
         DROP  R13                  Storage no longer available         02940000
         LR    R1,R13               Copy my storage address             02950000
         FREEVIS ADDRESS=(1),LENGTH=(0)                                 02960000
                                                            SPACE 1     02970000
*******************************************************************     02980000
* Set registers 15 from register 4, return to caller.                   02990000
*******************************************************************     03000000
                                                            SPACE 1     03010000
ALLDONE  DS   0H                                                        03020000
         DROP  R12                  No longer base                      03030000
         LR    R15,R4               Get return code                     03040000
         BR    R14                  Return to caller                    03050000
         EJECT                                                          03060000
*******************************************************************     03070000
* Required constants and DSECTS                                         03080000
*******************************************************************     03090000
                                                            SPACE 1     03100000
PACKIT   PACK  STCONV-STSTORAG(L'STCONV,R13),0(*-*,R5)                  03110000
*                                                                       03120000
AOBJECT  DC    V(EAGOBJ)            Address of compiled program         03130000
*                                                                       03140000
NIL      DC    XL4'00000000'        NIL                                 03150000
INVOTYPE DC    XL4'90000000'        Command, extended return code       03160000
LASTARG  DC    XL4'80000000'        Last argument                       03170000
SERROR   DC    F'4095'              Indicate error                      03180000
FENCE    DC    XL8'FFFFFFFFFFFFFFFF' Fence                              03190000
ARXEXEC  DC    CL8'ARXEXEC'         Name of program to invoke           03200000
*                                                                       03210000
STSTORAG DSECT                                                          03220000
STSAVE   DS    18F                  Save area                           03230000
STSTLEN  DS    F                    Length of storage in bytes          03240000
STSSR14  DS    F                    Saved return register               03250000
STSSR15  DS    F                    Kept R15 for return                 03260000
STPLIST  DS    8A                   PLIST for ARXEXEC invocation        03270000
STAARGV  DS    A                    Addr of argument vector             03280000
STAINST  DS    A                    Addr of in-storage block            03290000
STAEVAL  DS    A                    Addr of EVALBLOK                    03300000
         DS   0D                                                        03310000
STCONV   DS    D                    DW for conversion of rc             03320000
         DS   0D                                                        03330000
STINSTB  DS    CL(LINSTB)           In-storage block                    03340000
STINSTE  DS    CL(LINSTE)           In-storage block entry              03350000
         DS   0D                                                        03360000
STEVALB  DS    CL(LEVALB)           EVALBLOCK                           03370000
         DS   0D                                                        03380000
STARGV   DS    2D                   Argument vector                     03390000
STSTORAL EQU   *-STSTORAG           Length of DSECT                     03400000
                                                            SPACE 1     03410000
EAGSTUB  CSECT                                                          03420000
         ARXINSTB DECLARE=YES       In-Storage Block                    03430000
EAGSTUB  CSECT                                                          03440000
         ARXEVALB DECLARE=NO        EVALBLOK                            03450000
EAGSTUB  CSECT                                                          03460000
         EJECT                                                          03470000
*******************************************************************     03480000
* Find length of various DSECTs, register equates                       03490000
*******************************************************************     03500000
                                                            SPACE 1     03510000
INSTBLK  DSECT ,                                                        03520000
         ORG                                                            03530000
LINSTB   EQU   *-INSTBLK            In-storage block length             03540000
                                                            SPACE 1     03550000
INSTBLK_ENTRY DSECT ,                                                   03560000
         ORG                                                            03570000
LINSTE   EQU   *-INSTBLK_ENTRY      In-storage block entry length       03580000
                                                            SPACE 1     03590000
EVALBLOCK DSECT ,                                                       03600000
         ORG                                                            03610000
LEVALB   EQU   *-EVALBLOCK+11       EVALBLOCK required length           03620000
                                                            SPACE 1     03630000
R0       EQU   0                                                        03640000
R1       EQU   1                                                        03650000
R2       EQU   2                                                        03660000
R3       EQU   3                                                        03670000
R4       EQU   4                                                        03680000
R5       EQU   5                                                        03690000
R6       EQU   6                                                        03700000
R7       EQU   7                                                        03710000
R8       EQU   8                                                        03720000
R9       EQU   9                                                        03730000
R10      EQU   10                                                       03740000
R11      EQU   11                                                       03750000
R12      EQU   12                                                       03760000
R13      EQU   13                                                       03770000
R14      EQU   14                                                       03780000
R15      EQU   15                                                       03790000
                                                            SPACE 1     03800000
EAGSTUB  CSECT                                                          03810000
         DS   0D                    Compiled prog starts here           03820000
EAGSTBL  EQU   *-EAGSTUB            Length of stub                      03830000
         END                                                            03840000
