*        %GOTO MSGFPRO  ;         /* Bilingual header                   00050000
         MACRO                                                          00100000
         BPXYMSGF  &DSECT=YES,&LIST=YES                       8@D1A     00150000
         GBLB  &MSGF411                                                 00200000
         AIF   (&MSGF411 EQ 1).E411                                     00250000
&MSGF411 SETB  1                                                        00300000
         AIF   ('&LIST' EQ 'YES').A411                                  00350000
         PUSH  PRINT  BPXYMSGF: MSG flag constants specified            00400000
         PRINT OFF              on open system call                     00450000
         AGO   .A411                                                    00500000
*                                  */                                   00550000
*%MSGFPRO : ;                                                           00600000
*/****START OF SPECIFICATIONS****************************************** 00650000
*                                                                       00700000
*    $MAC (BPXYMSGF) COMP(SCPX1) PROD(BPX):                             00750000
*                                                                       00800000
*01* MACRO NAME: BPXYMSGF                                               00850000
*                                                                       00900000
*01* DSECT NAME: MSG_FLAGS                                              00950000
*                                                                       01000000
*01* DESCRIPTIVE NAME: Message flag constants specified                 01050000
*                      on send, recv, sendTo and recvfrom calls.        01100000
*                                                                       01150000
*02*   ACRONYM: MSGF                                                    01200000
**/                                                                     01250000
*/*01* PROPRIETARY STATEMENT=                                        */ 01300000
*/***PROPRIETARY_STATEMENT********************************************/ 01350000
*/*                                                                  */ 01400000
*/*                                                                  */ 01450000
*/* LICENSED MATERIALS - PROPERTY OF IBM                             */ 01500000
*/* THIS MACRO IS "RESTRICTED MATERIALS OF IBM"                      */ 01550000
*/* 5647-A01 (C) COPYRIGHT IBM CORP. 1993, 1998                      */ 01600000
*/*                                                                  */ 01700000
*/* STATUS= HBB6606                                                  */ 01750000
*/*                                                                  */ 01800000
*/***END_OF_PROPRIETARY_STATEMENT*************************************/ 01850000
*/*                                                                     01900000
*01* EXTERNAL CLASSIFICATION:  GUPI                                     01912500
*01* END OF EXTERNAL CLASSIFICATION:                                    01925000
*                                                                       01937500
*01* FUNCTION:                                                          01950000
*                                                                       02000000
*      The MSGF defines the Message flags used on the send, recv,       02050000
*      sendTo and recvfrom socket system calls.                         02100000
*                                                                       02150000
*01* METHOD OF ACCESS:                                                  02200000
*                                                                       02250000
*02*   PL/X:                                                            02300000
*                                                                       02350000
*        %INCLUDE SYSLIB(BPXYMSGF)                                      02400000
*        By default, the MSGF is based on MSGFlagsPtr. If               02450000
*        other basing is desired, use %MSGFBASE='BASED(XXXXXX)'.        02500000
*        If %MSGFBASE='BASED(MSGFlagsPtr)' is coded, a Declare for      02550000
*        MSGFlagsPtr also generated.                                    02600000
*                                                                       02650000
*02*   ASM:                                                             02700000
*        With DSECT=NO, storage is allocated in line                    02750000
*        and addressability is provided thru that DSECT or CSECT.       02800000
*        With DSECT=YES, a DSECT is produced and "USING MSG_FLAGS,reg"  02850000
*        is required for addressability.  Here "reg" contains the       02900000
*        address of MSGF#LENGTH bytes of storage.                       02950000
*        The default is DSECT=YES.                                      03000000
*                                                                       03050000
*01* SIZE: MSGF#LENGTH = 4 bytes                                        03100000
*                                                                       03150000
*01* POINTED TO BY: MSGFlagsPtr                                         03200000
*                                                                       03250000
*01* CREATED BY: Caller of system call                                  03300000
*                                                                       03350000
*01* DELETED BY: Caller of system call                                  03400000
*                                                                       03450000
*01* STORAGE ATTRIBUTES:                                                03500000
*02*   SUBPOOL/DATASPACE:  N/A                                          03550000
*02*   KEY:                N/A                                          03600000
*02*   RESIDENCY:          N/A                                          03650000
*                                                                       03700000
*01* FREQUENCY: Included with compile                                   03750000
*                                                                       03800000
*01* SERIALIZATION: N/A                                                 03850000
*                                                                       03900000
*01* DEPENDENCIES: None                                                 03950000
*                                                                       04000000
*01* NOTES: None                                                        04050000
*                                                                       04100000
*01* COMPONENT: OpenMVS (SCPX1)                                         04150000
*                                                                       04200000
*01* DISTRIBUTION LIBRARY:  AMACLIB                                     04250000
*                                                                       04300000
*01* EYE-CATCHER: None                                                  04350000
*                                                                       04400000
*01* CHANGE-ACTIVITY:                                                   04450000
*                                                                       04500000
* $D1=DOAA002  HOM1111 930505 PDNE: Integrated Sockets support          04550000
*                                       Dcr A002.02                     04600000
* $D2=DRGA134  HOM1140 950607 PDSK: UU Compliance (A134.02)             04625000
* $D3=DSPA158  HOM1150 950821 PDJI: AF-ESCON support (A158.00)          04637500
* $P1=PVT0656  HBB6606 980326 PDJT: MSG_EOF                             04643700
*                                                                       04650000
****END OF SPECIFICATIONS*********************************************/ 04700000
*        %GOTO MSGFPLS  ;         /* Bilingual header                   04750000
.A411    ANOP  ,                                                        04800000
** BPXYMSGF: Socket access flags                                        04850000
**  Used By: FCT OPN                                                    04900000
         AIF   ('&DSECT' EQ 'NO').B411                                  04950000
MSG_FLAGS            DSECT ,                                            05000000
         AGO   .C411                                                    05050000
.B411    ANOP  ,                                                        05100000
MSG_FLAGS            DS    0F                                           05150000
.C411    ANOP  ,                                                        05200000
MSG_FLAGS1           DS    B      I_flags - byte 1                      05250000
MSGFHIGH             EQU   X'80'  DO NOT USE THIS BIT!                  05300000
*                                 MSG_FLAGS must never be < 0           05350000
MSG_ACK_GEN          EQU   X'40'  Generate a UDP 'ACK packet'           05352500
*                                 automatically to the originator       05355000
*                                 if an incoming UDP packet arrives     05357500
*                                                                 @D3A  05360000
MSG_ACK_TIMEOUT      EQU   X'20'  The caller expects an incoming UDP    05362500
*                                 packet within the "standard ACK       05365000
*                                 time interval".  Return to caller     05367500
*                                 with an EINTR return code if no       05370000
*                                 incoming UDP packet arrives           05372500
*                                 within this time interval.      @D3A  05375000
MSG_ACK_EXPECTED     EQU   X'10'  (Used along with MSG_ACK_TIMEOUT)     05377500
*                                 The incoming packet is expected to    05380000
*                                 be an ACK. If the ACK arrives,        05382500
*                                 the caller does not need to be        05385000
*                                 activated to process it.              05387500
*                                 Instead, the protocol will just       05390000
*                                 cancel the timeout and let the        05392500
*                                 application wait for the real data    05395000
*                                 to arrive.                      @D3A  05397500
                     SPACE ,                                            05400000
MSG_FLAGS2           DS    B      MSG_flags - byte 2                    05450000
*                                                                       05500000
                     SPACE ,                                            05550000
MSG_FLAGS3           DS    B      MSG_flags - byte 3                    05600000
MSG_EOF              EQU   X'80'  Close after send                @P1A  05625000
                     SPACE ,                                            05650000
MSG_FLAGS4           DS    B      MSG_flags - byte 4                    05700000
MSG_WAITALL          EQU   X'40'  Wait until all data returned    @D2A  05710000
MSG_CTRUNC           EQU   X'20'  Control data truncated          @D2A  05720000
MSG_TRUNC            EQU   X'10'  Normal data truncated           @D2A  05730000
MSG_EOR              EQU   X'08'  Terminate a record              @D2A  05740000
MSG_DONTROUTE        EQU   X'04'  Send without network routing          05750000
MSG_PEEK             EQU   X'02'  Peek at incoming data                 05800000
MSG_OOB              EQU   X'01'  Receive out of band data              05850000
                     SPACE ,                                            05900000
MSG#LENGTH          EQU   *-MSG_FLAGS Length of this structure          05950000
** BPXYMSGF End                                                         06000000
         SPACE 3                                                        06050000
         AIF   ('&LIST' EQ 'YES').E411                        6@D1A     06100000
         POP   PRINT                                                    06150000
.E411    ANOP  ,                                                        06200000
         MEND                                                           06250000
  Terminating PL/X comment                                          */  06300000
 %MSGFPLS : ;                                                           06350000
 %IF MSGFBASE='' %THEN                                                  06400000
   %DO;                                                                 06450000
     %MSGFBASE='BASED(MSGFLAGSPTR)';                                    06500000
   %END;                                                                06550000
  %IF TRANSLATE(MSGFBASE)='BASED(MSGFLAGSPTR)' %THEN                    06600000
    %DO;                                                                06650000
      DCL MSGFLAGSPTR Ptr(31);    /* Pointer to the MSG_FLAGS       */  06700000
    %END;                                                               06750000
                                                                        06800000
 DCL 1 MSG_FLAGS Bit(32) MSGFBASE,                                      06850000
  3 MSG_FLAGS1    Bit(8),                                               06900000
    5 MSGFHIGH     Bit(1),         /* DO NOT USE THIS BIT!           */ 06950000
                                   /* MSG_FLAGS must never be < 0    */ 07000000
    5 MSG_ACK_GEN  Bit(1),         /* Generate a UDP 'ACK packet'       07004300
                                      automatically to the originator   07008600
                                      if an incoming UDP packet         07012900
                                      arrives                    @D3A*/ 07017200
    5 MSG_ACK_TIMEOUT Bit(1),      /* The caller expects an incoming    07021500
                                      UDP packet within the "standard   07025800
                                      ACK time interval".  Return to    07030100
                                      caller with an EINTR return       07034400
                                      code if no if no incoming UDP     07038700
                                      packet arrives within this time   07043000
                                      interval.                  @D3A*/ 07047300
    5 MSG_ACK_EXPECTED Bit(1),     /* (Used along with MSG_ACK_TIMEOUT) 07051600
                                      The incoming packet is            07055900
                                      expected to be an ACK. If the     07060200
                                      ACK arrives, the caller does      07064500
                                      not need to be activated to       07068800
                                      process it.  Instead, the         07073100
                                      protocol will just cancel the     07077400
                                      timeout and let the               07081700
                                      application wait for the real     07086000
                                      data to arrive.            @D3A*/ 07090300
    5 *            Bit(4),         /* Reserved                   @D3C*/ 07094600
                                                                        07100000
  3 MSG_FLAGS2    Bit(8),                                               07150000
    5 *            Bit(8),         /* Reserved                       */ 07200000
                                                                        07250000
  3 MSG_FLAGS3    Bit(8),                                               07300000
    5 MSG_EOF      Bit(1),         /* Close after send           @P1A*/ 07333300
    5 *            Bit(7),         /* Reserved                       */ 07366600
                                                                        07400000
  3 MSG_FLAGS4    Bit(8),                                               07450000
    5 *            Bit(1),         /* Reserved                       */ 07466600
    5 MSG_WAITALL    Bit(1),       /* Wait til all data returned @D2A*/ 07483200
    5 MSG_CTRUNC     Bit(1),       /* Control data truncated     @D2A*/ 07499800
    5 MSG_TRUNC      Bit(1),       /* Normal data truncated      @D2A*/ 07516400
    5 MSG_EOR        Bit(1),       /* Terminate a record         @D2A*/ 07533000
    5 MSG_DONTROUTE  Bit(1),       /* Send without network routing   */ 07550000
    5 MSG_PEEK       Bit(1),       /* Peek at incoming data          */ 07600000
    5 MSG_OOB        Bit(1);       /* Receive out of band data       */ 07650000
                                                                        07700000
