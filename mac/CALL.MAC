        MACRO
.*********************************************************************
.* Copyright 2005 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 09/30/05                                                 *
.*********************************************************************
.* 10/20/05 RPI  27 - issue error for any undefined operands     
.* 10/21/05 RPI  41 - add VL positional parm support
.* 12/12/05 RPI  18 - correct VL bit OI instrcution (missing .)
.* 01/09/06 RPI 163 - SKIP LR FOR SAME REGISTER
.* 04/12/06 RPI 244 - IGNORE NON CRITICAL KW PARMS
.* 04/12/06 RPI 322 - support VL option with MF=L 
.* 07/22/06 RPI 381 - support register substitution of parametrs 
.* 11/10/06 RPI 473 - correct macro bugs and update RT\TEST\TESTCAL1
.* 06/14/07 RPI 641 DEFAULT MF=I
.*********************************************************************
&N      CALL   &NAME,                                                  X
               &PARMS,                                                 X
               &VL,            SET END OF LIST HIGH BIT                X                 X
               &ID=,           IGNORE                                  X
               &LINKINST=BALR,                                         X
               &MF=I           I/L/E FORMS SUPPORTED
         CNOP  0,4
         AIF   (&N EQ '').SKIPDS
&N       DS    0F
.SKIPDS  ANOP
         AIF   (N'&SYSLIST GT 3).ERR1
.NPOK    ANOP
&NPARMS  SETA   N'&PARMS
         AIF    (&NPARMS EQ 0 AND &VL NE '').ERR3 RPI 473
         AIF   (&MF EQ 'I').STD
         AIF   (&MF EQ 'L').LIST
         AIF   (&MF(1) EQ 'E').EXEC
         MNOTE 12,'CALL INVALID MF=&MF'
         MEXIT
.STD     ANOP
         AIF    (&NPARMS EQ 0).ENDPARM
         BAL    1,*+4+&NPARMS*4
         DC     A&PARMS
&I       SETA   0
.REGLOOP ANOP
&I       SETA   &I+1
         AIF    (&I GT &NPARMS).REGEND
         AIF    ('&PARMS(&I)'(1,1) NE '(').REGLOOP
&OFF     SETA   &I*4-4
         ST     &PARMS(&I),&OFF.(1)
         AGO    .REGLOOP
.REGEND  ANOP       
         AIF    (&VL NE 'VL').SKIPVL1 
&OFF     SETA   N'&PARMS*4-4
         OI     &OFF.(1),X'80'
.SKIPVL1 ANOP
.ENDPARM ANOP
         AIF   (&NAME EQ '').BALR
         AIF    ('&NAME'(1,1) EQ '(').REG
         L      15,=V(&NAME)
         AGO    .BALR
.REG     ANOP
         AIF    (&NAME(1) EQ '15' OR &NAME(1) EQ 'R15').BALR  RPI163
         LR     15,&NAME(1)
.BALR    ANOP
         &LINKINST 14,15
         MEXIT
.LIST    ANOP
         AIF    (&VL EQ 'VL').VLLIST    
         DC    A&PARMS
         MEXIT       
.VLLIST  ANOP
&I       SETA  0
.VLLOOP  ANOP
&I       SETA  &I+1
         AIF   (&I GE &NPARMS).VLLAST
         DC    A(&PARMS(&I))
         AGO   .VLLOOP
.VLLAST  ANOP
         DC    A(&PARMS(&I)+X'80000000')
         MEXIT
.EXEC    ANOP   RPI 473
         AIF    ('&MF(2)' EQ '').ERR2    RPI 473
         AIF    ('&MF(2)' EQ '(').REGPARM
         LA     1,&MF(2)
         AGO    .EXEC2
.REGPARM ANOP
         AIF    (&MF(2,1) EQ 1 OR &MF(2,1) EQ 'R1').EXEC2
         LR     1,&MF(2,1)
.EXEC2   ANOP
&NPARMS  SETA   N'&PARMS
         AIF    (&NPARMS EQ 0).ENDPARM
&EXOFF   SETA   0
&I       SETA   0
.EXLOOP  ANOP
&I       SETA   &I+1
         AIF    (&I GT &NPARMS).EXLEND
&EXPARM  SETC   &PARMS(&I)     
         AIF    ('&EXPARM'(1,1) EQ '(').EXREGP
         LA     0,&EXPARM
         ST     0,&EXOFF.(1)
         AGO    .EXNEXTP
.EXREGP  ANOP
         ST     &EXPARM,&EXOFF.(1)   RPI 473
.EXNEXTP ANOP
&EXOFF   SETA   &EXOFF+4
         AGO    .EXLOOP
.EXLEND  ANOP    
         AIF    (&VL NE 'VL' OR &EXOFF EQ 0).ENDPARM RPI 473
         OI     &EXOFF-4(1),X'80'
         AGO    .ENDPARM  RPI 473
.ERR1    MNOTE 12,'CALL UNSUPPORTED OPERANDS - &SYSLIST(4)'
         MEXIT
.ERR2    MNOTE 12,'CALL EXEC FORM MISSING LIST ADDR'
         MEXIT
.ERR3    MNOTE 12,'CALL VL INVALID WHEN NO PARMS'     
         MEXIT
         MEND
