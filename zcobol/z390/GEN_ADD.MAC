         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 10/30/08 initial coding for Z390 GEN_ADD using GEN_SUB as model    
.* 01/26/09 add TRUNC support for F,G,H - see zcobol\test\TESTTRC1.CBL            
.* 01/27/09 add ON SIZE and optimize TRUNC for pipeline and use LGFI                      
.* 02/25/09 RPI 1004 add support for types 1,2,E,D,L &ZC_FLOAT type    
.* 02/26/09 RPI 1012 move onsize end-add pending to add                
.* 04/28/09 RPI 1003 add support for temp vars with neg IX
.*********************************************************************
.* Notes:
.*  1.  ROUNDED not supported yet.
.*********************************************************************
         GEN_ADD &T_NAME,&T_IX,&S_NAME,&S_IX,&ROUNDED,&ONSIZE
         COPY  ZC_WS
         AIF (&T_IX GT 0)
             :&N_TARGET SETC '&T_NAME'
             :&L_TARGET SETA  &SYM_LEN(&T_IX)
             :&S_TARGET SETB  &SYM_PIC_SIGN(&T_IX)
             :&T_TARGET SETC '&SYM_PIC_TYPE(&T_IX)'
             :&P_TARGET SETC '&SYM_PIC(&T_IX)'
             AIF ('&T_TARGET' NE 'P')
                 :&LAB SETC '&N_TARGET'
                 ACALL RESET_LAB_LEN
                 :&N_TARGET SETC '&LAB'
             AEND
         AELSEIF (&T_IX LT 0)
             :&N_TARGET SETC '&TMP_NAME(-&T_IX)'
             :&L_TARGET SETA  &TMP_LEN(-&T_IX)
             :&S_TARGET SETB  &TMP_SIGN(-&T_IX)
             :&T_TARGET SETC '&TMP_TYPE(-&T_IX)'
             :&P_TARGET SETC ''
             AIF ('&T_TARGET' EQ 'P')
                 :&N_TARGET SETC '&N_TARGET.(&L_TARGET)'
             AEND
         AELSE
            MNOTE 8,'GEN_ADD MISSING TARGET INDEX FOR &T_NAME'
            MEXIT
         AEND
         :&N_SOURCE SETC '&S_NAME'
         AIF (&S_IX GT 0)
             :&L_SOURCE SETA  &SYM_LEN(&S_IX)
             :&S_SOURCE SETB  &SYM_PIC_SIGN(&S_IX)
             :&T_SOURCE SETC '&SYM_PIC_TYPE(&S_IX)'
         AELSEIF (&S_IX LT 0)
             :&N_SOURCE SETC '&TMP_NAME(-&S_IX)'
             :&L_SOURCE SETA  &TMP_LEN(-&S_IX)
             :&S_SOURCE SETB  &TMP_SIGN(-&S_IX)
             :&T_SOURCE SETC '&TMP_TYPE(-&S_IX)'
             AIF ('&T_SOURCE' EQ 'P')
                 :&N_SOURCE SETC '&N_SOURCE.(&L_SOURCE)'
             AEND
         AEND
         AIF   (&ROUNDED EQ 1)
               MNOTE 8,'GEN_ADD ROUNDED NOT SUPPORTED YET'
               MEXIT
         AEND
         AIF   (&S_IX NE 0)
               ACALL ADD_FLD
         AELSE
               :&LIT SETC '&N_SOURCE'
               ACALL ADD_LIT
         AEND
         MEXIT
.*
.* ADD LITERAL
.* 
         AENTRY ADD_LIT
         AIF  ('&LIT'(1,1) GE '0'                                      X
                OR '&LIT'(1,1) EQ '+'                                  X
                OR '&LIT'(1,1) EQ '-')  RPI 1002 WAS GT '0' IN ERROR
               :&NUM SETC '&LIT'
               ACALL ADD_NUM_LIT
         AELSEIF  ('&LIT' EQ 'ZERO'                                    X
                   OR '&LIT' EQ 'ZEROES')                          
               :&NUM SETC '0'
               ACALL ADD_NUM_LIT
         AELSE
               MNOTE 8,'GEN_ADD UNKNOWN LITERAL &LIT'
               MEXIT
         AEND
         AEND
.*
.* ADD NUMERIC LIT 
.*
      AENTRY ADD_NUM_LIT
      ACASE (C2A('&T_TARGET'))
      AWHEN C'1' EH
         LE    F0,&N_TARGET
         LARL  R14,=E'&NUM'
         AE    F0,0(R14)
         STE   F0,&N_TARGET
      AWHEN C'2' DH
         LD    F0,&N_TARGET
         LARL  R14,=D'&NUM'
         AD    F0,0(R14)
         STD   F0,&N_TARGET
      AWHEN C'3' LH
         LD    F0,&N_TARGET
         LD    F2,8+&N_TARGET
         LARL  R14,=LH'&NUM'
         LD    F1,0(R14)        
         LD    F3,8(R14)          
         AXR   F0,F1     
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
      AWHEN C'4' EB
         LE    F0,&N_TARGET
         LARL  R14,=EB'&NUM'
         AEB   F0,0(R14)
         STE   F0,&N_TARGET
      AWHEN C'5' DB
         LD    F0,&N_TARGET
         LARL  R14,=DB'&NUM'
         ADB   F0,0(R14)
         STD   F0,&N_TARGET
      AWHEN C'6' LB
         LD    F0,&N_TARGET
         LD    F2,8+&N_TARGET
         LARL  R14,=LB'&NUM'
         LD    F1,0(R14)        
         LD    F3,8(R14)          
         AXBR  F0,F1     
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
      AWHEN C'7' ED
         LE    F0,&N_TARGET
         LDETR F0,F0,0
         LARL  R14,=DD'&NUM'
         LD    F1,0(R14)
         ADTR  F0,F0,F1
         LEDTR F0,0,F0,0
         STE   F0,&N_TARGET
      AWHEN C'8' DD
         LD    F0,&N_TARGET
         LARL  R14,=DD'&NUM'
         LD    F1,0(R14)
         ADTR  F0,F0,F1
         STD   F0,&N_TARGET
      AWHEN C'9' LD
         LD    F0,&N_TARGET
         LD    F2,8+&N_TARGET
         LARL  R14,=LD'&NUM'
         LD    F1,0(R14)        
         LD    F3,8(R14)          
         AXTR  F0,F0,F1     
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
.*
.* ADD_NUM_LIT F A I
.*
      AWHEN C'F',C'A',C'I'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         SR    R0,R0
         L     R1,&N_TARGET
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETA ('1'.(&PIC_DIGITS)'0')
         LARL  R14,=F'&TRUNC_DIV'
         AFI   R1,&NUM
        AIF   (&ONSIZE EQ 1)
              :&STX SETC 'ST'
               ACALL SET_ON_SIZE_F32
        AELSE  
         D     R0,0(R14)
         ST    R0,&N_TARGET
        AEND 
       AELSE
        AIF (K'&NUM LE 2)
         ASI   &N_TARGET,&NUM
        AELSE
         L     R0,&N_TARGET
         AFI   R0,&NUM
         ST    R0,&N_TARGET
        AEND
       AEND
.*
.* ADD_NUM_LIT G
.*
      AWHEN C'G'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETC '1'.(&PIC_DIGITS)'0'
        AIF (&ZC_R64)
         LG    R1,&N_TARGET
         LGRL  R0,=FL8'&TRUNC_DIV'
         AGFI  R1,&NUM
          AIF  (&ONSIZE EQ 1)
               :&STX SETC 'STG'
               ACALL SET_ON_SIZE_G64
          AELSE  
         DSGR  R0,R0
         STG   R0,&N_TARGET
          AEND
        AELSE
         LM    R0,R1,&N_TARGET
         LARL  R14,=FL8'&NUM'
         A     R1,4(R14)
         ALC   R0,0(R14)
         LARL  R14,=FL8'&TRUNC_DIV'
         LM    R2,R3,0(R14)
          AIF  (&ONSIZE EQ 1)
         L     R15,ZCVT_OSE64R32
         BASR  R14,R15
               ACALL SET_ON_SIZE_G64_R32
          AELSE
         L     R15,ZCVT_DIV64R32
         BASR  R14,R15
         STM   R0,R1,&N_TARGET
          AEND
        AEND  
       AELSE
        AIF (K'&NUM LE 2)
         AGSI  &N_TARGET,&NUM
        AELSE
          AIF  (&ZC_R64)
         LG    R0,&N_TARGET
         LARL  R14,=FL8'&NUM'
         AG    R0,0(R14)
         STG   R0,&N_TARGET
          AELSE
         LM    R0,R1,&N_TARGET
         LARL  R14,=FL8'&NUM'
         A     R1,4(R14)
         ALC   R0,0(R14)
         STM   R0,R1,&N_TARGET
          AEND
        AEND
       AEND
.*
.* ADD_NUM_LIT H
.*
      AWHEN C'H'
       AIF (&ONSIZE EQ 1 OR (&ZC_TRUNC AND '&P_TARGET' NE ''))
         SR    R0,R0
         LH    R1,&N_TARGET
         ZC_PIC_DIGITS &T_IX
         :&TRUNC_DIV SETA ('1'.(&PIC_DIGITS)'0')
         LARL  R14,=F'&TRUNC_DIV'
         AFI   R1,&NUM
        AIF   (&ONSIZE EQ 1)
              :&STX SETC 'STH'
               ACALL SET_ON_SIZE_F32
        AELSE  
         D     R0,0(R14)
         STH   R0,&N_TARGET
        AEND 
       AELSE
         LH    R0,&N_TARGET
         AHI   R0,&NUM
         STH   R0,&N_TARGET
       AEND
.*
.* ADD_NUM_LIT P
.*
      AWHEN C'P'
         :&LPNUM SETA (K'&NUM/2+3)/2*2 ROUNDED EVEN FOR LARL
        AIF (&LPNUM EQ 2)
         BRAS  R14,3 SET R1 TO A(INLINE LIT) AND SKIP OVER IT
         DC    PL2'&NUM'
        AELSE
         AIF (&LPNUM GT 16)
             :&LPNUM SETA 16
         AEND
         LARL  R14,=PL&LPNUM'&NUM'
        AEND
         AP    &N_TARGET,0(&LPNUM,R14)
.*
.* ADD_NUM_LIT Q
.*
      AWHEN C'Q'
         LMG  R0,R1,&N_TARGET
         LARL R14,=FL16'&NUM'
         ALG  R1,8(R14)
         ALCG R0,0(R14)
         STMG R0,R1,&N_TARGET
.*
.* ADD_NUM_LIT Z
.*
      AWHEN C'Z'
         :&PLEN SETA &L_TARGET/2+1
         ZC_PACK31  ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         :&LPNUM SETA (K'&NUM/2+3)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LPNUM GT 16)
             :&LPNUM SETA 16
         AEND
         LARL  R14,=PL&LPNUM'&NUM'
         AP    ZCVT_PWORK1(&PLEN),0(&LPNUM,R14)
         :&ST SETB &S_TARGET
         ZC_UNPK31  &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
      AELSE
         MNOTE 8,'GEN_ADD INVALID DATA TYPE FOR &N_TARGET'
      AEND
      AEND
.*
.* ADD_FLD
.*
         AENTRY ADD_FLD
         ACASE (C2A('&T_TARGET'))
.*
.*  ADD_FLD ?? TO EH 
.*
         AWHEN C'1'                     ADD ?? TO EH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO EH
         LE    F0,&N_SOURCE
               AWHEN C'2'               ADD DH TO EH
         ZC_CONV EH,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO EH
         ZC_CONV EH,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO EH
         ZC_CONV EH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO EH
         ZC_CONV EH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO EH
         ZC_CONV EH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO EH
         ZC_CONV EH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO EH
         ZC_CONV EH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO EH
         ZC_CONV EH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CEFR  F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CEGR  F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CEFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV EH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV EH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV EH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '         
                    MEXIT
               AEND 
         AE    F0,&N_TARGET
         STE   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO DH
.*
         AWHEN C'2'
         LD    F1,&N_TARGET
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DH
         LE    F0,&N_SOURCE
         LDER  F0,F0
               AWHEN C'2'               ADD DH TO DH
         LD    F0,&N_SOURCE
               AWHEN C'3'               ADD LH TO DH
         LD    F0,&N_TARGET
         LD    F2,8+&N_TARGET
         LDXR  F0,F0
               AWHEN C'4'               ADD EB TO DH
         ZC_CONV DH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DH
         ZC_CONV DH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DH
         ZC_CONV DH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DH
         ZC_CONV DH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DH
         ZC_CONV DH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DH
         ZC_CONV DH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CDFR  F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CDGR  F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CDFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV DH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         ADR   F0,F1
         STD   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO LH
.*
         AWHEN C'3'
         LD    F1,&N_TARGET
         LD    F3,8+&N_TARGET
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LH
         LE    F0,&N_SOURCE
         LXER  F0,F0
               AWHEN C'2'               ADD DH TO LH
         LD    F0,&N_SOURCE
         LXDR  F0,F0
               AWHEN C'3'               ADD LH TO LH
         LD    F0,&N_SOURCE
         LD    F2,8+&N_SOURCE
               AWHEN C'4'               ADD EB TO LH
         ZC_CONV LH,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LH
         ZC_CONV LH,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LH
         ZC_CONV LH,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LH
         ZC_CONV LH,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LH
         ZC_CONV LH,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LH
         ZC_CONV LH,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CXFR  F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CXGR  F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CXFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV LH,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV LH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         AXR   F0,F1
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
.*
.*  ADD_FLD ?? TO EB 
.*
         AWHEN C'4'                     ADD ?? TO EB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO EB
         ZC_CONV EB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO EB
         ZC_CONV EB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO EB
         ZC_CONV EB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO EB
         ZC_CONV EB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO EB
         ZC_CONV EB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO EB
         ZC_CONV EB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO EB
         ZC_CONV EB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO EB
         ZC_CONV EB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO EB
         ZC_CONV EB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CEFBR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CEGBR F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CEFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV EB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV EB,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV EB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         AEB   F0,&N_TARGET
         STE   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO DB
.*
         AWHEN C'5'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DB
         ZC_CONV DB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DB
         ZC_CONV DB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DB
         ZC_CONV DB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DB
         ZC_CONV DB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DB
         ZC_CONV DB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DB
         ZC_CONV DB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DB
         ZC_CONV DB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DB
         ZC_CONV DB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DB
         ZC_CONV DB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CDFBR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CDGBR F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CDFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV DB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DB,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         ADB   F0,&N_TARGET
         STD   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO LB
.*
         AWHEN C'6'
         LD    F1,&N_TARGET
         LD    F3,8+&N_TARGET
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LB
         ZC_CONV LB,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO LB
         ZC_CONV LB,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO LB
         ZC_CONV LB,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO LB  
         ZC_CONV LB,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LB
         ZC_CONV LB,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LB
         ZC_CONV LB,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LB
         ZC_CONV LB,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LB
         ZC_CONV LB,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LB
         ZC_CONV LB,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CXFBR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CXGBR F0,R0
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CXFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV LB,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV LH,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         AXBR  F0,F1
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
.*
.*  ADD_FLD ?? TO ED (FIRST TO DD, THEN ADD DD, THEN CVT TO ED)
.*
         AWHEN C'7'                     ADD ?? TO ED
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DD
         ZC_CONV DD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DD
         ZC_CONV DD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DD
         ZC_CONV DD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DD
         ZC_CONV DD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DD
         ZC_CONV DD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DD
         ZC_CONV DD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DD
         ZC_CONV DD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DD
         ZC_CONV DD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DD
         ZC_CONV DD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV DD,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         LE    F1,&N_TARGET
         LDETR F1,F1,0
         ADTR  f0,F0,F1
         LEDTR F0,0,F0,0
         STE   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO DD
.*
         AWHEN C'8'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DD
         ZC_CONV DD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO DD
         ZC_CONV DD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO DD
         ZC_CONV DD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO DD
         ZC_CONV DD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO DD
         ZC_CONV DD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO DD
         ZC_CONV DD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO DD
         ZC_CONV DD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO DD
         ZC_CONV DD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO DD
         ZC_CONV DD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV DD,LD
               AWHEN C'Q'  RPI 1004
         ZC_CONV DD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         LD    F1,&N_TARGET
         ADTR  f0,F0,F1                
         STD   F0,&N_TARGET
.*
.*  ADD_FLD ?? TO LD
.*
         AWHEN C'9'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO LD
         ZC_CONV LD,EH,&N_SOURCE
               AWHEN C'2'               ADD DH TO LD
         ZC_CONV LD,DH,&N_SOURCE
               AWHEN C'3'               ADD LH TO LD
         ZC_CONV LD,LH,&N_SOURCE
               AWHEN C'4'               ADD EB TO LD
         ZC_CONV LD,EB,&N_SOURCE
               AWHEN C'5'               ADD DB TO LD
         ZC_CONV LD,DB,&N_SOURCE
               AWHEN C'6'               ADD LB TO LD
         ZC_CONV LD,LB,&N_SOURCE
               AWHEN C'7'               ADD ED TO LD
         ZC_CONV LD,ED,&N_SOURCE
               AWHEN C'8'               ADD DD TO LD
         ZC_CONV LD,DD,&N_SOURCE
               AWHEN C'9'               ADD LB TO LD
         ZC_CONV LD,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   R0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'H'
         LGH   R0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F0,R0
               AWHEN C'Q'  RPI 1004
         ZC_CONV LD,Q,&N_SOURCE
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F0,R0
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         LD    F1,&N_TARGET
         LD    F3,8+&N_TARGET
         AXTR  F0,F0,F1
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
.*
.*  ADD_FLD ?? TO F/A/I
.*
         AWHEN C'F',C'A',C'I'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'               ADD EH TO DH
         LD    F0,&N_TARGET
         LE    F1,&N_SOURCE
         LDER  F1,F1
         ADR   F0,F1
               AWHEN C'2'               ADD DH TO DH
         LD    F0,&N_TARGET
         AD    F0,&N_SOURCE
               AWHEN C'3'               ADD LH TO DH
         LD    F1,&N_TARGET
         LD    F3,8+&N_TARGET
         LDXR  F1,F1
         ADR   F0,F1
               AWHEN C'4'               ADD EB TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,EB,&N_SOURCE
         ADR   F0,F1
               AWHEN C'5'               ADD DB TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,DB,&N_SOURCE
         ADR   F0,F1
               AWHEN C'6'               ADD LB TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,LB,&N_SOURCE
         ADR   F0,F1
               AWHEN C'7'               ADD ED TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,ED,&N_SOURCE
         ADR   F0,F1
               AWHEN C'8'               ADD DD TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,DD,&N_SOURCE
         ADR   F0,F1
               AWHEN C'9'               ADD LB TO DH
         LD    F1,&N_TARGET
         ZC_CONV DH,LD,&N_SOURCE
         ADR   F0,F1
               AWHEN C'2'
         L     R0,&N_TARGET
         LD    F1,&N_SOURCE
         CFDR  R3,0,F1
         AR    R0,R3
         ST    R0,&N_TARGET
               AWHEN C'1'
         L     R0,&N_TARGET
         LE    F1,&N_SOURCE
         CFER  R3,0,F1
         AR    R0,R3
         ST    R0,&N_TARGET
               AWHEN C'F',C'A',C'I'
         L     R0,&N_TARGET
         A     R0,&N_SOURCE
         ST    R0,&N_TARGET
               AWHEN C'G'
         L     R0,&N_TARGET
         A     R0,4+&N_SOURCE IGNORE HIGH 32 BITS
         ST    R0,&N_TARGET  
               AWHEN C'H'
         L     R0,&N_TARGET
         AH    R0,&N_SOURCE
         ST    R0,&N_TARGET
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV Q,LD
         A     R1,&N_TARGET IGNORE HIGH 96 BITS
         ST    R1,&N_TARGET
               AWHEN C'Q'
         L     R0,&N_TARGET
         A     R0,12+&N_SOURCE IGNORE HIGH 48 BITS
         ST    R0,&N_TARGET  
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV Q,LD
         A     R1,&N_TARGET IGNORE HIGH 96 BITS
         ST    R1,&N_TARGET 
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
.*
.*  ADD_FLD ?? TO G    
.*
         AWHEN C'G'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'2'
         LG    R0,&N_TARGET
         LD    F1,&N_SOURCE
         CGDR  R3,0,F1
         AGR   R0,R3
         STG   R0,&N_TARGET
               AWHEN C'1'
         LG    R0,&N_TARGET
         LE    F1,&N_SOURCE
         CGER  R3,0,F1
         AGR   R0,R3
         STG   R0,&N_TARGET
               AWHEN C'F',C'A',C'I'
         LG    R0,&N_TARGET
         AGF   R0,&N_SOURCE
         STG   R0,&N_TARGET
               AWHEN C'G'
         LG    R0,&N_TARGET
         AG    R0,&N_SOURCE
         STG   R0,&N_TARGET                          
               AWHEN C'H'
         LG    R0,&N_TARGET
         LH    R3,&N_SOURCE
         AGFR  R0,R3
         STG   R0,&N_TARGET
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV Q,LD
         AG    R1,&N_TARGET
         STG   R1,&N_TARGET
               AWHEN C'Q'
         LG    R0,&N_TARGET
         AG    R0,8+&N_SOURCE IGNORE HIGH 64 BITS
         STG   R0,&N_TARGET  
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV Q,LD
         AG    R1,&N_TARGET  IGNORE HIGH 64
         STG   R1,&N_TARGET
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
.*
.*  ADD_FLD ?? TO H    
.*
         AWHEN C'H'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'2'
         LH    R0,&N_TARGET
         LD    F3,&N_SOURCE
         CFDR  R1,0,F3
         AR    R0,R1
         STH   R0,&N_TARGET
               AWHEN C'1'
         LH    R0,&N_TARGET
         LE    F1,&N_SOURCE
         CFER  R3,0,F1
         AR    R0,R3
         STH   R0,&N_TARGET
               AWHEN C'F',C'A',C'I'
         LH    R0,&N_TARGET
         A     R0,&N_SOURCE
         STH   R0,&N_TARGET
               AWHEN C'G'
         LH    R0,&N_TARGET
         A     R0,&N_SOURCE+4 IGNORES HIGH 32
         STH   R0,&N_TARGET
               AWHEN C'H'
         LH    R0,&N_TARGET
         AH    R0,&N_SOURCE
         STH   R0,&N_TARGET
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV Q,LD
         AH    R1,&N_TARGET  IGNORE HIGH 96 BITS
         STH   R1,&N_TARGET
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                   ZC_CONV Q,LD
         AH    R1,&N_TARGET  IGNORE HIGH 96
         STH   R1,&N_TARGET  IGNORE HIGH 112
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
.*
.*  ADD_FLD ?? TO P    
.*
         AWHEN C'P'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    F0,&N_SOURCE
         CFER  R0,0,F0
         CVD   R0,ZCVT_PWORK
         AP    &N_TARGET,ZCVT_PWORK
               AWHEN C'2'
         LD    F0,&N_SOURCE
         CFDR  R0,0,F0
         CVD   R0,ZCVT_PWORK
         AP    &N_TARGET,ZCVT_PWORK
               AWHEN C'3'               ADD LH TO DH
         ZC_CONV P,LH,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'4'               ADD EB TO DH
         ZC_CONV P,EB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'5'               ADD DB TO DH
         ZC_CONV P,DB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'6'               ADD LB TO DH
         ZC_CONV P,LB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'7'               ADD ED TO DH
         ZC_CONV P,ED,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'8'               ADD DD TO DH
         ZC_CONV P,DD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'9'               ADD LB TO DH
         ZC_CONV P,LD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    &N_TARGET,ZCVT_PWORK2
               AWHEN C'F',C'A',C'I'
         L     R0,&N_SOURCE
         CVD   R0,ZCVT_PWORK
         AP    &N_TARGET,ZCVT_PWORK
               AWHEN C'G'
         LG    R0,&N_SOURCE
         CVDG  R0,ZCVT_PWORK1
         AP    &N_TARGET,ZCVT_PWORK1
               AWHEN C'H'
         LH    R0,&N_SOURCE
         CVD   R0,ZCVT_PWORK
         AP    &N_TARGET,ZCVT_PWORK
               AWHEN C'P'
         AP    &N_TARGET,&N_SOURCE
               AWHEN C'Q'
         ZC_CONV P,Q,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK1
         AP    &N_TARGET,ZCVT_PWORK1         
               AWHEN C'Z'
                   :&PLEN SETA &L_SOURCE/2+1
                   ZC_PACK31  ZCVT_PWORK1,&PLEN,&N_SOURCE,&L_SOURCE
         AP    &N_TARGET,ZCVT_PWORK1(&PLEN)
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
.*
.* ADD FLD ?? TO Q
.*
         AWHEN C'Q'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LMG   R0,R1,&N_TARGET
         LE    F1,&N_SOURCE
         CGER  R3,0,F1
         AGR   R1,R3
         JNO   *+4+6
         AGI   R0,1
               AWHEN C'2'
         LMG   R0,R1,&N_TARGET
         LD    F1,&N_SOURCE
         CGDR  R3,0,F1
         AGR   R0,R3
               AWHEN C'F',C'A',C'I'
         LMG   R0,R1,&N_TARGET
         AGF   R1,&N_SOURCE
         JNO   *+4+6
         AGFI  R0,1
               AWHEN C'G'
         LMG   R0,R1,&N_TARGET
         AG    R1,&N_SOURCE
         JNO   *+4+6
         AGFI  R0,1
               AWHEN C'H'
         LMG   R0,R1,&N_TARGET
         LH    R3,&N_SOURCE
         AGFR  R1,R3
         JNO   *+4+6
         AGFI  R0,1
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
               ZC_CONV Q,LD
         ALG   R1,8+&N_TARGET
         ALCG  R0,&N_TARGET
               AWHEN C'Q'
         LMG   R0,R1,&N_TARGET
         ALG   R1,8+&N_SOURCE                    
         ALCG  R0,&N_SOURCE                     
               AWHEN C'Z'
                   ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
               ZC_CONV Q,LD
         ALG   R1,8+&N_TARGET
         ALCG  R0,&N_TARGET
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         STMG  R0,R1,&N_TARGET
.*
.*  ADD_FLD Z    
.*
         AWHEN C'Z'
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'2'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         LD    F0,&N_SOURCE
         CFDR  R0,0,F0
         CVD   R0,ZCVT_PWORK
         AP    ZCVT_PWORK1(&PLEN),ZCVT_PWORK
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'1'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         LE    F0,&N_SOURCE
         CFER  R0,0,F0
         CVD   R0,ZCVT_PWORK
         AP    ZCVT_PWORK1(&PLEN),ZCVT_PWORK
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'F',C'A',C'I'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         L     R0,&N_SOURCE
         CVD   R0,ZCVT_PWORK
         AP    ZCVT_PWORK1(&PLEN),ZCVT_PWORK
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'G'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         LG    R0,&N_SOURCE
         CVDG  R0,ZCVT_PWORK2
         AP    ZCVT_PWORK1(&PLEN),ZCVT_PWORK
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'H'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         LH    R0,&N_SOURCE
         CVD   R0,ZCVT_PWORK
         AP    ZCVT_PWORK1(&PLEN),ZCVT_PWORK
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'P'
                     :&PLEN SETA &L_TARGET/2+1
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_TARGET,&L_TARGET
         AP    ZCVT_PWORK1(&PLEN),&N_SOURCE
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN
               AWHEN C'Q'
                     ZC_PACK31 ZCVT_PWORK1,16,&N_TARGET,&L_TARGET
         ZC_CONV P,Q,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         AP    ZCVT_PWORK1,ZCVT_PWORK2
                     :&ST SETB &S_TARGET
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,16
               AWHEN C'Z'
                     :&PLEN1 SETA &L_TARGET/2+1
                     :&PLEN2 SETA &L_SOURCE/2+1
                   ZC_PACK31 ZCVT_PWORK1,&PLEN1,&N_TARGET,&L_TARGET
                   ZC_PACK31 ZCVT_PWORK2,&PLEN2,&N_SOURCE,&L_SOURCE
         AP    ZCVT_PWORK1(&PLEN1),ZCVT_PWORK2(&PLEN2)   
                     :&ST SETB &S_TARGET
                ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK1,&PLEN1
               AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
                    MEXIT
               AEND 
         AELSE
                    MNOTE 8,'GEN_ADD INVALID SOURCE DATA TYPE &N_SOURCEX
               '           
               MEXIT
         AEND
         AEND
.*
.* SET ON SIZE ERROR USING G64 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_G64
         JO    PG_ADD_&ADD_LAB._ON_SIZE    ERROR IF OVERFLOW
         LPGR  R15,R1
         CGR   R15,R0                      COMPARE ABS RESULT TO MAX
         JNL   PG_ADD_&ADD_LAB._ON_SIZE          ERROR IF TOO BIG
         &STX   R1,&N_TARGET            STORE RESULT
         AEND
.*
.* SET ON SIZE ERROR USING F32 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_F32
         JO    PG_ADD_&ADD_LAB._ON_SIZE    ERROR IF OVERFLOW
         LPR   R15,R1
         C     R15,0(R14)                 COMPARE ABS RESULT TO MAX
         JNL   PG_ADD_&ADD_LAB._ON_SIZE   ERROR IF TOO BIG
         &STX  R1,&N_TARGET            STORE RESULT
         AEND
.*
.* SET ON SIZE ERROR USING G64_R32 WITH PENDING END_ADD OR PERIOD
,*
         AENTRY SET_ON_SIZE_G64_R32
         JO    PG_ADD_&ADD_LAB._ON_SIZE    ERROR IF OVERFLOW SET 
         STM   R0,R1,&N_TARGET
         AEND
         COPY ZCRSTLAB
         MEND
