        MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 10/31/08 initial coding for Z390 GEN_DIV using GEN_MPY as model    
.* 02/25/09 RPI 1004 add support for types 1,2,E,D,L &ZC_FLOAT type    
.* 03/17/09 RPI 1004 add support for types 1-9,Q                       
.* 04/28/09 RPI 1003 add support for ne
.*********************************************************************
       GEN_DIV &NDD,&TDD,&LDD,&PDD, DIVIDEND  NAME/LIT,TYPE,LEN,PLACES X                  
               &NDR,&TDR,&LDR,&PDR, DIVISOR   NAME/LIT,TYPE,LEN,PLACES X                  
               &NQ,&TQ,&LQ,&SQ,&PQ, QUOTIENT  NAME, TYPE,LEN,SIGN,PLCS X                  
               &NR,&TR,&LR,&SR,&PR, REMAINDER NAME, TYPE,LEN,SIGN,PLCS X
               &ROUNDED,        1 IF ROUNDED SPECIFIED                 X
               &ON_SIZE,        1 IF ON SIZE SPECIFIED                 X
               &NOT_ON_SIZE     1 IF NOT_ON_SIZE SPECIFIED                  
.*
.* SET NDDX TO R2 FOR LIT AND SET LDDP IF P, LDDZ IF Z 
.*
      AIF (&LDD EQ 0)                                                  
       ACASE (C2A('&TDD'))
       AWHEN C'1'
         LARL  R2,=EH'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'2'
         LARL  R2,=DH'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'3'
         LARL  R2,=LH'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'4'
         LARL  R2,=EB'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'5'
         LARL  R2,=DB'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'6'
         LARL  R2,=LB'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'7'
         LARL  R2,=ED'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'8'
         LARL  R2,=DD'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'9'
         LARL  R2,=LD'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'F',C'H'
         LARL  R2,=&TDD'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'G'
         LARL  R2,=FL8'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'P'
         :&LDDP SETA K'&NDD
         AIF ('&NDD'(1,1) LT '0')
             :&LDDP SETA &LDDP-1
         AEND
         :&LDDP SETA &LDDP/2+1
         :&LDDP SETA (&LDDP+1)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LDDP GT 16)
             :&LDDP SETA 16
         AEND
         LARL  R2,=&TDD.L&LDDP'&NDD'
         :&NDDX SETC '0(&LDDP,R2)'
       AWHEN C'Q'
         LARL  R2,=FL16'&NDD'
         :&NDDX SETC '0(R2)'
       AWHEN C'Z'
         :&LDDZ SETA K'&NDD
         AIF ('&NDD'(1,1) LT '0')
             :&LDDZ SETA &LDDZ-1
         AEND
         :&LDDZ SETA (&LDDZ+1)/2*2 ROUNDED EVEN FOR LARL
         LARL  R2,=&TDD.L&LDDZ'&NDD'
         AIF (&LDDZ EQ 32)
           :&LDDZ SETA 31
           :&NDDX SETC '1(R2)'
         AELSE
           :&NDDX SETC '0(R2)'
         AEND
       AELSE
               MNOTE 8,'GEN_DIV INVALID DIVIDEND TYPE - &TDD' 
       AEND
      AELSE
         :&NDDX SETC '&NDD'
         :&LDDP SETA &LDD
         :&LDDZ SETA &LDD
      AEND
.*
.* SET NDRX TO R1 FOR LIT AND SET LDRP IF P, LDRZ IF Z 
.*
      AIF (&LDR EQ 0)                                     
       ACASE (C2A('&TDR'))
       AWHEN C'1'
         LARL  R1,=EH'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'2'
         LARL  R1,=DH'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'3'
         LARL  R1,=LH'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'4'
         LARL  R1,=EB'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'5'
         LARL  R1,=DB'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'6'
         LARL  R1,=LB'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'7'
         LARL  R1,=ED'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'8'
         LARL  R1,=DD'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'9'
         LARL  R1,=LD'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'F',C'H'
         LARL  R1,=&TDR'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'G'
         LARL  R1,=FL8'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'P'
         :&LDRP SETA K'&NDR
         AIF ('&NDR'(1,1) LT '0')
             :&LDRP SETA &LDRP-1
         AEND
         :&LDRP SETA &LDRP/2+1
         :&LDRP SETA (&LDRP+1)/2*2 ROUNDED EVEN FOR LARL
         AIF (&LDRP GT 16)
             :&LDRP SETA 16
         AEND
         LARL  R1,=&TDR.L&LDRP'&NDR'
         :&NDRX SETC '0(&LDRP,R1)'
       AWHEN C'Q'
         LARL  R1,=FL16'&NDR'
         :&NDRX SETC '0(R1)'
       AWHEN C'Z'
         :&LDRZ SETA K'&NDR
         AIF ('&NDR'(1,1) LT '0')
             :&LDRZ SETA &LDRZ-1
         AEND
         :&LDRZ SETA (&LDRZ+1)/2*2 ROUNDED EVEN FOR LARL
         LARL  R1,=&TDR.L&LDRZ'&NDR'
         AIF (&LDRZ EQ 32)
           :&LDRZ SETA 31
           :&NDRX SETC '1(R1)'
         AELSE
           :&NDRX SETC '0(R1)'
         AEND
         :&NDRX SETC '0(R1)'
       AEND
      AELSE
         :&NDRX SETC '&NDR'
         :&LDRP SETA &LDR
         :&LDRZ SETA &LDR
      AEND
.*
.* SELECT TYPE OF DIVIVISION BASED ON DIVIDEND TYPE
.*
         ACASE (C2A('&TDD'))
.*
.* DIVIDE DIVIDEND TYPE EH QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'1'                 DIVIDE EH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV EH,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV EH,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV EH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV EH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV EH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV EH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV EH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV EH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV EH,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CEFR  F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CEGR  F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CEFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EH,LD        
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                  ZC_CONV EH,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
               ZC_CONV EH,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LER   F1,F0
         LE    F0,&NDDX
                    ACALL SFT_RND_EH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE EH QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         STE   F0,&NQ
               AWHEN C'2'
         LER   F4,F0
                 ZC_CONV DH,EH
         STD   F0,&NQ
               AWHEN C'3'
         LER   F4,F0
                 ZC_CONV LH,EH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LER   F4,F0
                 ZC_CONV EB,EH
         STE   F0,&NQ
               AWHEN C'5'
         LER   F4,F0
                 ZC_CONV DB,EH
         STD   F0,&NQ
               AWHEN C'6'
         LER   F4,F0
                 ZC_CONV LB,EH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LER   F4,F0
                 ZC_CONV ED,EH
         STE   F0,&NQ
               AWHEN C'8'
         LER   F4,F0
                 ZC_CONV DD,EH
         STD   F0,&NQ
               AWHEN C'9'
         LER   F4,F0
                 ZC_CONV LD,EH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFER  0,0,0
         ST    0,&NQ
               AWHEN C'G'
         CGER  0,0,0
         STG   0,&NQ
               AWHEN C'H'
         CFER  0,0,0
         STH   0,&NQ
               AWHEN C'P'
         CFER  0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPER   F4,F0
                   AELSE
         LER    F4,F0
                   AEND
                   ZC_CONV Q,EH
         STMG  R0,R1,&NQ
               AWHEN C'Z'
         CFER  0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DH WITH QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'2'                    DIV DH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DH,EH,&NDRX
               AWHEN C'2'
.*                 ZC_CONV DH,DH,&NDRX
         LD    F0,&NDRX
               AWHEN C'3'          
                 ZC_CONV DH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DH,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CDFR  F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CDGR  F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CDFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
               AWHEN C'Q'
                 ZC_CONV DH,Q,&NDRX
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LD    F0,&NDDX
                    ACALL SFT_RND_DH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DH QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
                 ZC_CONV EH,DH
         STE   F0,&NQ
               AWHEN C'2'
.*       LDR   F4,F0
.*               ZC_CONV DH,DH
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
                 ZC_CONV LH,DH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
                 ZC_CONV EB,DH
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
                 ZC_CONV DB,DH
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
                 ZC_CONV LB,DH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
                 ZC_CONV ED,DH
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
                 ZC_CONV DD,DH
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
                 ZC_CONV LD,DH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFDR  R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGDR  R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CFDR  R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         CGDR  R0,F0,0
         CVDG  R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
                   ZC_CONV Q,DH
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
                 ZC_CONV P,DH
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LH WITH QUOTIENT IN F0-F2 NO REMAINDER
.*
         AWHEN C'3'                    DIV LH BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LH,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LH,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LH,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LH,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LH,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LH,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LH,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LH,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LH,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CXFR  F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CXGR  F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CXFR  F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                 ZC_CONV LH,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LDR   F3,F2
         LD    F0,&NDDX
         LD    F2,8+&NDDX
                    ACALL SFT_RND_LH
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LH QUOTIENT FROM F0-F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EH,LH
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DH,LH
         STD   F0,&NQ
               AWHEN C'3'
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EB,LH
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DB,LH
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LB,LH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV ED,LH
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DD,LH
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LD,LH
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFXR  R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGXR  R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CFXR  R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         CGXR  R0,F0,0
         CVDG  R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
         LDR   F6,F2
                   ZC_CONV Q,LH
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV P,LH
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE EB QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'4'                 DIVIDE EB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV EB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV EB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV EB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV EB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV EB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV EB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV EB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV EB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV EB,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CEFBR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CEGBR F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CEFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EB,LD        
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                  ZC_CONV EB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
               ZC_CONV EB,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LER   F1,F0
         LE    F0,&NDDX
                    ACALL SFT_RND_EB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE EB QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LER   F4,F0
                 ZC_CONV EH,EB
         STE   F0,&NQ
               AWHEN C'2'
         LER   F4,F0
                 ZC_CONV DH,EB
         STD   F0,&NQ
               AWHEN C'3'
         LER   F4,F0
                 ZC_CONV LH,EB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         STE   F0,&NQ
               AWHEN C'5'
         LER   F4,F0
                 ZC_CONV DB,EB
         STD   F0,&NQ
               AWHEN C'6'
         LER   F4,F0
                 ZC_CONV LB,EB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LER   F4,F0
                 ZC_CONV ED,EB
         STE   F0,&NQ
               AWHEN C'8'
         LER   F4,F0
                 ZC_CONV DD,EB
         STD   F0,&NQ
               AWHEN C'9'
         LER   F4,F0
                 ZC_CONV LD,EB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFEBR 0,0,0
         ST    0,&NQ
               AWHEN C'G'
         CGEBR 0,0,0
         STG   0,&NQ
               AWHEN C'H'
         CFEBR 0,0,0
         STH   0,&NQ
               AWHEN C'P'
         CFEBR 0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPER   F4,F0
                   AELSE
         LER    F4,F0
                   AEND
                   LE F4,F0
                   ZC_CONV Q,EB
         STMG  R0,R1,&NQ
               AWHEN C'Z'
         CFEBR 0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DB WITH QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'5'                    DIV DB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DB,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CDFBR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CDGBR F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CDFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                 ZC_CONV DB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LD    F0,&NDDX
                    ACALL SFT_RND_DB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DB QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
                 ZC_CONV EH,DB
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
                 ZC_CONV DH,DB
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
                 ZC_CONV LH,DB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
                 ZC_CONV EB,DB
         STE   F0,&NQ
               AWHEN C'5'
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
                 ZC_CONV LB,DB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
                 ZC_CONV ED,DB
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
                 ZC_CONV DD,DB
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
                 ZC_CONV LD,DB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFDBR R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGDBR R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CFDBR R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         CGDBR R0,F0,0
         CVDG  R0,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
                   ZC_CONV Q,DB
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
                 ZC_CONV P,DB
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LB WITH QUOTIENT IN F0-F2 NO REMAINDER
.*
         AWHEN C'6'                    DIV LB BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LB,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LB,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LB,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LB,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LB,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LB,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LB,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LB,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LB,LD,&NDRX
               AWHEN C'F'
         L     R0,&NDRX
         CXFBR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CXGBR F0,R0
               AWHEN C'H'
         LH    R0,&NDRX
         CXFBR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                 ZC_CONV LB,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LDR   F3,F2
         LD    F0,&NDDX
         LD    F2,8+&NDDX
                    ACALL SFT_RND_LB
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LB QUOTIENT FROM F0-F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EH,LB
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DH,LB
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LH,LB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EB,LB
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DB,LB
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LB,LB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV ED,LB
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DD,LB
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LD,LB
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFXBR R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGXBR R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CFXBR R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV P,LB
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
         LDR   F6,F2
                   ZC_CONV Q,LB
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV P,LB
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE ED QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'7'                 DIVIDE ED BY ?? (USE DD)
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DD,LD,&NDRX
               AWHEN C'F'
         LGF   R0,&NDRX
         CDGTR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&NDRX
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD        
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                  ZC_CONV DD,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
               ZC_CONV DD,LD
                  AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-1'
               AEND
         LDR   F1,F0
         LE    F0,&NDDX
         LDETR F0,F0,0
                    ACALL SFT_RND_DD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE ED QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
                 ZC_CONV EH,DD
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
                 ZC_CONV DH,DD
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
                 ZC_CONV LH,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
                 ZC_CONV EB,DD
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
                 ZC_CONV DB,DD
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
                 ZC_CONV LB,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
                 ZC_CONV ED,DD
         STE   F0,&NQ
               AWHEN C'8'
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
                 ZC_CONV LD,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFDTR 0,0,0
         ST    0,&NQ
               AWHEN C'G'
         CGDTR 0,0,0
         STG   0,&NQ
               AWHEN C'H'
         CGDTR 0,0,0
         STH   0,&NQ
               AWHEN C'P'
         CFDTR 0,0,0
         CVD   0,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR   F4,F0
                   AELSE
         LDR    F4,F0
                   AEND
                   LE F4,F0
                   ZC_CONV Q,DD
         STMG  R0,R1,&NQ
               AWHEN C'Z'
         CFDTR 0,0,0
         CVD   0,ZCVT_PWORK
                  ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE DD WITH QUOTIENT IN F0 NO REMAINDER
.*
         AWHEN C'8'                    DIV DD BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV DD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV DD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV DD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV DD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV DD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV DD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV DD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV DD,LD,&NDRX
               AWHEN C'F'
         LGF   R0,&NDRX
         CDGTR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&NDRX
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
               AWHEN C'Q'
         LMG   R0,R1,&NDRX
                 ZC_CONV DD,Q
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LD    F0,&NDDX
                    ACALL SFT_RND_DD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE DD QUOTIENT FROM F0 NO REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
                 ZC_CONV EH,DD
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
                 ZC_CONV DH,DD
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
                 ZC_CONV LH,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
                 ZC_CONV EB,DD
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
                 ZC_CONV DB,DD
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
                 ZC_CONV LB,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
                 ZC_CONV ED,DD
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
                 ZC_CONV DD,DD
         STD   F0,&NQ
               AWHEN C'9'
         LDR   F4,F0
                 ZC_CONV LD,DD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFDTR R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGDTR R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CGDTR R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         LDR   F4,F0
                 ZC_CONV P,DD
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPDR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
                   ZC_CONV Q,DD
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
                 ZC_CONV P,DD
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE LD WITH QUOTIENT IN F0-F2 NO REMAINDER
.*
         AWHEN C'9'                    DIV LD BY ??
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV LD,EH,&NDRX
               AWHEN C'2'
                 ZC_CONV LD,DH,&NDRX
               AWHEN C'3'          
                 ZC_CONV LD,LH,&NDRX
               AWHEN C'4'
                 ZC_CONV LD,EB,&NDRX
               AWHEN C'5'
                 ZC_CONV LD,DB,&NDRX
               AWHEN C'6'
                 ZC_CONV LD,LB,&NDRX
               AWHEN C'7'
                 ZC_CONV LD,ED,&NDRX
               AWHEN C'8'
                 ZC_CONV LD,DD,&NDRX
               AWHEN C'9'
                 ZC_CONV LD,LD,&NDRX
               AWHEN C'F'
         LGF   R0,&NDRX
         CXGTR F0,R0
               AWHEN C'G'
         LG    R0,&NDRX
         CXGTR F0,R0
               AWHEN C'H'
         LGH   R0,&NDRX
         CXGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
               AWHEN C'Q'
                 ZC_CONV LD,Q,&NDRX
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDED NOT ALLOWED FOR COMP-2'
               AEND
         LDR   F1,F0
         LDR   F3,F2
         LD    F0,&NDDX
         LD    F2,8+&NDDX
                    ACALL SFT_RND_LD
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE LD QUOTIENT FROM F0-F2 REMAINDER
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EH,LD
         STE   F0,&NQ
               AWHEN C'2'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DH,LD
         STD   F0,&NQ
               AWHEN C'3'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LH,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV EB,LD
         STE   F0,&NQ
               AWHEN C'5'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DB,LD
         STD   F0,&NQ
               AWHEN C'6'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV LB,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV ED,LD
         STE   F0,&NQ
               AWHEN C'8'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV DD,LD
         STD   F0,&NQ
               AWHEN C'9'
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         CFXTR R0,F0,0
         ST    R0,&NQ
               AWHEN C'G'
         CGXTR R0,F0,0
         STG   R0,&NQ
               AWHEN C'H'
         CGXTR R0,F0,0
         STH   R0,&NQ
               AWHEN C'P'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV P,LD
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &NQ,&ZCVT_PWORK2
                   AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
                   AEND
               AWHEN C'Q'
                   AIF (&SQ EQ 0)
         LPXR  F4,R0
                   AELSE
         LDR   F4,F0
                   AEND
         LDR   F6,F2
                   ZC_CONV Q,LD
         STMG  0,1,&NQ                             
               AWHEN C'Z'
         LDR   F4,F0
         LDR   F6,F2
                 ZC_CONV P,LD
         STMG   R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK2,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE F WITH QUOTIENT IN R1 AND REMAINDER IN R0
.*
         AWHEN C'F'
         MVC   ZCVT_NDDX(4),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
                 LR  R2,R1 IGNORE HIGH 96 BITS
               AWHEN C'F'
         L     2,&NDRX
               AWHEN C'G'
         LG    2,&NDRX    HIGH 32 BITS IGNORED
               AWHEN C'H'
         LH    2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&NDRX
         CVB   2,ZCVT_PWORK
               AWHEN C'Q'
         L     2,12+&NDRX  IGNORE HIGH 96 BITS
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVB   2,ZCVT_PWORK1+8
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         L     1,ZCVT_NDDX
                    ACALL SFT_RND_F
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
               ACALL STORE_FH_QR
.*
.* DIVIDE DIVIDEND TYPE G WITH QUOTIENT IN R1 AND REMAINDER IN R0
.*
         AWHEN C'G'
         MVC   ZCVT_NDDX(8),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
                 LGR R2,R1 IGNORE HIGH 64 BITS
               AWHEN C'F'
         LGF   2,&NDRX
               AWHEN C'G'
         LG    2,&NDRX
               AWHEN C'H'
         LGH   2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&NDRX
         CVBG  2,ZCVT_PWORK1
               AWHEN C'Q'
         LG    2,8+&NDRX  IGNORE HIGH 64 BITS
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVBG  2,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LG    1,ZCVT_NDDX
                    ACALL SFT_RND_G
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE G QUOTIENT FROM R1
.*
               AIF (&SQ EQ 0)
         LPGR  1,1
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EH,Q
         STE   F0,&NQ
               AWHEN C'2'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DH,Q
         STD   F0,&NQ
               AWHEN C'3'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LH,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EB,Q
         STE   F0,&NQ
               AWHEN C'5'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DB,Q
         STD   F0,&NQ
               AWHEN C'6'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LB,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV ED,Q
         STE   F0,&NQ
               AWHEN C'8'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DD,Q
         STD   F0,&NQ
               AWHEN C'9'
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LD,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ST    1,&NQ
               AWHEN C'G'
         STG   1,&NQ
               AWHEN C'H'
         STH   1,&NQ
               AWHEN C'P'
         CVDG  1,ZCVT_PWORK1
         ZAP   &NQ,ZCVT_PWORK1
               AWHEN C'Q'
         LGR   R0,R1
         SRAG  R0,R0,63
         STMG  R0,R1,&NQ
               AWHEN C'Z'
         CVDG  1,ZCVT_PWORK1
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE G REMAINDER FROM R0  (NO REMAINDERS FOR FP)
.*
             AIF ('&TR' NE '')
               ACASE (C2A('&TR'))  
               AWHEN C'F'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         ST    0,&NR      IGNORE HIGH 32 BITS
               AWHEN C'G'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR
               AWHEN C'H'
               AIF (&SR EQ 0)
         LPGR  0,0
               AEND
         STH   0,&NR      IGNORE HIGH 48 BITS
               AWHEN C'P'
         CVDG  0,ZCVT_PWORK1
         ZAP   &NR,ZCVT_PWORK1
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
               AIF (&SQ EQ 0)
         LPGR  1,1
               AEND
         LGR   R0,R1
         SRAG  R0,R0,63
         STMG  R0,R1,&NR
               AWHEN C'Z'
         CVDG  0,ZCVT_PWORK1
         :&PLEN SETA &LR/2+1
         :&POFF SETA 16-&PLEN
               ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* DIVIDE DIVIDEND TYPE H WITH QUOTIENT IN R1 AND REMAINDER IN R0
.*
         AWHEN C'H'
         MVC   ZCVT_NDDX(2),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
                 LR  R2,R1 IGNORE HIGH 96
               AWHEN C'F'
         L     2,&NDRX
               AWHEN C'G'
         L     2,4+&NDRX  IGNORE HIGH 32 BITS
               AWHEN C'H'
         LH    2,&NDRX
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&NDRX
         CVB   2,ZCVT_PWORK
               AWHEN C'Q'
         LH    2,14+&NDRX  IGNORE HIGH 112 BITS
               AWHEN C'Z'
                ZC_PACK31 ZCVT_PWORK1,16,&NDRX,&LDR
         CVB   2,ZCVT_PWORK1+8
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LH    1,ZCVT_NDDX
                    ACALL SFT_RND_F
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
               ACALL STORE_FH_QR
.*
.* DIVIDE DIVIDEND TYPE P LEAVING 
.*   Q=ZCVT_PWORK4(&LDD) R=ZCVT_PWORK4+&LDD.(&LDR)
.*
         AWHEN C'P'
         ZAP ZCVT_PWORK1(&LDDP),&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV P,EH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'2'
                 ZC_CONV P,DH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'3'          
                 ZC_CONV P,LH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'4'
                 ZC_CONV P,EB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'5'
                 ZC_CONV P,DB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'6'
                 ZC_CONV P,LB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'7'
                 ZC_CONV P,ED,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'8'
                 ZC_CONV P,DD,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'9'
                 ZC_CONV P,LD,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'F'
         L     0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'G'
         LG    0,&NDRX
         CVDG  0,ZCVT_PWORK2    IGNORE HIGH 32
         :&LDRP SETA 16
               AWHEN C'H'
         LH    0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'P'
         ZAP   ZCVT_PWORK2(&LDRP),&NDRX    DSHX
               AWHEN C'Q'
                   ZC_CONV P,Q,&NDRX
         STMG  R0,R1,ZCVT_PWORK2    
         :&LDRP SETA 16
               AWHEN C'Z'
                    :&LDRP SETA &LDR/2+1
                    ZC_PACK31 ZCVT_PWORK2,&LDRP,&NDRX,&LDR
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
               ACALL SFT_RND_P
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE P QUOTIENT FROM ZCVT_PWORK4(LDDP)
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EH,LD
         STE   F0,&NQ
               AWHEN C'2'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
         STD   F0,&NQ
               AWHEN C'3'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EB,LD
         STE   F0,&NQ
               AWHEN C'5'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
         STD   F0,&NQ
               AWHEN C'6'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
         STE   F0,&NQ
               AWHEN C'8'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
         STD   F0,&NQ
               AWHEN C'9'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NQ
               AWHEN C'G'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
               ZC_CONV Q,LD
               AIF (&SQ EQ 0)
         LPGR  0,1
               AEND
         STG   0,&NQ
               AWHEN C'H'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDR)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NQ
               AWHEN C'P'
         ZAP   &NQ,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK1+15,X'F'
               AEND
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                 ZC_CONV Q,LD
         STMG  R0,R1,&NQ
               AWHEN C'Z'
               ZC_UNPK31 &NQ,&LNQ,&SQ,ZCVT_PWORK4,&LDDP
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE P REMAINDER FROM ZCVT_PWORK4+LDDP.(LDRP) OR ZCVT_PWORK2
.*
             AIF ('&TR' NE '')
               AIF (&LDRP EQ 16)
                 :&RX SETC 'ZCVT_PWORK2'
               AELSE
                 :&RX SETC 'ZCVT_PWORK4+&LDDP.(&LDRP)'
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EH,LD
         STE   F0,&NR
               AWHEN C'2'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
         STD   F0,&NR
               AWHEN C'3'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'4'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EB,LD
         STE   F0,&NR
               AWHEN C'5'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
         STD   F0,&NR
               AWHEN C'6'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'7'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
         STE   F0,&NR
               AWHEN C'8'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
         STD   F0,&NR
               AWHEN C'9'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'F'
         ZAP   ZCVT_PWORK,&RX                         
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NR
               AWHEN C'G'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         CVBG  0,ZCVT_PWORK2
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR
               AWHEN C'H'
         ZAP   ZCVT_PWORK,&RX                         
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NR
               AWHEN C'P'
         ZAP   &NR,&RX                         
               AIF (&SQ EQ 0)
         OI    &NR+&LR-1,X'0F'
               AEND
               AWHEN C'Q'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK2+15,X'F'
               AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV Q,LD
         STMG  0,1,&NR
               AWHEN C'Z'
                 AIF (&LDRP EQ 16)
                   ZC_UNPK31 &NR,&LNR,&SR,ZCVT_PWORK2,16
                 AELSE
                   ZC_UNPK31 &NR,&LNR,&SR,ZCVT_PWORK4,&LDRP
                 AEND
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* DIVIDE DIVIDEND TYPE Q WITH QUOTIENT IN R2-R3 AND REMAINDER IN R0-R1
.*
         AWHEN C'Q'
         MVC   ZCVT_NDDX,&NDDX
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'2'
                 ZC_CONV Q,DH,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'3'          
                 ZC_CONV Q,LH,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'4'
                 ZC_CONV Q,EB,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'5'
                 ZC_CONV Q,DB,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'6'
                 ZC_CONV Q,LB,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'7'
                 ZC_CONV Q,ED,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'8'
                 ZC_CONV Q,DD,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'9'
                 ZC_CONV Q,LD,&NDRX
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'F'
         LGF   R3,&NDRX
         SGR   R2,R2
               AWHEN C'G'
         LG    R3,&NDRX
         SGR   R2,R2
               AWHEN C'H'
         LGH   R3,&NDRX
         SGR   R2,R2
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&NDRX
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
               ZC_CONV Q,LD
         LGR   R2,R0
         LGR   R3,R1
               AWHEN C'Q'
         LMG   R2,R3,&NDRX
               AWHEN C'Z'
               ZC_PACK31 ZCVT_PWORK2,16,&NDRX,&LDR
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
               ZC_CONV Q,LD
         LGR   R2,R0
         LGR   R3,R1
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
         LMG   R0,R1,ZCVT_NDDX
                    ACALL SFT_RND_Q
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE Q REMAINDER FROM R0-R1                            
.*
             AIF (&SR EQ 0)
               ZC_LPQR R0,R0
             AEND
             AIF ('&TR' NE '')
               ACASE (C2A('&TR'))  
               AWHEN C'1'
                 ZC_CONV EH,Q
         STE   F0,&NR
               AWHEN C'2'
                 ZC_CONV DH,Q
         STD   F0,&NR
               AWHEN C'3'
                 ZC_CONV LH,Q
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'4'
                 ZC_CONV EB,Q
         STE   F0,&NR
               AWHEN C'5'
                 ZC_CONV DB,Q
         STD   F0,&NR
               AWHEN C'6'
                 ZC_CONV LB,Q
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'7'
                 ZC_CONV ED,Q
         STE   F0,&NR
               AWHEN C'8'
                 ZC_CONV DD,Q
         STD   F0,&NR
               AWHEN C'9'
                 ZC_CONV LD,Q
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'F'
         ST    R1,&NR         IGNORE HIGH 96
               AWHEN C'G'
         STG   R1,&NR         IGNORE HIGH 64
               AWHEN C'H'
         STH   R1,&NR      IGNORE HIGH 112 BITS
               AWHEN C'P'
                 ZC_CONV P,Q
         STMG  R0,R1,ZCVT_PWORK1
         ZAP   &NR,ZCVT_PWORK1
               AWHEN C'Q'
         STMG  R0,R1,&NR
               AWHEN C'Z'
                 ZC_CONV P,Q
         STMG  R0,R1,ZCVT_PWORK1
                 ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* STORE TYPE Q QUOTIENT FROM R2-R3
.*
               AIF (&SQ EQ 0)
                ZC_LPQR  R2,R2
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV EH,Q
         STE   F0,&NQ
               AWHEN C'2'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV DH,Q
         STD   F0,&NQ
               AWHEN C'3'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV LH,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV EB,Q
         STE   F0,&NQ
               AWHEN C'5'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV DB,Q
         STD   F0,&NQ
               AWHEN C'6'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV LB,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV ED,Q
         STE   F0,&NQ
               AWHEN C'8'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV DD,Q
         STD   F0,&NQ
               AWHEN C'9'
         LGR   R0,R2
         LGR   R1,R3
                 ZC_CONV LD,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ST    R3,&NQ
               AWHEN C'G'
         STG   R3,&NQ
               AWHEN C'H'
         STH   R3,&NQ
               AWHEN C'P'
         LGR   R0,R2
         LGR   R1,R3
               ZC_CONV P,Q
         STMG  R0,R1,ZCVT_PWORK1
         ZAP   &NQ,ZCVT_PWORK1
               AWHEN C'Q'
         STMG  R2,R3,&NQ
               AWHEN C'Z'
         LGR   R0,R2
         LGR   R1,R3
               ZC_CONV P,Q      
         STMG  R0,R1,ZCVT_PWORK1
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK1,16
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* DIVIDE DIVIDEND TYPE Z WITH 
.*  Q=ZCVT_PWORK4(&LDDP) R=ZCVT_PWORK4+&LDDP.(&LDRP)
.*
         AWHEN C'Z'
               :&LDDP SETA &LDDZ/2+1
               ZC_PACK31 ZCVT_PWORK1,&LDDP,&NDDX,&LDDZ
               ACASE (C2A('&TDR'))
               AWHEN C'1'
                 ZC_CONV P,EH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16
               AWHEN C'2'
                 ZC_CONV P,DH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'3'          
                 ZC_CONV P,LH,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'4'
                 ZC_CONV P,EB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'5'
                 ZC_CONV P,DB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'6'
                 ZC_CONV P,LB,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'7'
                 ZC_CONV P,ED,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'8'
                 ZC_CONV P,DD,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'9'
                 ZC_CONV P,LD,&NDRX
         STMG    R0,R2,ZCVT_PWORK2
         :&LDRP SETA 16                 
               AWHEN C'F'
         L     0,&NDRX
         CVD   0,ZCVT_PWORK2
         :&LDRP SETA 8
               AWHEN C'G'
         LG    0,&NDRX
         CVDG  0,ZCVT_PWORK2 
         :&LDRP SETA 16
               AWHEN C'H'
         LH    0,&NDRX
         CVD   0,ZCVT_PWORK2                          
         :&LDRP SETA 8
               AWHEN C'P'
                :&LDRP SETA &LDR/2+1
         ZAP    ZCVT_PWORK2(&LDRP),&NDRX
               AWHEN C'Q'
                 ZC_CONV P,Q,&NDRX
         STMG  R0,R1,ZCVT_PWORK2
         :&LDRP SETA 16        
               AWHEN C'Z'
                    :&LDRP SETA &LDRZ/2+1
                    ZC_PACK31 ZCVT_PWORK2,&LDRP,&NDRX,&LDRZ
               AELSE
                    MNOTE 8,'GEN_DIV INVALID DIVISOR TYPE &TDR'
                    MEXIT
               AEND
               AIF (&ROUNDED EQ 1)
                   MNOTE 8,'GEN_DIV ROUNDING NOT SUPPORTED YET'
               AEND
               ACALL SFT_RND_P
               AIF (&ON_SIZE EQ 1 OR &NOT_ON_SIZE EQ 1)
                   MNOTE 8,'GEN_DIV ON SIZE NOT SUPPORTED YET'
                   MEXIT
               AEND
.*
.* STORE TYPE Z QUOTIENT FROM Q=ZCVT_PWORK4(LDDP)
.*
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EH,LD
         STE   F0,&NQ
               AWHEN C'2'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
         STD   F0,&NQ
               AWHEN C'3'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EB,LD
         STE   F0,&NQ
               AWHEN C'5'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
         STD   F0,&NQ
               AWHEN C'6'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
         STE   F0,&NQ
               AWHEN C'8'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
         STD   F0,&NQ
               AWHEN C'9'
         ZAP   ZCVT_PWORK2,ZCVT_PWORK4(&LDDP)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDDP)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         ST    0,&NQ
               AWHEN C'G'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
         CVBG  0,ZCVT_PWORK1
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NQ
               AWHEN C'H'
         ZAP   ZCVT_PWORK,ZCVT_PWORK4(&LDDP)
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NQ
               AWHEN C'P'
         ZAP   &NQ,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    &NQ+&LQ-1,X'0F'
               AEND
               AWHEN C'Q'
         ZAP   ZCVT_PWORK1,ZCVT_PWORK4(&LDDP)
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK1+15,X'F'
               AEND
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                  ZC_CONV Q,LD
         STMG  R0,R1,&NQ
               AWHEN C'Z'
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK4,&LDDP
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE Z REMAINDER FROM ZCVT_PWORK4(LDDP)
.*
             AIF ('&TR' NE '')
               AIF (&LDRP EQ 16)
                 :&RX SETC 'ZCVT_PWORK2'
               AELSE
                 :&RX SETC 'ZCVT_PWORK4+&LDDP.(&LDRP)'
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EH,LD
         STE   F0,&NR
               AWHEN C'2'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DH,LD
         STD   F0,&NR
               AWHEN C'3'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LH,LD
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'4'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV EB,LD
         STE   F0,&NR
               AWHEN C'5'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DB,LD
         STD   F0,&NR
               AWHEN C'6'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'7'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
         STE   F0,&NR
               AWHEN C'8'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
         STD   F0,&NR
               AWHEN C'9'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
         STD   F0,&NR
         STD   F2,8+&NR
               AWHEN C'F'
         ZAP   ZCVT_PWORK,&RX                                  
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STD   0,&NR
               AWHEN C'G'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
         CVBG  0,ZCVT_PWORK2
               AIF (&SQ EQ 0)
         LPGR  0,0
               AEND
         STG   0,&NR
               AWHEN C'H'
         ZAP   ZCVT_PWORK,&RX                                  
         CVB   0,ZCVT_PWORK
               AIF (&SQ EQ 0)
         LPR   0,0
               AEND
         STH   0,&NR
               AWHEN C'P'
         ZAP   &NR,&RX                                  
               AIF (&SQ EQ 0)
         OI    &NR+&LR-1,X'0F'
               AEND
               AWHEN C'Q'
       AIF   (&LDRP NE 16)
         ZAP   ZCVT_PWORK2,&RX                       
       AEND
               AIF (&SQ EQ 0)
         OI    ZCVT_PWORK2+15,X'F'
               AEND
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV Q,LD
         STMG  R0,R1,&NR
               AWHEN C'Z'
                 AIF (&LDRP EQ 16)
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK2,16
                 AELSE
                   ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK4+&LDDP,&LDRP
                 AEND
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
.*
.* END OF DIVIDEND TYPE PROCESSING
.*
         AELSE
               MNOTE 8,'GEN_DIV INVALID DIVIDEND TYPE &TDD'
               MEXIT
         AEND
         MEXIT
.*
.* STORE TYPE F/H QUOTIENT FROM R1 AND REMAINDER FROM R0
.*
         AENTRY STORE_FH_QR
               AIF   ('&TR' NE '')
         ST    R0,ZCVT_WORKAREA  SAVE REMAINDER
               AEND
               AIF (&SQ EQ 0)
         LPR   1,1
               AEND
               ACASE (C2A('&TQ'))  
               AWHEN C'1'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EH,Q
         STE   F0,&NQ
               AWHEN C'2'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DH,Q
         STD   F0,&NQ
               AWHEN C'3'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LH,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EB,Q
         STE   F0,&NQ
               AWHEN C'5'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DB,Q
         STD   F0,&NQ
               AWHEN C'6'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LB,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV ED,Q
         STE   F0,&NQ
               AWHEN C'8'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DD,Q
         STD   F0,&NQ
               AWHEN C'9'
         LGFR  R1,R1
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LD,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ST    1,&NQ
               AWHEN C'G'
         LGFR  1,1
         STG   1,&NQ
               AWHEN C'H'
         STH   1,&NQ
               AWHEN C'P'
         CVD   1,ZCVT_PWORK
         ZAP   &NQ,ZCVT_PWORK
               AWHEN C'Q'
         LGFR  1,1
         LGR   R0,R1
         SRAG  R0,R0,63
         STMG  R0,R1,&NQ
               AWHEN C'Z'
         CVD   1,ZCVT_PWORK
               ZC_UNPK31 &NQ,&LQ,&SQ,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID GIVING TYPE &TQ'
                   MEXIT
               AEND
.*
.* STORE TYPE F/H REMAINDER FROM R0
.*
             AIF ('&TR' NE '')
         L     R0,ZCVT_WORKAREA RESTORE REMAINDER
               AIF (&SR EQ 0)
         LPR   0,0
               AEND
               ACASE (C2A('&TR'))  
               AWHEN C'1'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EH,Q
         STE   F0,&NQ
               AWHEN C'2'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DH,Q
         STD   F0,&NQ
               AWHEN C'3'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LH,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'4'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV EB,Q
         STE   F0,&NQ
               AWHEN C'5'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DB,Q
         STD   F0,&NQ
               AWHEN C'6'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LB,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'7'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV ED,Q
         STE   F0,&NQ
               AWHEN C'8'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV DD,Q
         STD   F0,&NQ
               AWHEN C'9'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
                 ZC_CONV LD,Q
         STD   F0,&NQ
         STD   F2,8+&NQ
               AWHEN C'F'
         ST    0,&NR
               AWHEN C'G'
         LGFR  0,0
         STG   0,&NR
               AWHEN C'H'
         STH   0,&NR
               AWHEN C'P'
         CVD   0,ZCVT_PWORK
         ZAP   &NR,ZCVT_PWORK
               AWHEN C'Q'
         LGFR  R1,R0
         LGR   R0,R1
         SRAG  R0,R0,63
         STMG  R0,R1,&NR
               AWHEN C'Z'
         CVD   0,ZCVT_PWORK
               ZC_UNPK31 &NR,&LR,&SR,ZCVT_PWORK,8
               AELSE
                   MNOTE 8,'GEN_DIV INVALID REMAINDER TYPE &TR'
                   MEXIT
               AEND
             AEND
         AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE EH F0,F1 
.*
     AENTRY SFT_RND_EH
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=EH'1E&SFT'
         ME    0,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=EH'1E-&SFT'
         ME    0,0(R15)
       AEND
         DER   0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=E'0.5'
         AE    0,0(R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DH F0,F1 
.*
     AENTRY SFT_RND_DH
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=DH'1E&SFT'
         MD    0,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=DH'1E-&SFT'
         MD    0,0(R15)
       AEND
         DDR   0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=D'0.5'
         AD    0,0(R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LH F0-F2 BY F1=F3
.*
     AENTRY SFT_RND_LH
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=LH'1E&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXR   F0,F6
       AELSEIF (&SFT LT 0)
         LARL  R15,=LH'1E-&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXR   F0,F6
       AEND
         DXR   F0,F1
        AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=LH'0.5'
         LD    F4,0(R15)
         LD    F6,8(R15)
         AXR   F0,F6
        AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE EB F0,F1 
.*
     AENTRY SFT_RND_EB
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=EB'1E&SFT'
         MEB   0,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=EB'1E-&SFT'
         MEB   0,0(R15)
       AEND
         DEBR  0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=EB'0.5'
         AEB   0,0(R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DB F0,F1 
.*
     AENTRY SFT_RND_DB 
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=DB'1E&SFT'
         MDB   0,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=DB'1E-&SFT'
         MDB   0,0(R15)
       AEND
         DDBR  0,1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=D'0.5'
         ADB   0,0(R15)
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LB F0-F2 BY F1=F3
.*
     AENTRY SFT_RND_LB
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=LH'1E&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXBR  F0,F6
       AELSEIF (&SFT LT 0)
         LARL  R15,=LH'1E-&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXBR  F0,F6
       AEND
         DXBR  F0,F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=LH'0.5'
         LD    F4,0(R15)
         LD    F6,8(R15)
         AXBR  F0,F6
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE ED F0,F1 
.*
     AENTRY SFT_RND_ED
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=DD'1E&SFT'
         LD    F4,0(R15)
         MDTR  F0,F4
       AELSEIF (&SFT LT 0)
         LARL  R15,=DD'1E-&SFT'
         LD    F4,0(R15)
         MDTR  F0,F4
       AEND
         DDTR  F0,F0,F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=DD'0.5'
         LD    F4,0(R15)
         ADTR  F0,F4
         LEDTR F0,F0,0
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE DD F0,F1 
.*
     AENTRY SFT_RND_DD 
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LRL   F4,=DD'1E&SFT'
         MDTR  F0,F0,F4
       AELSEIF (&SFT LT 0)
         LRL   F4,=DD'1E-&SFT'
         MDTR  F0,F0,F4
       AEND
         DDTR  F0,F0,F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LRL   F4,=DD'0.5'
         ADTR  F0,F0,F4
         AEND
     AEND
.*
.* SHIFT,DIVIDE, AND ROUND TYPE LD F0-F2 BY F1=F3
.*
     AENTRY SFT_RND_LD
       :&SFT SETA &PQ-&PDR
       AIF   (&SFT GT 0)
         LARL  R15,=LD'1E&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXTR  F0,F0,F6
       AELSEIF (&SFT LT 0)
         LARL  R15,=LD'1E-&SFT'
         LD    F4,0(R15)
         LD    F6,8(R15)
         MXTR  F0,F0,F6
       AEND
         DXTR  F0,F0,F1
         AIF   (&ROUNDED EQ 1)  ROUNDING FOR NON D TYPE GIVING QUOTIENT
         LARL  R15,=LD'0.5'
         LD    F4,0(R15)
         LD    F6,8(R15)
         AXTR  F0,F6
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE F R0,R2 (ALSO USED FOR H) 
.*
     AENTRY SFT_RND_F
       :&SFT SETA &PQ-(&PDD-&PDR)
       AIF   (&SFT GT 0)
         LARL  R15,=F'1E&SFT'
         MS    1,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=F'1E&SFT'
         MS    2,0(R15)
       AEND
         SR    0,0
         DR    0,2
         AIF   (&ROUNDED EQ 1)
         BRAS  R14,ZC_RND_F
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE G R0,R2
.*
     AENTRY SFT_RND_G
       :&SFT SETA &PQ-(&PDD-&PDR)
       AIF   (&SFT GT 0)
         LARL  R15,=FL8'1E&SFT'
         MSG   1,0(R15)
       AELSEIF (&SFT LT 0)
         LARL  R15,=FL8'1E&SFT'
         MSG   2,0(R15)
       AEND
         DSGR    0,2
         AIF   (&ROUNDED EQ 1)
         BRAS  R14,ZC_RND_G
         AEND
     AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE P 
.*   DIVIDEND  = ZCVT_PWORK1(LDDP)
.*   DIVISOR   = ZCVT_PWORK2(LDRP)
.*   QUOTIENT  = ZCVT_PWORK4(LDDP)
.*   REMAINDER = ZCVT_PWORK4+LDDP(&LDRP) OR ZCVT_PWORK2 IF LDRP=16
.*
     AENTRY SFT_RND_P
       :&SFT SETA &PQ-(&PDD-&PDR)
       AIF   (&SFT GT 0)
         SRP   ZCVT_PWORK1(&LDDP),&SFT,0
       AEND
        AIF (&LDDP+&LDRP GT 16)
            ACALL DFP_DIVP       USE DFP LD IF TOO BIG
        AELSE
         ZAP   ZCVT_PWORK4(&LDDP+&LDRP),ZCVT_PWORK1(&LDDP)
         DP    ZCVT_PWORK4(&LDDP+&LDRP),ZCVT_PWORK2(&LDRP)
          AIF (&SFT LT 0)
           AIF   (&ROUNDED EQ 1)
         SRP   ZCVT_PWORK4(&LDDP),-&SFT,5      
                 AIF   (&LR GT 0)
         SRP   ZCVT_PWORK4+&LDDP.(&LDRP),-&SFT,5
                 AEND
           AELSE
         SRP   ZCVT_PWORK4(&LDDP),-&SFT,0      
               AIF   (&LR GT 0)
         SRP   ZCVT_PWORK4+&LDDP.(&LDRP),-&SFT,0
               AEND
           AEND
          AEND
        AEND
     AEND
.*
.* DIVIDE AND ROUND P USING DFP LD IF TOO BIG
.*
         AENTRY DFP_DIVP
       AIF   (&LDDP EQ 16)
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F0,R0
       AELSE
         ZAP   ZCVT_PWORK4,ZCVT_PWORK1(&LDDP)
         LMG   R0,R1,ZCVT_PWORK4
         CXSTR F0,R0
       AEND
       AIF   (&LDRP EQ 16)
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F1,R0
       AELSE
         ZAP   ZCVT_PWORK4,ZCVT_PWORK2(&LDRP)
         LMG   R0,R1,ZCVT_PWORK4
         CXSTR F1,R0
       AEND
         DXTR  F0,F0,F1
         L     R15,ZCVT_CVTLDTP
         BASR  R14,R15
         STMG  R0,R1,ZCVT_PWORK4                   PW4=QUOTIENT
       AIF ('&TR' NE '')
         ZAP   ZCVT_PWORK3,ZCVT_PWORK4        
         MP    ZCVT_PWORK3,ZAP,ZCVT_PWORK2(&LDRP)  PW3=QUOTIENT*DIVISOR
         ZAP   ZCVT_PWORK2,ZCVT_PWORK1(&LDDP)   
         SP    ZCVT_PWORK2,ZCVT_PWORK3             PW2=REMAINDER  
         :&LDRP SETA 16 USED BY STORE P TO STORE FULL ZCVT_PWORK4 QUO
         :&LDDP SETA 16 USED BY STORE P TO STORE FULL ZCVT_PWORK2 REM
       AEND
       AEND
.*
.* SHIFT, DIVIDE, AND ROUND TYPE Q R0-R1 BY R2-R3 > RM=R0-R1 Q=R2-R3
.*
     AENTRY SFT_RND_Q
       :&SFT SETA &PQ-(&PDD-&PDR)    SAVE DIVISOR
       AIF   (&SFT GT 0)
         STMG  R2,R3,ZCVT_WORKAREA
         LARL  R15,=FL16'1E&SFT'                           
         LMG   R2,R3,0(R15)
         L     R15,ZCVT_MPYQ128      MPY DIVIDEND 
         BASR  R14,R15
         LMG   R2,R3,ZCVT_WORKAREA   REST0RE DIVISOR
       AELSEIF (&SFT LT 0)
         STMG  R0,R1,ZCVT_WORKAREA   SAVE DIVIDEND
         LGR   R0,R2
         LGR   R1,R3
         LARL  R15,=FL16'1E&SFT'                           
         LMG   R2,R3,0(R15)
         L     R15,ZCVT_MPYQ128      MPY DIVISOR
         BASR  R14,R15
         LGR   R2,R0
         LGR   R3,R1
         LMG   R0,R1,ZCVT_WORKAREA   RESTORE DIVIDEND
       AEND
         L     R15,ZCVT_DIVQ128      DIVIDE SCALED DIVIDEND BY QUOTEINT
         BASR  R14,R15
         AIF   (&ROUNDED EQ 1)
         BRAS  R14,ZC_RND_G                             
         AEND
     AEND
         MEND
