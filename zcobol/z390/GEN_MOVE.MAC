         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 04/10/08 initial coding for Z390 MOVE    
.* 05/02/08 add moves for matching PIC_TYPE including literals
.* 10/07/08 ZSTRMAC
.* 01/21/09 add editing for numeric to X field with picture with z/9's
.* 02/25/09 RPI 1002 support PIC type I for INDEXED BY and USAGE INDEX                     
.* 02/25/09 RPI 1004 support PIC type 1,2,E,D,L                       
.* 02/27/09 RPI 1012 support ALL '?' literal using *'/' prefix        
.* 03/12/09 RPI 1004 support types 1-9,Q using ZC_CONV/PACK31/UNPK31                               
.* 04/28/09 RPI 1003 add support for &TMP_NAME/TYPE/LEN in ZCVT via -IX                            
.*********************************************************************
         GEN_MOVE &T_NAME,&T_IX,&S_NAME,&S_IX 
         COPY  ZC_WS
         AIF (&T_IX GT 0)
             :&N_TARGET SETC '&T_NAME'
             :&L_TARGET SETA  &SYM_LEN(&T_IX)
             :&S_TARGET SETB  &SYM_PIC_SIGN(&T_IX)
             :&T_TARGET SETC '&SYM_PIC_TYPE(&T_IX)'
         AELSEIF (&T_IX LT 0)
             :&N_TARGET SETC '&TMP_NAME(-&T_IX)'
             :&L_TARGET SETA  &TMP_LEN(-&T_IX)
             :&S_TARGET SETB  &TMP_SIGN(-&T_IX)
             :&T_TARGET SETC '&TMP_TYPE(-&T_IX)'
         AELSE
            MNOTE 8,'GEN_MOVE MISSING TARGET INDEX FOR &T_NAME'
            MEXIT
         AEND
         :&N_SOURCE SETC '&S_NAME'
         AIF (&S_IX GT 0)
             :&L_SOURCE SETA  &SYM_LEN(&S_IX)
             :&S_SOURCE SETB  &SYM_PIC_SIGN(&S_IX)
             :&T_SOURCE SETC '&SYM_PIC_TYPE(&S_IX)'
         AELSEIF (&S_IX LT 0)
             :&N_SOURCE SETC '&TMP_NAME(-&S_IX)'
             :&L_SOURCE SETA  &TMP_LEN(-&S_IX)
             :&S_SOURCE SETB  &TMP_SIGN(-&S_IX)
             :&T_SOURCE SETC '&TMP_TYPE(-&S_IX)'
         AEND
         :&LIT   SETC '&N_SOURCE'
         :&PAD_OFF SETC ''
         AIF   (&L_TARGET LE 256)     
               ACALL MOVE_LE_256
         AELSE
               ACALL MOVE_GT_256
         AEND
         MEXIT
.*
.* MOVE LE 256
.* 
         AENTRY MOVE_LE_256
         AIF   (&S_IX NE 0)
               AIF  ('&T_TARGET' EQ '&T_SOURCE')
                    AIF   (&L_TARGET LE &L_SOURCE)   
                          AIF (&T_IX LT 0)
         MVC   &N_TARGET.(&L_TARGET),&N_SOURCE
                          AELSE
         MVC   &N_TARGET,&N_SOURCE
                          AEND
                          AIF  (&L_TARGET LT &L_SOURCE AND &ZC_WARN)
                               MNOTE 4,'GEN_MOVE SOURCE TRUNCATED TO TAX
               RGET &L_SOURCE > &L_TARGET'
                               MEXIT         
                          AEND
                    AELSE
                          AIF  ('&T_TARGET' NE 'X'                     X
                                AND '&T_TARGET' NE 'C')
                               MNOTE 8,'GEN_MOVE WITH PADDING ONLY FOR X
                X OR C'            
                               MEXIT
                          AEND
         MVC   &N_TARGET.(&L_SOURCE),&N_SOURCE
         MVI   &N_TARGET+&L_SOURCE,C' '
                          :&LPAD SETA  &L_TARGET-&L_SOURCE-1
                          AIF (&LPAD GT 0)
         MVC   &N_TARGET+&L_SOURCE+1(&LPAD).(&LPAD),&N_TARGET+&L_SOURCE
                          AEND
                    AEND
               AELSE
                    ACALL MOVE_CONVERT
               AEND
         AELSE
.*
.* MOVE LIT LE 256
.* 
               AIF   ('&LIT'(1,1) EQ '''')                 
                     AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,C&LIT
                     AELSE
                         :&LLIT SETA  (&L_TARGET+1)/2*2
         LARL  R1,=CL&LLIT&LIT
                         :&LITREF SETC '0(R1)'
                         ACALL MVC_LIT
                     AEND
               AELSEIF ('&LIT'(1,2) EQ 'X''')
                     AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,&LIT
                     AELSE
                         :&LLIT SETA  (&L_TARGET+1)/2*2
                         :&HEX  SETC '&LIT'(3,K'&LIT-3)
         LARL  R1,=XL&LLIT'&HEX'
                         AIF (&LLIT EQ &L_TARGET)
                              :&LITREF SETC '0(R1)'
                              ACALL MVC_LIT
                         AELSE
                              :&LITREF SETC '1(R1)'
                              ACALL MVC_LIT
                         AEND
                     AEND
               AELSEIF ('&LIT'(1,1) EQ '*')  ALL LIT RPI 1012
                     :&LIT SETC '&LIT'(2,*)
                     ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,C&LIT
                     ACALL PAD_TARGET
               AELSE
                    AIF  ('&LIT'(1,1) GE '0'                           X
                         OR '&LIT'(1,1) EQ '+'                         X
                         OR '&LIT'(1,1) EQ '-'                         X
                         OR '&LIT'(1,1) EQ '(')
                         :&NUM SETC '&LIT'
                         ACALL MOVE_NUM_LIT
                    AELSEIF  ('&LIT' EQ 'ZERO'                         X
                         OR '&LIT' EQ 'ZEROS'                          X
                         OR '&LIT' EQ 'ZEROES')                          
                         :&NUM SETC '0'
                         ACALL MOVE_NUM_LIT
                    AELSEIF ('&LIT' EQ 'SPACES'                        X
                         OR '&LIT' EQ 'SPACE')
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,C' '
                         ACALL PAD_TARGET
                    AELSEIF ('&LIT' EQ 'LOW_VALUES'                    X
                         OR '&LIT' EQ 'LOW_VALUE')
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,X'00'
                         ACALL PAD_TARGET
                    AELSEIF ('&LIT' EQ 'HIGH_VALUES'                   X
                         OR '&LIT' EQ 'HIGH_VALUE')
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,X'FF'
                         ACALL PAD_TARGET
                    AELSE
                         MNOTE 8,'GEN_MOVE UNKNOWN LIT - &LIT'
                    AEND
               AEND
         AEND
         AEND
.*
.* MVC LIT
.*
         AENTRY MVC_LIT
               AIF (&T_IX LT 0)
         MVC   &N_TARGET.(&L_SOURCE),&LITREF
               AELSE
         MVC   &N_TARGET,&LITREF
               AEND
         AEND
.*
.* MOVE NUMERIC LIT LT 256 (NUM SET TO LIT OR 0)
.*
      AENTRY MOVE_NUM_LIT
      ACASE (C2A('&T_TARGET'))
      AWHEN C'A',C'I'               RPI 1002
         LARL  R1,=A(&NUM)
         MVC   &N_TARGET,0(R1)
      AWHEN C'1'
         LARL  R1,=EH'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'2'
         LARL  R1,=DH'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'3'
         LARL  R1,=LH'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'4'
         LARL  R1,=EB'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'5'
         LARL  R1,=DB'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'6'
         LARL  R1,=LB'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'7'
         LARL  R1,=ED'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'8'
         LARL  R1,=DD'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'9'
         LARL  R1,=LD'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'F'
        AIF   (K'&NUM LE 4)
              ACALL RESET_SS1_TARGET
         MVHI  &N_TARGET,&NUM
        AELSE
         LARL  R1,=&T_TARGET'&NUM'
         MVC   &N_TARGET,0(R1)
        AEND
      AWHEN C'G'
        AIF   (K'&NUM LE 4)
         MVGHI &N_TARGET,&NUM
        AELSE
         LARL  R1,=FL8'&NUM'
         MVC   &N_TARGET,0(R1)
        AEND
      AWHEN C'H'
              ACALL RESET_SS1_TARGET
         MVHHI &N_TARGET,&NUM
      AWHEN C'P'
         :&LLIT SETA  (&L_TARGET+1)/2*2 ROUND EVEN FOR LARL
         LARL  R1,=PL&LLIT'&NUM'
       AIF   (&LLIT GT &L_TARGET)
         MVC   &N_TARGET,1(R1)
       AELSE  
         MVC   &N_TARGET,0(R1)
       AEND
      AWHEN C'Q'
         LARL  R1,=FL16'&NUM'
         MVC   &N_TARGET,0(R1)
      AWHEN C'Z'
               AIF  (NOT &S_TARGET)
                    AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &N_TARGET,C'&NUM'
                    AELSE
                        :&LLIT SETA  (&L_TARGET+1)/2*2
                        :&ZPAD SETC (&L_TARGET-K'&NUM)'0'
         LARL  R1,=CL&LLIT'&ZPAD&NUM'
         MVC   &N_TARGET,0(R1)
                    AEND
               AELSE
                    :&LLIT SETA  (&L_TARGET+1)/2*2
         LARL  R1,=ZL&LLIT'&NUM'
                    AIF (&LLIT NE &L_TARGET)
         MVC   &N_TARGET,1(R1)
                    AELSE
         MVC   &N_TARGET,0(R1)
                    AEND
               AEND
      AELSE
         MNOTE 8,'GEN_MOVE NUMERIC LITERAL FOR CHARACTER FIELD'
      AEND
      AEND
.*
.* MOVE GT 256
.*
       AENTRY MOVE_GT_256
         LA    R0,&N_TARGET
         LHI   R1,&L_TARGET
       AIF   (&S_IX NE 0)          
         LA    R2,&N_SOURCE
         LHI   R3,&L_SOURCE
       AELSE     
.*
.* MOVE LIT GT 256
.* 
               AIF   ('&LIT'(1,1) NE '''')   
                    AIF ('&LIT' EQ 'SPACES'                            X
                         OR '&LIT' EQ 'SPACE')
         IILL   R3,0 FILL WITH PAD SPACES
         IILH   R3,X'4000'
                    AELSEIF ('&LIT' EQ 'LOW-VALUES'                    X
                         OR '&LIT' EQ 'LOW-VALUE')
         LHI   R3,0 FILL WITH LOW VALUES
                    AELSEIF ('&LIT' EQ 'HIGH-VALUES'                   X
                         OR '&LIT' EQ 'HIGH-VALUE')
         IILL  R3,0 FILL WITH HIGH VALUES
         IILH  R3,X'FF00'
                    AELSE
                         MNOTE 8,'GEN_MOVE UNDEFINED SOURCE &LIT'
                    AEND
               AELSE
                    :&LLIT SETA (K'&LIT-1)/2*2
         LARL  R2,=CL&LLIT&LIT
                   :&LLIT    SETA  K'&LIT-2
         IILL  R3,&LLIT
         IILH  R3,X'4000'
               AEND
       AEND
         MVCL  R0,R2
         AEND
.*
.* MOVE_CONVERT LE 256
.*
         AENTRY MOVE_CONVERT
         ACASE (C2A('&T_TARGET'))
         AWHEN C'A'
         LA    R0,&N_SOURCE
         ST    R0,&N_TARGET
         AWHEN C'1'
               ACALL CVT_TO_EH
         AWHEN C'2'
               ACALL CVT_TO_DH
         AWHEN C'3'
               ACALL CVT_TO_LH
         AWHEN C'4'
               ACALL CVT_TO_EB
         AWHEN C'5'
               ACALL CVT_TO_DB
         AWHEN C'6'
               ACALL CVT_TO_LB
         AWHEN C'7'
               ACALL CVT_TO_ED
         AWHEN C'8'
               ACALL CVT_TO_DD
         AWHEN C'9'
               ACALL CVT_TO_LD
         AWHEN C'F'
               ACALL CVT_TO_F
         AWHEN C'G'
               ACALL CVT_TO_G
         AWHEN C'H'
               ACALL CVT_TO_H
         AWHEN C'P'
               ACALL CVT_TO_P
         AWHEN C'Q'
               ACALL CVT_TO_Q
         AWHEN C'X'
               ACALL CVT_TO_X
         AWHEN C'Z'
               ACALL CVT_TO_Z
         AEND
         AEND
.*
.* CVT TO EH
.* 
         AENTRY CVT_TO_EH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
               AWHEN C'2'
         LD    0,&N_SOURCE
         LEDR  0,0
               AWHEN C'3'
         ZC_CONV EH,LH,&N_SOURCE
               AWHEN C'4'
         ZC_CONV EH,EB,&N_SOURCE
               AWHEN C'5'
         ZC_CONV EH,DB,&N_SOURCE
               AWHEN C'6'
         ZC_CONV EH,LB,&N_SOURCE
               AWHEN C'7'
         ZC_CONV EH,ED,&N_SOURCE
               AWHEN C'8'
         ZC_CONV EH,DD,&N_SOURCE
               AWHEN C'9'
         ZC_CONV EH,LD,&N_SOURCE
               AWHEN C'A',C'F'
         L     0,&N_SOURCE
         CEFR  0,0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CEGR  0,0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CEFR  0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
         CEFR  0,0
               AWHEN C'Q'
         ZC_CONV EH,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV EH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&N_TARGET
         AEND
.*
.* CVT TO DH
.*
         AENTRY CVT_TO_DH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LDE   0,&N_SOURCE
               AWHEN C'2'
         LD    0,&N_SOURCE
               AWHEN C'3'
         ZC_CONV DH,LH,&N_SOURCE
               AWHEN C'4'
         ZC_CONV DH,EB,&N_SOURCE
               AWHEN C'5'
         ZC_CONV DH,DB,&N_SOURCE
               AWHEN C'6'
         ZC_CONV DH,LB,&N_SOURCE
               AWHEN C'7'
         ZC_CONV DH,ED,&N_SOURCE
               AWHEN C'8'
         ZC_CONV DH,DD,&N_SOURCE
               AWHEN C'9'
         ZC_CONV DH,LD,&N_SOURCE
               AWHEN C'A',C'F',C'I'
         L     0,&N_SOURCE
         CDFR  0,0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CDGR  0,0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CDFR  0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
         CDFR  F0,R0
                    AELSE
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0      CVT PL16 TO LD
         ZC_CONV DH,LD    VBY LD   TO DH
                    AEND
               AWHEN C'Q'
         ZC_CONV DH,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&N_TARGET
         AEND
.*
.* CVT TO LH
.* 
         AENTRY CVT_TO_LH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         LXER  0,0
               AWHEN C'2'
         LD    0,&N_SOURCE
         LXDR  0,0
               AWHEN C'3'
         LD    0,&N_SOURCE
         LD    2,8+&N_SOURCE
               AWHEN C'4'
         ZC_CONV LH,EB,&N_SOURCE
               AWHEN C'5'
         ZC_CONV LH,DB,&N_SOURCE
               AWHEN C'6'
         ZC_CONV LH,LB,&N_SOURCE
               AWHEN C'7'
         ZC_CONV LH,ED,&N_SOURCE
               AWHEN C'8'
         ZC_CONV LH,DD,&N_SOURCE
               AWHEN C'9'
         ZC_CONV LH,LD,&N_SOURCE
               AWHEN C'A',C'F'
         L     0,&N_SOURCE
         CXFR  0,0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CXGR  0,0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CXFR  0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
         CXFR  F0,R0
                    AELSE
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0      CVT PL16 TO LD
         ZC_CONV LH,LD    VBY LD   TO DH
                    AEND
               AWHEN C'Q'
         ZC_CONV LH,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   0,&N_TARGET
         STD   2,8+&N_TARGET
         AEND
.*
.* CVT TO EB
.* 
         AENTRY CVT_TO_EB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV EB,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV EB,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV EB,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV EB,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV EB,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV EB,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV EB,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV EB,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV EB,LD,&N_SOURCE
               AWHEN C'A',C'F'
         L     0,&N_SOURCE
         CEFBR 0,0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CEGBR 0,0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CEFBR 0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
         CEFBR 0,0
                    AELSE
         ZAP   ZCVT_PWORK1,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
                 ZC_CONV EB,LD
                    AEND
               AWHEN C'Q'
                 ZC_CONV EB,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV EB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&N_TARGET
         AEND
.*
.* CVT TO DB               
.*
         AENTRY CVT_TO_DB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV DB,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV DB,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV DB,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV DB,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV DB,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV DB,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV DB,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV DB,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV DB,LD,&N_SOURCE
               AWHEN C'A',C'F',C'I'
         L     0,&N_SOURCE
         CDFBR 0,0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CDGBR 0,0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CDFBR 0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
         ZC_CONV DB,LD                       
               AWHEN C'Q'
         ZC_CONV DB,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&N_TARGET
         AEND
.*
.* CVT TO LB
.* 
         AENTRY CVT_TO_LB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV LB,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV LB,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV LB,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV LB,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV LB,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV LB,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV LB,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV LB,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV LB,LD,&N_SOURCE
               AWHEN C'A',C'F'
         L     0,&N_SOURCE
         CXFBR F0,R0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CXGBR F0,R0
               AWHEN C'H'
         LH    0,&N_SOURCE
         CXFBR F0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
               AWHEN C'Q'
                 ZC_CONV LB,Q,&N_SOURCE
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   F0,&N_TARGET
         STD   F2,8+&N_TARGET
         AEND
.*
.* CVT TO ED
.* 
         AENTRY CVT_TO_ED
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV ED,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV ED,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV ED,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV ED,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV ED,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV ED,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV ED,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV ED,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV ED,LD,&N_SOURCE
               AWHEN C'A',C'F'
         LGF   R0,&N_SOURCE
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'G'
         LG    0,&N_SOURCE
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'H'
         LGH   R0,&N_SOURCE
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
               AWHEN C'Q'
                 ZC_CONV ED,Q,&N_SOURCE
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&N_TARGET
         AEND
.*
.* CVT TO DD
.*
         AENTRY CVT_TO_DD
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV DD,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV DD,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV DD,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV DD,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV DD,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV DD,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV DD,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV DD,LD,&N_SOURCE
               AWHEN C'A',C'F',C'I'
         LGF   0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&N_SOURCE
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0                       
                 ZC_CONV DD,LD                      
               AWHEN C'Q'
                 ZC_CONV DD,Q,&N_SOURCE
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&N_TARGET
         AEND
.*
.* CVT TO LD
.* 
         AENTRY CVT_TO_LD
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV LD,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV LD,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV LD,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV LD,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV LD,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV LD,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV LD,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV LD,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV LD,LD,&N_SOURCE
               AWHEN C'A',C'F'
         LGF   0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'G'
         LG    0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'H'
         LGH   0,&N_SOURCE
         CXGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&N_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0                         
               AWHEN C'Q'
                 ZC_CONV LD,Q,&N_SOURCE
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   0,&N_TARGET
         STD   2,8+&N_TARGET
         AEND
.*
.* CVT TO F
.*
         AENTRY CVT_TO_F
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CFER  0,0
               AWHEN C'2'
         LD    0,&N_SOURCE
         CFDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&N_SOURCE
         LR    0,1  IGNORE HIGH BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'A',C'F',C'I'
         L     0,&N_SOURCE
               AWHEN C'G'
         LG    0,&N_SOURCE
               AWHEN C'H'
         LH    0,&N_SOURCE
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
               AWHEN C'Q'
         L     0,12+&N_SOURCE+12 IGNORE HIGH 96 BITS
               AWHEN C'Z'
         ZC_PACK31 ZCVT_PWORK,8,&N_SOURCE,&L_SOURCE   
         CVB   0,ZCVT_PWORK                          
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         ST    0,&N_TARGET     IGNORE HIGH BITS
         AEND
.*
.* CVT TO G
.*
         AENTRY CVT_TO_G
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CGER  0,0
               AWHEN C'2'
         LD    0,&N_SOURCE
         CGDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&N_SOURCE
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'A',C'F'
         LGF   0,&N_SOURCE
               AWHEN C'H'
         LGH   0,&N_SOURCE
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&N_SOURCE
         CVBG  0,ZCVT_PWORK1
               AWHEN C'Q'
         LG    0,8+&N_SOURCE    IGNORE HIGH 64 BITS
               AWHEN C'Z'
         ZC_PACK31  ZCVT_PWORK1,16,&N_SOURCE,&L_SOURCE
         CVBG  0,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STG   0,&N_TARGET
         AEND
.*
.* GVT TO H
.* 
         AENTRY CVT_TO_H
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CFER  0,0
               AWHEN C'2'
         LD    0,&N_SOURCE
         CFDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&N_SOURCE
         LR    0,1  IGNORE HIGH BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&N_SOURCE
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'A',C'F'
         L     0,&N_SOURCE
               AWHEN C'G'
         LG    0,&N_SOURCE
               AWHEN C'H'
         LH    0,&N_SOURCE
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&N_SOURCE
         CVB   0,ZCVT_PWORK
               AWHEN C'Q'
         LH    0,14+&N_SOURCE IGNORE 112 BITS
               AWHEN C'Z'
         ZC_PACK31  ZCVT_PWORK,8,&N_SOURCE,&L_SOURCE IGNORE HIGH DIG
         CVB   0,ZCVT_PWORK  
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STH   0,&N_TARGET
         AEND
.*
.* CVT TO P
.*
         AENTRY CVT_TO_P
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CFER  0,0
         CVD   0,ZCVT_PWORK
         ZAP   &N_TARGET,ZCVT_PWORK
               AWHEN C'2'
         LD    0,&N_SOURCE
         CGDR  0,0
         CVDG  0,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'3'
                 ZC_CONV P,LH,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'4'
                 ZC_CONV P,EB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'5'
                 ZC_CONV P,DB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'6'
                 ZC_CONV P,LB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'7'
                 ZC_CONV P,ED,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'8'
                 ZC_CONV P,DD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'9'
                 ZC_CONV P,LD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'A',C'F',C'I'
         L     0,&N_SOURCE
         CVD   0,ZCVT_PWORK
         ZAP   &N_TARGET,ZCVT_PWORK
               AWHEN C'G'
         LG    0,&N_SOURCE
         CVDG  0,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'H'
         LH    0,&N_SOURCE
         CVD   0,ZCVT_PWORK
         ZAP   &N_TARGET,ZCVT_PWORK
               AWHEN C'P'
         ZAP   &N_TARGET,&N_SOURCE
               AWHEN C'Q'
                ZC_CONV P,Q,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &N_TARGET,ZCVT_PWORK2
               AWHEN C'Z'
                  :&PLEN2 SETA &L_SOURCE/2+1
                  ZC_PACK31  ZCVT_PWORK2,&PLEN2,&N_SOURCE,&L_SOURCE
         ZAP   &N_TARGET,ZCVT_PWORK2(&PLEN2)
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         AEND
.*
.* CVT TO Q
.*
         AENTRY CVT_TO_Q
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&N_SOURCE
               AWHEN C'2'
                 ZC_CONV Q,DH,&N_SOURCE
               AWHEN C'3'
                 ZC_CONV Q,LH,&N_SOURCE
               AWHEN C'4'
                 ZC_CONV Q,EB,&N_SOURCE
               AWHEN C'5'
                 ZC_CONV Q,DB,&N_SOURCE
               AWHEN C'6'
                 ZC_CONV Q,LB,&N_SOURCE
               AWHEN C'7'
                 ZC_CONV Q,ED,&N_SOURCE
               AWHEN C'8'
                 ZC_CONV Q,DD,&N_SOURCE
               AWHEN C'9'
                 ZC_CONV Q,LD,&N_SOURCE
               AWHEN C'F',C'A',C'I'
         LGF   R1,&N_SOURCE
         LGR   R0,R1
         SRAG  R0,R0,63
               AWHEN C'G'
         LG    R1,&N_SOURCE
         LGR   R0,R1
         SRAG  R0,R0,63
               AWHEN C'H'
         LGH   R1,&N_SOURCE
         LGR   R0,R1
         SRAG  R0,R0,63
               AWHEN C'P'
                 ZC_CONV Q,P,&N_SOURCE
               AWHEN C'Q'
         LMG   R0,R1,&N_SOURCE    IGNORE HIGH 64 BITS
               AWHEN C'Z'
                 ZC_PACK31  ZCVT_PWORK2,16,&N_SOURCE,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV Q,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STMG  R0,R1,&N_TARGET
         AEND
.*
.* CVT TO X
.*
         AENTRY CVT_TO_X
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CFER  0,0
         CVD   0,ZCVT_PWORK
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK,8
               AWHEN C'2'
         LD    0,&N_SOURCE
         CFDR  0,0
         CVD   0,ZCVT_PWORK
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK,8
               AWHEN C'3'
                 ZC_CONV P,LH,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'4'
                 ZC_CONV P,EB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'5'
                 ZC_CONV P,DB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'6'
                 ZC_CONV P,LB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'7'
                 ZC_CONV P,ED,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'8'
                 ZC_CONV P,DD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'9'
                 ZC_CONV P,LD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK2,16
               AWHEN C'A',C'F'
                     :&PLEN SETA &L_TARGET/2+1
                     :&POFF SETA 8-&PLEN
         L     0,&N_SOURCE
         CVD   0,ZCVT_PWORK
                     GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK,8
               AWHEN C'H'
                     :&PLEN SETA &L_TARGET/2+1
                     :&POFF SETA 8-&PLEN
         LH    0,&N_SOURCE
         CVD   0,ZCVT_PWORK
                     GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK,8
               AWHEN C'P'
                     GEN_EDIT &N_TARGET,&T_IX,&N_SOURCE,&L_SOURCE
               AWHEN C'X'
         MVC   &N_TARGET,&N_SOURCE
                     AIF   (&L_TARGET GT &L_SOURCE)
                           ACALL RESET_SS1_TARGET
         MVI   &N_TARGET+&L_SOURCE,C' '
                           AIF (&L_TARGET GT &L_SOURCE+1)
                               AIF ('&N_TARGET'(1,1) LT '0')
         MVC   &N_TARGET+&L_SOURCE+1(&L_TARGET-&L_SOURCE-1),&N_TARGET+&X
               L_SOURCE
                               AELSE
         MVC   &FIELD_OFF+&L_SOURCE+1(&L_TARGET-&L_SOURCE-1,&FIELD_REG)X
               ,&FIELD_OFF+&L_SOURCE.(&FIELD_REG)
                               AEND
                           AEND
                     AEND
               AWHEN C'Z'
                     :&PLEN SETA &L_SOURCE/2+1
                     AIF   (&PLEN LE 8)
                        ZC_PACK31 ZCVT_PWORK,8,&N_SOURCE,&L_SOURCE
                        GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK,8
                     AELSE
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&N_SOURCE,&L_SOURCE
                     GEN_EDIT &N_TARGET,&T_IX,ZCVT_PWORK1,&PLEN
                     AEND
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         AEND
.*
.* CVT TO Z
.*
         AENTRY CVT_TO_Z
               :&ST SETB &S_TARGET
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&N_SOURCE
         CFER  0,0
         CVD   0,ZCVT_PWORK
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'2'
         LD    0,&N_SOURCE
         CGDR  0,0
         CVDG  0,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'3'
                 ZC_CONV P,LH,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'4'
                 ZC_CONV P,EB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'5'
                 ZC_CONV P,DB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'6'
                 ZC_CONV P,LB,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'7'
                 ZC_CONV P,ED,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'8'
                 ZC_CONV P,DD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'9'
                 ZC_CONV P,LD,&N_SOURCE
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'A',C'F',C'I'
         L     0,&N_SOURCE
         CVD   0,ZCVT_PWORK  
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'G'
         LG    0,&N_SOURCE
         CVDG  0,ZCVT_PWORK2 
                 ZC_UNPK31 &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'H'
         LH    0,&N_SOURCE
         CVD   0,ZCVT_PWORK
                 ZC_UNPK31  &N_TARGET,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'P'
         ZC_UNPK31  &N_TARGET,&L_TARGET,&ST,&N_SOURCE,&L_SOURCE
               AWHEN C'X',C'Z'
                     AIF   (&L_TARGET EQ &L_SOURCE)
         MVC   &N_TARGET,&N_SOURCE
                     AELSEIF (&L_TARGET LT &L_SOURCE)
         MVC   &N_TARGET,&N_SOURCE+(&L_SOURCE-&L_TARGET) SKP HDIG
                     AELSE
                           ACALL RESET_SS1_TARGET SET TARGET_NAME AND I
                           :&LPAD SETA &L_TARGET-&L_SOURCE
         MVI   &N_TARGET,C'0' PAD WITH ZEROS ON LEFT
                           AIF ('&N_TARGET'(1,1) LT '0')
                               AIF (&LPAD_GT 1)
         MVC   &N_TARGET+1(&LPAD-1),&N_TARGET
                               AEND
         MVC   &N_TARGET+&LPAD.(&L_SOURCE),&N_SOURCE 
                           AELSE
                               AIF  (&LPAD GT 1)
         MVC   &FIELD_OFF+1(&LPAD-1,&FIELD_REG),&FIELD_OFF.(&FIELD_REG)
                               AEND
         MVC   &FIELD_OFF+&LPAD.(&L_SOURCE,&FIELD_REG),&N_SOURCE
                           AEND
                     AEND 
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         AEND 
.*
.* RESET SS1 TARGET - REMOVE LEN FROM OFF(LEN,REG) IF FOUND
.*
         AENTRY RESET_SS1_TARGET
         AIF   ('&N_TARGET'(1,1) GE '0')  IS THIS O(L,R) 
               :&I SETA ('&N_TARGET' INDEX '(')
               AIF (&I GT 1)
                   :&FIELD_OFF SETA '&N_TARGET'(1,&I-1)
                   :&J SETA ('&N_TARGET' INDEX ',')
                   AIF (&J GT &I+1)
                       :&FIELD_LEN SETA '&N_TARGET'(&I+1,&J-1)
                       :&FIELD_REG SETC '&N_TARGET'(&J+1,K'&N_TARGET-&JX
               -1)
                       :&N_TARGET SETC '&N_TARGET'(1,&I).'&N_TARGET'(&JX
               +1,*)  O(R)
                   AELSE
                       MNOTE 8,'GEN_MOVE RESET_SS1_TARGET NOT FOUND'
                       MEXIT
                   AEND
               AEND
         AEND
         AEND
.*
.* PAD TARGET - USE OVERLAPPED MVC TO PAD TARGET FROM MVI
.*
         AENTRY PAD_TARGET
               AIF ('&N_TARGET'(1,1) LT '0')
                   AIF (&L_TARGET GT 1)
         MVC   &N_TARGET+1(L'&L_TARGET-1),&N_TARGET
                   AEND
               AELSE
                   AIF (&L_TARGET GT 1)
         MVC   &FIELD_OFF+1(&FIELD_LEN-1,&FIELD_REG),&FIELD_OFF.(&FIELDX
               _REG)
                   AEND
               AEND
         AEND
         MEND
