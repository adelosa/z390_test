         MACRO
.*********************************************************************
.* Copyright 2008 Automated Software Tools Corporation               *
.* This source code is part of z390 zCOBOL/assembler/emulator package*
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.* Date   - 04/07/08                                                 *
.*********************************************************************
.* 04/10/08 initial coding for Z390 MOVE    
.* 05/02/08 add moves for matching PIC_TYPE including literals
.* 10/07/08 ZSTRMAC
.* 01/21/09 add editing for numeric to X field with picture with z/9's
.* 02/25/09 RPI 1002 support PIC type I for INDEXED BY and USAGE INDEX                     
.* 02/25/09 RPI 1004 support PIC type 1,2,E,D,L                       
.* 02/27/09 RPI 1012 support ALL '?' literal using *'/' prefix        
.* 03/12/09 RPI 1004 support types 1-9,Q using ZC_CONV/PACK31/UNPK31                               
.*********************************************************************
         GEN_MOVE &T_NAME,&T_IX,&S_NAME,&S_IX 
         COPY  ZC_WS
         :&TARGET_NAME SETC '&T_NAME'
         :&SOURCE_NAME SETC '&S_NAME'
         :&TARGET SETA &T_IX
         :&SOURCE SETA &S_IX
         :&LIT    SETC '&SOURCE_NAME'
         AIF   (&TARGET EQ 0)
               MNOTE 8,'GEN_MOVE UNDEFINED TARGET - &TARGET'
               MEXIT
         AEND
         :&PAD_OFF SETC ''
         :&L_TARGET SETA  &SYM_LEN(&TARGET)
         :&T_TARGET SETC '&SYM_PIC_TYPE(&TARGET)'
         AIF   (&L_TARGET LE 256)     
               ACALL MOVE_LE_256
         AELSE
               ACALL MOVE_GT_256
         AEND
         MEXIT
.*
.* MOVE LE 256
.* 
         AENTRY MOVE_LE_256
         AIF   (&SOURCE NE 0)
               :&T_SOURCE SETC '&SYM_PIC_TYPE(&SOURCE)'
               :&L_SOURCE SETA  &SYM_LEN(&SOURCE)
               AIF  ('&T_TARGET' EQ '&T_SOURCE')
                    AIF   (&L_TARGET LE &L_SOURCE)   
         MVC   &TARGET_NAME,&SOURCE_NAME
                          AIF  (&L_TARGET LT &L_SOURCE AND &ZC_WARN)
                               MNOTE 4,'GEN_MOVE SOURCE TRUNCATED TO TAX
               RGET &L_SOURCE > &L_TARGET'
                               MEXIT         
                          AEND
                    AELSE
                          AIF  ('&T_TARGET' NE 'X'                     X
                                AND '&T_TARGET' NE 'C')
                               MNOTE 8,'GEN_MOVE WITH PADDING ONLY FOR X
                X OR C'            
                               MEXIT
                          AEND
         MVC   &TARGET_NAME.(&L_SOURCE),&SOURCE_NAME
         :&LPAD    SETA  &L_TARGET-&L_SOURCE
         :&LLIT    SETA  (&LPAD+1)/2*2 ROUND EVEN FOR LARL
         LARL  R1,=CL&LLIT' '  ROUND EVEN FOR LARL
         MVC   &TARGET_NAME+&L_SOURCE.(&LPAD),0(R1)
                    AEND
               AELSE
                    ACALL MOVE_CONVERT
               AEND
         AELSE
.*
.* MOVE LIT LE 256
.* 
               AIF   ('&LIT'(1,1) EQ '''')                 
                     AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,C&LIT
                     AELSE
         :&LLIT    SETA  (&L_TARGET+1)/2*2
         LARL  R1,=CL&LLIT&LIT
         MVC   &TARGET_NAME,0(R1)
                     AEND
               AELSEIF ('&LIT'(1,2) EQ 'X''')
                     AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,&LIT
                     AELSE
                         :&LLIT SETA  (&L_TARGET+1)/2*2
                         :&HEX  SETC '&LIT'(3,K'&LIT-3)
         LARL  R1,=XL&LLIT'&HEX'
                         AIF (&LLIT EQ &L_TARGET)
         MVC   &TARGET_NAME,0(R1)
                         AELSE
         MVC   &TARGET_NAME,1(R1)
                         AEND
                     AEND
               AELSEIF ('&LIT'(1,1) EQ '*')  ALL LIT RPI 1012
                     :&LIT SETC '&LIT'(2,*)
                     ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,C&LIT
                     ACALL PAD_TARGET
               AELSE
                    AIF  ('&LIT'(1,1) GE '0'                           X
                         OR '&LIT'(1,1) EQ '+'                         X
                         OR '&LIT'(1,1) EQ '-'                         X
                         OR '&LIT'(1,1) EQ '(')
                         :&NUM SETC '&LIT'
                         ACALL MOVE_NUM_LIT
                    AELSEIF  ('&LIT' EQ 'ZERO'                         X
                         OR '&LIT' EQ 'ZEROS'                          X
                         OR '&LIT' EQ 'ZEROES')                          
                         :&NUM SETC '0'
                         ACALL MOVE_NUM_LIT
                    AELSEIF ('&LIT' EQ 'SPACES'                        X
                         OR '&LIT' EQ 'SPACE')
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,C' '
                         ACALL PAD_TARGET
                    AELSEIF ('&LIT' EQ 'LOW_VALUES'                    X
                         OR '&LIT' EQ 'LOW_VALUE')
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,X'00'
                         ACALL PAD_TARGET
                    AELSEIF ('&LIT' EQ 'HIGH_VALUES'                   X
                         OR '&LIT' EQ 'HIGH_VALUE')
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,X'FF'
                         ACALL PAD_TARGET
                    AELSE
                         MNOTE 8,'GEN_MOVE UNKNOWN LIT - &LIT'
                    AEND
               AEND
         AEND
         AEND
.*
.* MOVE NUMERIC LIT LT 256 (NUM SET TO LIT OR 0)
.*
      AENTRY MOVE_NUM_LIT
      ACASE (C2A('&SYM_PIC_TYPE(&TARGET)'))
      AWHEN C'A',C'I'               RPI 1002
         LARL  R1,=A(&NUM)
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'1'
         LARL  R1,=EH'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'2'
         LARL  R1,=DH'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'3'
         LARL  R1,=LH'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'4'
         LARL  R1,=EB'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'5'
         LARL  R1,=DB'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'6'
         LARL  R1,=LB'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'7'
         LARL  R1,=ED'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'8'
         LARL  R1,=DD'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'9'
         LARL  R1,=LD'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'F'
        AIF   (K'&NUM LE 4)
              ACALL RESET_SS1_TARGET
         MVHI  &TARGET_NAME,&NUM
        AELSE
         LARL  R1,=&SYM_PIC_TYPE(&TARGET)'&NUM'
         MVC   &TARGET_NAME,0(R1)
        AEND
      AWHEN C'G'
        AIF   (K'&NUM LE 4)
         MVGHI &TARGET_NAME,&NUM
        AELSE
         LARL  R1,=FL8'&NUM'
         MVC   &TARGET_NAME,0(R1)
        AEND
      AWHEN C'H'
              ACALL RESET_SS1_TARGET
         MVHHI &TARGET_NAME,&NUM
      AWHEN C'P'
         :&LLIT SETA  (&SYM_LEN(&TARGET)+1)/2*2 ROUND EVEN FOR LARL
         LARL  R1,=PL&LLIT'&NUM'
       AIF   (&LLIT GT &SYM_LEN(&TARGET))
         MVC   &TARGET_NAME,1(R1)
       AELSE  
         MVC   &TARGET_NAME,0(R1)
       AEND
      AWHEN C'Q'
         LARL  R1,=FL16'&NUM'
         MVC   &TARGET_NAME,0(R1)
      AWHEN C'Z'
               AIF  (NOT &SYM_PIC_SIGN(&TARGET))
                    AIF (&L_TARGET EQ 1)
                         ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME,C'&NUM'
                    AELSE
                        :&LLIT SETA  (&SYM_LEN(&TARGET)+1)/2*2
                        :&ZPAD SETC (&SYM_LEN(&TARGET)-K'&NUM)'0'
         LARL  R1,=CL&LLIT'&ZPAD&NUM'
         MVC   &TARGET_NAME,0(R1)
                    AEND
               AELSE
                    :&LLIT SETA  (&SYM_LEN(&TARGET)+1)/2*2
         LARL  R1,=ZL&LLIT'&NUM'
                    AIF (&LLIT NE &SYM_LEN(&TARGET))
         MVC   &TARGET_NAME,1(R1)
                    AELSE
         MVC   &TARGET_NAME,0(R1)
                    AEND
               AEND
      AELSE
         MNOTE 8,'GEN_MOVE NUMERIC LITERAL FOR CHARACTER FIELD'
      AEND
      AEND
.*
.* MOVE GT 256
.*
       AENTRY MOVE_GT_256
         LA    R0,&TARGET_NAME
         LHI   R1,&L_TARGET
       AIF   (&SOURCE NE 0)          
         LA    R2,&SOURCE_NAME
         LHI   R3,&L_SOURCE
       AELSE     
.*
.* MOVE LIT GT 256
.* 
               AIF   ('&LIT'(1,1) NE '''')   
                    AIF ('&LIT' EQ 'SPACES'                            X
                         OR '&LIT' EQ 'SPACE')
         IILL   R3,0 FILL WITH PAD SPACES
         IILH   R3,X'4000'
                    AELSEIF ('&LIT' EQ 'LOW-VALUES'                    X
                         OR '&LIT' EQ 'LOW-VALUE')
         LHI   R3,0 FILL WITH LOW VALUES
                    AELSEIF ('&LIT' EQ 'HIGH-VALUES'                   X
                         OR '&LIT' EQ 'HIGH-VALUE')
         IILL  R3,0 FILL WITH HIGH VALUES
         IILH  R3,X'FF00'
                    AELSE
                         MNOTE 8,'GEN_MOVE UNDEFINED SOURCE &LIT'
                    AEND
               AELSE
                    :&LLIT SETA (K'&LIT-1)/2*2
         LARL  R2,=CL&LLIT&LIT
                   :&LLIT    SETA  K'&LIT-2
         IILL  R3,&LLIT
         IILH  R3,X'4000'
               AEND
       AEND
         MVCL  R0,R2
         AEND
.*
.* MOVE_CONVERT LE 256
.*
         AENTRY MOVE_CONVERT
         ACASE (C2A('&T_TARGET'))
         AWHEN C'A'
         LA    R0,&SOURCE_NAME
         ST    R0,&TARGET_NAME
         AWHEN C'1'
               ACALL CVT_TO_EH
         AWHEN C'2'
               ACALL CVT_TO_DH
         AWHEN C'3'
               ACALL CVT_TO_LH
         AWHEN C'4'
               ACALL CVT_TO_EB
         AWHEN C'5'
               ACALL CVT_TO_DB
         AWHEN C'6'
               ACALL CVT_TO_LB
         AWHEN C'7'
               ACALL CVT_TO_ED
         AWHEN C'8'
               ACALL CVT_TO_DD
         AWHEN C'9'
               ACALL CVT_TO_LD
         AWHEN C'F'
               ACALL CVT_TO_F
         AWHEN C'G'
               ACALL CVT_TO_G
         AWHEN C'H'
               ACALL CVT_TO_H
         AWHEN C'P'
               ACALL CVT_TO_P
         AWHEN C'Q'
               ACALL CVT_TO_Q
         AWHEN C'X'
               ACALL CVT_TO_X
         AWHEN C'Z'
               ACALL CVT_TO_Z
         AEND
         AEND
.*
.* CVT TO EH
.* 
         AENTRY CVT_TO_EH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         LEDR  0,0
               AWHEN C'3'
         ZC7_PFPO EH,LH,&SOURCE_NAME
               AWHEN C'4'
         ZC_CONV EH,EB,&SOURCE_NAME
               AWHEN C'5'
         ZC_CONV EH,DB,&SOURCE_NAME
               AWHEN C'6'
         ZC_CONV EH,LB,&SOURCE_NAME
               AWHEN C'7'
         ZC_CONV EH,ED,&SOURCE_NAME
               AWHEN C'8'
         ZC_CONV EH,DD,&SOURCE_NAME
               AWHEN C'9'
         ZC_CONV EH,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         L     0,&SOURCE_NAME
         CEFR  0,0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CEGR  0,0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CEFR  0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
         CEFR  0,0
               AWHEN C'Q'
         ZC_CONV EH,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV EH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&TARGET_NAME
         AEND
.*
.* CVT TO DH
.*
         AENTRY CVT_TO_DH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LDE   0,&SOURCE_NAME
               AWHEN C'2'
         LD    0,&SOURCE_NAME
               AWHEN C'3'
         ZC_CONV DH,LH,&SOURCE_NAME
               AWHEN C'4'
         ZC_CONV DH,EB,&SOURCE_NAME
               AWHEN C'5'
         ZC_CONV DH,DB,&SOURCE_NAME
               AWHEN C'6'
         ZC_CONV DH,LB,&SOURCE_NAME
               AWHEN C'7'
         ZC_CONV DH,ED,&SOURCE_NAME
               AWHEN C'8'
         ZC_CONV DH,DD,&SOURCE_NAME
               AWHEN C'9'
         ZC_CONV DH,LD,&SOURCE_NAME
               AWHEN C'A',C'F',C'I'
         L     0,&SOURCE_NAME
         CDFR  0,0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CDGR  0,0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CDFR  0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
         CDFR  F0,R0
                    AELSE
         ZAP   ZCVT_PWORK1,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0      CVT PL16 TO LD
         ZC_CONV DH,LD    VBY LD   TO DH
                    AEND
               AWHEN C'Q'
         ZC_CONV DH,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV DH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&TARGET_NAME
         AEND
.*
.* CVT TO LH
.* 
         AENTRY CVT_TO_LH
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         LXER  0,0
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         LXDR  0,0
               AWHEN C'3'
         LD    0,&SOURCE_NAME
         LD    2,8+&SOURCE_NAME
               AWHEN C'4'
         ZC_CONV LH,EB,&SOURCE_NAME
               AWHEN C'5'
         ZC_CONV LH,DB,&SOURCE_NAME
               AWHEN C'6'
         ZC_CONV LH,LB,&SOURCE_NAME
               AWHEN C'7'
         ZC_CONV LH,ED,&SOURCE_NAME
               AWHEN C'8'
         ZC_CONV LH,DD,&SOURCE_NAME
               AWHEN C'9'
         ZC_CONV LH,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         L     0,&SOURCE_NAME
         CXFR  0,0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CXGR  0,0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CXFR  0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
         CXFR  F0,R0
                    AELSE
         ZAP   ZCVT_PWORK1,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0      CVT PL16 TO LD
         ZC_CONV LH,LD    VBY LD   TO DH
                    AEND
               AWHEN C'Q'
         ZC_CONV LH,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV LH,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   0,&TARGET_NAME
         STD   2,8+&TARGET_NAME
         AEND
.*
.* CVT TO EB
.* 
         AENTRY CVT_TO_EB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV EB,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV EB,DH,&SOURCE_NAME
         LEDR  0,0
               AWHEN C'3'
                 ZC_CONV EB,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV EB,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV EB,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV EB,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV EB,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV EB,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV EB,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         L     0,&SOURCE_NAME
         CEFBR 0,0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CEGBR 0,0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CEFBR 0,0
               AWHEN C'P'
                    AIF (&L_SOURCE LE 8)
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
                    AELSE
         ZAP   ZCVT_PWORK1,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0
         ZC_CONV Q,LD
                    AEND
         CEFBR 0,0
               AWHEN C'Q'
                 ZC_CONV EB,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV EB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&TARGET_NAME
         AEND
.*
.* CVT TO DB               
.*
         AENTRY CVT_TO_DB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV DB,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV DB,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV DB,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV DB,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV DB,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV DB,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV DB,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV DB,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV DB,LD,&SOURCE_NAME
               AWHEN C'A',C'F',C'I'
         L     0,&SOURCE_NAME
         CDFBR 0,0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CDGBR 0,0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CDFBR 0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
         ZC_CONV DB,LD                       
               AWHEN C'Q'
         ZC_CONV DB,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV DB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&TARGET_NAME
         AEND
.*
.* CVT TO LB
.* 
         AENTRY CVT_TO_LB
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV LB,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV LB,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV LB,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV LB,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV LB,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV LB,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV LB,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV LB,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV LB,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         L     0,&SOURCE_NAME
         CXFBR F0,R0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CXGBR F0,R0
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CXFBR F0,0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV LB,LD
               AWHEN C'Q'
                 ZC_CONV LB,Q,&SOURCE_NAME
               AWHEN C'Z'
                    ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                    ZC_CONV LB,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   F0,&TARGET_NAME
         STD   F2,8+&TARGET_NAME
         AEND
.*
.* CVT TO ED
.* 
         AENTRY CVT_TO_ED
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV ED,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV ED,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV ED,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV ED,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV ED,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV ED,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV ED,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV ED,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV ED,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         LGF   R0,&SOURCE_NAME
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'H'
         LGH   R0,&SOURCE_NAME
         CDGTR F0,R0
         LEDTR F0,0,F0,0 
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
               AWHEN C'Q'
                 ZC_CONV ED,Q,&SOURCE_NAME
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV ED,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STE   0,&TARGET_NAME
         AEND
.*
.* CVT TO DD
.*
         AENTRY CVT_TO_DD
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV DD,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV DD,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV DD,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV DD,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV DD,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV DD,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV DD,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV DD,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV DD,LD,&SOURCE_NAME
               AWHEN C'A',C'F',C'I'
         LGF   0,&SOURCE_NAME
         CDGTR F0,R0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CDGTR F0,R0
               AWHEN C'H'
         LGH   R0,&SOURCE_NAME
         CDGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK1
         CXSTR F4,R0                       
                 ZC_CONV DD,LD                      
               AWHEN C'Q'
                 ZC_CONV DD,Q,&SOURCE_NAME
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV DD,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         STD   0,&TARGET_NAME
         AEND
.*
.* CVT TO LD
.* 
         AENTRY CVT_TO_LD
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV LD,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV LD,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV LD,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV LD,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV LD,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV LD,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV LD,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV LD,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV LD,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         LGF   0,&SOURCE_NAME
         CXGTR F0,R0
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CXGTR F0,R0
               AWHEN C'H'
         LGH   0,&SOURCE_NAME
         CXGTR F0,R0
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0                         
               AWHEN C'Q'
                 ZC_CONV LD,Q,&SOURCE_NAME
               AWHEN C'Z'
                 ZC_PACK31 ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F0,R0
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STD   0,&TARGET_NAME
         STD   2,8+&TARGET_NAME
         AEND
.*
.* CVT TO F
.*
         AENTRY CVT_TO_F
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CFER  0,0
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CFDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'A',C'F',C'I'
         L     0,&SOURCE_NAME
               AWHEN C'G'
         LG    0,&SOURCE_NAME
               AWHEN C'H'
         LH    0,&SOURCE_NAME
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
               AWHEN C'Q'
         L     0,12+&SOURCE_NAME+12 IGNORE HIGH 96 BITS
               AWHEN C'Z'
         ZC_PACK31 ZCVT_PWORK,8,&SOURCE_NAME,&L_SOURCE   
         CVB   0,ZCVT_PWORK                          
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         ST    0,&TARGET_NAME     IGNORE HIGH BITS
         AEND
.*
.* CVT TO G
.*
         AENTRY CVT_TO_G
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CGER  0,0
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CGDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&SOURCE_NAME
         LGR   0,1  IGNORE HIGH 64 BITS
               AWHEN C'A',C'F'
         LGF   0,&SOURCE_NAME
               AWHEN C'H'
         LGH   0,&SOURCE_NAME
               AWHEN C'P'
         ZAP   ZCVT_PWORK1,&SOURCE_NAME
         CVBG  0,ZCVT_PWORK1
               AWHEN C'Q'
         LG    0,8+&SOURCE_NAME    IGNORE HIGH 64 BITS
               AWHEN C'Z'
         ZC_PACK31  ZCVT_PWORK1,16,&SOURCE_NAME,&L_SOURCE
         CVBG  0,ZCVT_PWORK1
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STG   0,&TARGET_NAME
         AEND
.*
.* GVT TO H
.* 
         AENTRY CVT_TO_H
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CFER  0,0
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CFDR  0,0
               AWHEN C'3'
         ZC_CONV Q,LH,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'4'
         ZC_CONV Q,EB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH BITS
               AWHEN C'5'
         ZC_CONV Q,DB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'6'
         ZC_CONV Q,LB,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'7'
         ZC_CONV Q,ED,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'8'
         ZC_CONV Q,DD,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'9'
         ZC_CONV Q,LD,&SOURCE_NAME
         LR    0,1  IGNORE HIGH 96 BITS
               AWHEN C'A',C'F'
         L     0,&SOURCE_NAME
               AWHEN C'G'
         LG    0,&SOURCE_NAME
               AWHEN C'H'
         LH    0,&SOURCE_NAME
               AWHEN C'P'
         ZAP   ZCVT_PWORK,&SOURCE_NAME
         CVB   0,ZCVT_PWORK
               AWHEN C'Q'
         LH    0,14+&SOURCE_NAME IGNORE 112 BITS
               AWHEN C'Z'
         ZC_PACK31  ZCVT_PWORK,8,&SOURCE_NAME,&L_SOURCE IGNORE HIGH DIG
         CVB   0,ZCVT_PWORK  
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STH   0,&TARGET_NAME
         AEND
.*
.* CVT TO P
.*
         AENTRY CVT_TO_P
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CFER  0,0
         CVD   0,ZCVT_PWORK
         ZAP   &TARGET_NAME,ZCVT_PWORK
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CGDR  0,0
         CVDG  0,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'3'
                 ZC_CONV P,LH,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'4'
                 ZC_CONV P,EB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'5'
                 ZC_CONV P,DB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'6'
                 ZC_CONV P,LB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'7'
                 ZC_CONV P,ED,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'8'
                 ZC_CONV P,DD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'9'
                 ZC_CONV P,LD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'A',C'F',C'I'
         L     0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK
         ZAP   &TARGET_NAME,ZCVT_PWORK
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CVDG  0,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK
         ZAP   &TARGET_NAME,ZCVT_PWORK
               AWHEN C'P'
         ZAP   &TARGET_NAME,&SOURCE_NAME
               AWHEN C'Q'
                ZC_CONV P,Q,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
         ZAP   &TARGET_NAME,ZCVT_PWORK2
               AWHEN C'Z'
                  :&PLEN2 SETA &L_SOURCE/2+1
                  ZC_PACK31  ZCVT_PWORK2,&PLEN2,&SOURCE_NAME,&L_SOURCE
         ZAP   &TARGET_NAME,ZCVT_PWORK2(&PLEN2)
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         AEND
.*
.* CVT TO Q
.*
         AENTRY CVT_TO_Q
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
                 ZC_CONV Q,EH,&SOURCE_NAME
               AWHEN C'2'
                 ZC_CONV Q,DH,&SOURCE_NAME
               AWHEN C'3'
                 ZC_CONV Q,LH,&SOURCE_NAME
               AWHEN C'4'
                 ZC_CONV Q,EB,&SOURCE_NAME
               AWHEN C'5'
                 ZC_CONV Q,DB,&SOURCE_NAME
               AWHEN C'6'
                 ZC_CONV Q,LB,&SOURCE_NAME
               AWHEN C'7'
                 ZC_CONV Q,ED,&SOURCE_NAME
               AWHEN C'8'
                 ZC_CONV Q,DD,&SOURCE_NAME
               AWHEN C'9'
                 ZC_CONV Q,LD,&SOURCE_NAME
               AWHEN C'A',C'F'
         SGR   R0,R0
         LGF   R1,&SOURCE_NAME
               AWHEN C'H'
         SGR   R0,R0
         LGH   R1,&SOURCE_NAME
               AWHEN C'P'
         ZAP   ZCVT_PWORK2,&SOURCE_NAME
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV Q,LD
               AWHEN C'Q'
         LMG   R0,R1,&SOURCE_NAME    IGNORE HIGH 64 BITS
               AWHEN C'Z'
                 ZC_PACK31  ZCVT_PWORK2,16,&SOURCE_NAME,&L_SOURCE
         LMG   R0,R1,ZCVT_PWORK2
         CXSTR F4,R0
                 ZC_CONV Q,LD
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND 
         STMG  R0,R1,&TARGET_NAME
         AEND
.*
.* CVT TO X
.*
         AENTRY CVT_TO_X
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CFER  0,0
         CVD   0,ZCVT_PWORK
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK,8
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CFDR  0,0
         CVD   0,ZCVT_PWORK
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK,8
               AWHEN C'3'
                 ZC_CONV P,LH,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'4'
                 ZC_CONV P,EB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'5'
                 ZC_CONV P,DB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'6'
                 ZC_CONV P,LB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'7'
                 ZC_CONV P,ED,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'8'
                 ZC_CONV P,DD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'9'
                 ZC_CONV P,LD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK2,16
               AWHEN C'A',C'F'
                     :&PLEN SETA &L_TARGET/2+1
                     :&POFF SETA 8-&PLEN
         L     0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK
                     GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK,8
               AWHEN C'H'
                     :&PLEN SETA &L_TARGET/2+1
                     :&POFF SETA 8-&PLEN
         LH    0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK
                     GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK,8
               AWHEN C'P'
                     GEN_EDIT &TARGET_NAME,&TARGET,&SOURCE_NAME,&L_SOURX
               CE
               AWHEN C'X'
         MVC   &TARGET_NAME,&SOURCE_NAME
                     AIF   (&L_TARGET GT &L_SOURCE)
                           ACALL RESET_SS1_TARGET
         MVI   &TARGET_NAME+&L_SOURCE,C' '
                           AIF (&L_TARGET GT &L_SOURCE+1)
                               AIF ('&TARGET_NAME'(1,1) LT '0')
         MVC   &TARGET_NAME+&L_SOURCE+1(&L_TARGET-&L_SOURCE-1),&TARGET_X
               NAME+&L_SOURCE
                               AELSE
         MVC   &FIELD_OFF+&L_SOURCE+1(&L_TARGET-&L_SOURCE-1,&FIELD_REG)X
               ,&FIELD_OFF+&L_SOURCE.(&FIELD_REG)
                               AEND
                           AEND
                     AEND
               AWHEN C'Z'
                     :&PLEN SETA &L_SOURCE/2+1
                     AIF   (&PLEN LE 8)
                        ZC_PACK31 ZCVT_PWORK,8,&SOURCE_NAME,&L_SOURCE
                        GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK,8
                     AELSE
                     ZC_PACK31 ZCVT_PWORK1,&PLEN,&SOURCE_NAME,&L_SOURCE
                     GEN_EDIT &TARGET_NAME,&TARGET,ZCVT_PWORK1,&PLEN
                     AEND
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         AEND
.*
.* CVT TO Z
.*
         AENTRY CVT_TO_Z
               :&ST SETB &SYM_PIC_SIGN(&TARGET)
               ACASE (C2A('&T_SOURCE'))
               AWHEN C'1'
         LE    0,&SOURCE_NAME
         CFER  0,0
         CVD   0,ZCVT_PWORK
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'2'
         LD    0,&SOURCE_NAME
         CGDR  0,0
         CVDG  0,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'3'
                 ZC_CONV P,LH,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'4'
                 ZC_CONV P,EB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'5'
                 ZC_CONV P,DB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'6'
                 ZC_CONV P,LB,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'7'
                 ZC_CONV P,ED,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'8'
                 ZC_CONV P,DD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'9'
                 ZC_CONV P,LD,&SOURCE_NAME
         STMG  R0,R1,ZCVT_PWORK2
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'A',C'F',C'I'
         L     0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK  
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'G'
         LG    0,&SOURCE_NAME
         CVDG  0,ZCVT_PWORK2 
                 ZC_UNPK31 &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK2,16
               AWHEN C'H'
         LH    0,&SOURCE_NAME
         CVD   0,ZCVT_PWORK
                 ZC_UNPK31  &TARGET_NAME,&L_TARGET,&ST,ZCVT_PWORK,8
               AWHEN C'P'
         ZC_UNPK31  &TARGET_NAME,&L_TARGET,&ST,&SOURCE_NAME,&L_SOURCE
               AWHEN C'X',C'Z'
                     AIF   (&L_TARGET EQ &L_SOURCE)
         MVC   &TARGET_NAME,&SOURCE_NAME
                     AELSEIF (&L_TARGET LT &L_SOURCE)
         MVC   &TARGET_NAME,&SOURCE_NAME+(&L_SOURCE-&L_TARGET) SKP HDIG
                     AELSE
                           ACALL RESET_SS1_TARGET SET TARGET_NAME AND I
                           :&LPAD SETA &L_TARGET-&L_SOURCE
         MVI   &TARGET_NAME,C'0' PAD WITH ZEROS ON LEFT
                           AIF ('&TARGET_NAME'(1,1) LT '0')
                               AIF (&LPAD_GT 1)
         MVC   &TARGET_NAME+1(&LPAD-1),&TARGET_NAME
                               AEND
         MVC   &TARGET_NAME+&LPAD.(&L_SOURCE),&SOURCE_NAME 
                           AELSE
                               AIF  (&LPAD GT 1)
         MVC   &FIELD_OFF+1(&LPAD-1,&FIELD_REG),&FIELD_OFF.(&FIELD_REG)
                               AEND
         MVC   &FIELD_OFF+&LPAD.(&L_SOURCE,&FIELD_REG),&SOURCE_NAME
                           AEND
                     AEND 
               AELSE
                    MNOTE 8,'GEN_MOVE CONVERSION NOT SUPPORTED YET'           
                    MEXIT
               AEND
         AEND 
.*
.* RESET SS1 TARGET - REMOVE LEN FROM OFF(LEN,REG) IF FOUND
.*
         AENTRY RESET_SS1_TARGET
         AIF   ('&TARGET_NAME'(1,1) GE '0')  IS THIS O(L,R) 
               :&I SETA ('&TARGET_NAME' INDEX '(')
               AIF (&I GT 1)
                   :&FIELD_OFF SETA '&TARGET_NAME'(1,&I-1)
                   :&J SETA ('&TARGET_NAME' INDEX ',')
                   AIF (&J GT &I+1)
                       :&FIELD_LEN SETA '&TARGET_NAME'(&I+1,&J-1)
                       :&FIELD_REG SETC '&TARGET_NAME'(&J+1,K'&TARGET_NX
               AME-&J-1)
                       :&TARGET_NAME SETC '&TARGET_NAME'(1,&I).'&TARGETX
               _NAME'(&J+1,*)  O(R)
                   AELSE
                       MNOTE 8,'GEN_MOVE RESET_SS1_TARGET NOT FOUND'
                       MEXIT
                   AEND
               AEND
         AEND
         AEND
.*
.* PAD TARGET - USE OVERLAPPED MVC TO PAD TARGET FROM MVI
.*
         AENTRY PAD_TARGET
               AIF ('&TARGET_NAME'(1,1) LT '0')
                   AIF (&SYM_LEN(&TARGET) GT 1)
         MVC   &TARGET_NAME+1(L'&SYM_LEN(&TARGET)-1),&TARGET_NAME
                   AEND
               AELSE
                   AIF (&SYM_LEN(&TARGET) GT 1)
         MVC   &FIELD_OFF+1(&FIELD_LEN-1,&FIELD_REG),&FIELD_OFF.(&FIELDX
               _REG)
                   AEND
               AEND
         AEND
         MEND
