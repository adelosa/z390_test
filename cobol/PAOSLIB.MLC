         TITLE 'PAOSLIB COBOL OS/390 SUPPORT ROUTINES'
*********************************************************************
* Copyright 2008 Automated Software Tools Corporation               *
* This source code is part of z390 assembler/emulator package       *
* The z390 package is distributed under GNU general public license  *
* Author - Don Higgins                                              *
* Date   - 03/22/08                                                 *
*********************************************************************
* INITIALIZE COBOL ENVIRONMENT IN ORDER TO EXECUTE
* SELECTED STATEMENT NUMBER RANGE USING Z390.  SET Z390 SYSPARM
* OPTION TO STATEMENT NUMBER RANGE SEPARAGED BY COBOL.    
*
* NOTES:
*********************************************************************
* 03/27/08 INITIAL CODING TO SUPPORT COBOL\PAOS\OSDEMO1.MLC               
*********************************************************************
*
* INITIALIZE AND START COBOL GENERATED PORTABLE ASSEMBLER PROGRAM EXEC
* AT LINE # STORED IN PACVTLST AND ENDING AT PACVTLED OR STOP RUN IF 0
*
PAINT    CSECT
         USING *,R15
         BALR  R2,0
         USING *,R2
         LR    R3,R1
         USING IHAPACVT,R3
*
* ALLOCATE AND INSERT DSA IN SAVE AREA CHAIN
*
         L     R1,PACVTLDS    R1  = LENGTH OF DSA REQUIRED 
         GETMAIN R,LV=(R1)    R1  = ADDR OF DSA
         ST    R13,4(R1)
         ST    R1,8(R13)
         LR    R13,R1
*
* SET R9=TGT WITH PTR TO FVT WITH CURRENTLY SUPPORTED FUNCTION CALLS 
*
         L     R9,=A(TGT)         
*
* SET R10 TO CONSTANT GLOBAL TABLE GENERATED FROM ASM SOURCE LISTING
*
         L     R10,PACVTCGT
*
* OVERLAY CODE AT ENDING LINE TO RETURN TO PAETRM
*
         ICM   R14,15,PACVTLED   R14 = ENDING COBOL LINE OR ZERO
         BZ    *+10              SKIP FORCING EXIT IF NO SYSPARM
         MVC   0(LCODE,R14),CODE FORCE EXIT AT ENDING LINE #
*
* BRANCH TO PROCEDURE CODE FOR STARTING LINE
* (NOTE THIS SKIPS THE ENTERPRISE COBOL GENERATED CODE AT START
* WHOSE ADDRESS WAS ORIGINALLY PLACED IN R14 PRIOR TO IGZCBSO.) 
*     
         L     R14,PACVTLST  SKIP EC START CODE AND GO TO LINE1
         BR    R14
         LTORG
CODE     DS    0H
         LRL   R15,AEXIT
         BR    R15
AEXIT    DC    A(PAETRM)    ISSUE STOP RUN AT ENDING LINE # 
LCODE    EQU   *-CODE
         DROP
         LTORG
         EQUREGS
*
* TGT TASK GLOBLA TABLE WITH FIELDS REQUIRED FOR SUPPORTED FUNCTIONS
*
TGT      CSECT
         ORG   TGT+92
         DC    A(FVT)  FUNCTION VECTOR TABLE
         ORG   TGT+296
         DC    A(BL1)  BLOCK WITH RETURN CODE
*
* BLOCK WITH RETURN-CODE
*
BL1     CSECT
        DS     XL8
        DS     H'0'  RETURN-CODE
*
* FUNCTION VECTOR TABLE
*
FVT      CSECT
         ORG   FVT+44
         DC    A(PACDSP)  DISPLAY FUNCTION (R1=A(LL BYTE + TEXT)
         ORG   FVT+548
         DC    A(PAETRM)  TERMINATE WITH RC FROM BL1
*
* DISPLAY TEXT 
*
PACDSP   CSECT
         USING *,R15
         USING CDSPPARM,R1
         LH   R3,CDSPOFF     R3  = OFFSET IN CGT
         LA   R3,0(R3,R10)   R3  = ADDR TEXT IN CGT
         SR   R4,R4
         IC   R4,CDSPLEN     R2  = LENGTH OF TEXT
         AHI  R4,-1
         EX   R4,WTOMVC      MOVE TEXT TO DISPLAY MSG
         AHI  R4,4+1
         STH  R4,WTOMSG      SET MSG LENGTH
         WTO  MF=(E,WTOMSG)  WTO DISPLAY MSG
         BR   R14
WTOMVC   MVC  WTOMSG+4(0),0(R3)
WTOMSG   DC   AL2(0,0),CL256' '
         LTORG
CDSPPARM DSECT                     SAMPLE 014000000B0800002400002F
CDSPRSV1 DS    XL4 (ID,FILL ???)          01400000
CDSPLEN  DS    X   LENGTH OF TEXT         0B
CDSPRSV2 DS    XL4 (???)                  08000024
CDSPOFF  DS    XL2 OFFSET TO TEXT IN CGT  002F
PACDSP   CSECT
*
* STOP RUN
*
PAETRM   CSECT
         USING  *,R15
         L      R15,=A(BL1)
         USING  IHABL1,R15
         LH     R15,BL1RC
         L      R13,4(R13)       RESTORE SYSTEM SAVE AREA FROM DSA
         RETURN (14,12),RC=(15)
         LTORG
*
* INCLUDE DSECTS USED BY PAOSINT AND PAOSLIB  
*
         COPY PAOSINT  
         END
