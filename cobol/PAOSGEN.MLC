         TITLE 'PAOSGEN REFORMAT COBOL FOR OS/390 TO Z390 ASSEMBLER'
*********************************************************************
* Copyright 2008 Automated Software Tools Corporation               *
* This source code is part of z390 assembler/emulator package       *
* The z390 package is distributed under GNU general public license  *
* Author - Don Higgins                                              *
* Date   - 03/22/08                                                 *
*********************************************************************
* SET DDNAME SYSUT1 TO INPUT IBM ENTERPRISE COBOL ASMLIST ASCII TEXT*
* SET DDNAME SYSUT2 TO OUTPUT Z390 MLC SOURCE ASSEMBLER FILE        *
* NOTES:                                                            *
*  1.  CURRENT SUPPORT BASED ON COBOL\PAOS\OSDEMO1.TXT              * 
*********************************************************************
* 03/22/08 INITIAL CODING                                           *
*********************************************************************
*  AREAD SYSUT1 AND PUNCH REFORMATED STATEMENTS ON SYSUT2
*   1.  OUTPUT COMMENTS WITH PROGRAM, DATE, AND TIME
*   2.  UNRECOGNIZED CODE GENERATED AS COMMENTS
*   3.  TEXT WITH "USING" AT 38 REFORMATED TO USING STATEMENT 
*   4.  TEXT WITH "    0"  AT 2  REPORMATED TO ASSEMBLER
*       A.  INSERT @TIMEVRS DATE AND TIME LABEL FROM COMMENT FIELD
*       B.  CORRECT LABEL ALIGNMENT ON PROGRAM ENTRY NAME
*       C.  CHANGE LABEL WITH - OR = IN COL 3 TO _
*       D.  REMOVE LAST NIBBLE OF 8 BYTE DATA FROM LABEL FIELD
*       E.  FIXUP DC STATEMENTS
*           1)  REPLACE AL2'0' AND AL4'0' WITH (0)
*           2)  REPLACE X, CL3, F WITH TO DATA TO DS
*   5.  REFORMAT CONSTANT GLOBAL TABLE CONSTANT DATA INTO CGT TABLE
*       A.  FIND 'CONSTANT GLOBAL TABLE BEGINS' AT 2 AND GEN:
*           CGT CSECT
*               DC   CL(x'14') '***CGT**'  NOTE PREFIX DIFF PAEC
*       B.  FIND 'LIT+' AT 11 AND GEN DC X'(HEX DATA FROM 23)'
*   6.  GEN LABEL FOR START OF LINE AT EACH ' NNNNNN '
*   7.  GEN PACVT CSECT AT END WITH FOLLOWING FIELDS (SEE PACVT DSECT)
*       PACVTLST DC  A(LINE_NN) STARTING ADDRESS OF CODE FOR LINE_NN
*       PACVTLED DC  A(LINE_MM) ENDING   ADDRESS OF CODE OR ZERO
*       PACVTLDS DC  F(LDSA) LENGTH OF REQUIRED DYNAMIC STORAGE AREA
*       PACVTCGT DC  A(CGT)  ADDR CONSTANT GLOBAL TABLE
*       DAB      DC  A(0)    ADDR DYNAMIC ACCESS BLOCK TO RESOLVE DAB
*       PACVTINT DC  V(PAECINT) FORCE STATIC LINK OF INTERFACE
*********************************************************************
* INSERT FILE, DATA, AND TIME COMMENTS
*********************************************************************
&TEXT    SETC  '* Z390ECOB GENERATED Z390 ASSEMBLER SOURCE PROGRAM'
         PUNCH '&TEXT',DDNAME=SYSUT2
&TEXT    SETC  '* Z390ECOB DATE=&SYSCLOCK'
         PUNCH '&TEXT',DDNAME=SYSUT2
*********************************************************************
* READ LINE OF TEXT FROM ENTERPRISE COBOL ASM LISTING INPUT FILE
*********************************************************************
         LCLB &CGT                   START OF CONSTANT TABLE FLAG
         LCLC &LINE1,&LINE2          FIRST AND LAST COBOL LINE TO EXEC
.LOOP    ANOP
&TEXT    AREAD DDNAME=SYSUT1
         ACTR 1000              RESET FOR LARGE PROGAMS (4096 LINES+)
         AIF  (&TEXT EQ '').EOF
*
* GEN COMMENT IF LESS THAN 8 CHAR (MINIMUM REQ FOR STMT NO
*
         AIF  (K'&TEXT LT 8).COM 
*
* GEN DSA WITH SPECIFIED SIZE IF FOUND
*         
         AIF  ('&TEXT'(2,30) NE 'DSA      WILL BE ALLOCATED FOR').NODSA
&LDSAHEX SETC '&TEXT'(33,8)     HEX SDA FOR DSA LENGTH
.NODSA   ANOP          
*
* GEN CONSTANT GLOBAL TABLE IF FOUND
*
         AIF  ('&TEXT'(2,27) NE 'CONSTANT GLOBAL TABLE BEGIN').NOCGT1
         PUNCH 'CGT      CSECT  GLOBAL CONSTANT TABLE',DDNAME=SYSUT2
         PUNCH '         DC     CL(X''14'')''**CGT***'' CGT ID',       X
               DDNAME=SYSUT2 NOTE DIFFERENT PREFIX FROM PAEC
&CGT     SETB  1
.NOCGT1  ANOP
         AIF  (NOT &CGT OR K'&TEXT LT 59).NOCGT2
         AIF  ('&TEXT'(11,4) NE 'LIT+').NOCGT2
&HEX     SETC 'X'''''.'&TEXT'(23,35).''''''.' '.'&TEXT'(11,12)
         PUNCH '         DC     &HEX',DDNAME=SYSUT2
         AIF  ('&TEXT'(59,1) EQ ' ').NOCGT2
&HEX     SETC 'X'''''.'&TEXT'(59,35).''''''
         PUNCH '         DC     &HEX',DDNAME=SYSUT2
.NOCGT2  ANOP         
*
* GEN COBOL LINE NUMBER LABELS IF FOUND AND SAVE FIRST/LAST
*
         AIF  ('&TEXT'(1,1) NE ' ' OR '&TEXT'(8,1) NE ' ').NOLINE
         AIF  ('&TEXT'(10,1) EQ '*').NOLINE
         AIF  ('&TEXT'(11,4) EQ 'LIT+').NOLINE
&I       SETA 1
.CHKLINE ANOP
&I       SETA &I+1
         AIF  (&I GT 7).LINEOK
         AIF  ('&TEXT'(&I,1) LT '0').NOLINE         
         AIF  ('&TEXT'(&I,1) GT '9').NOLINE
         AGO  .CHKLINE
.LINEOK  ANOP
&LINE_NUM  SETC '&TEXT'(2,6)
&LINE_DESC SETC '&TEXT'(9,*)
         PUNCH 'LINE_&LINE_NUM DS     0H &LINE_DESC',DDNAME=SYSUT2
         AIF   (K'&LINE1 NE 0).NOFIRST
&LINE1   SETC  &LINE_NUM
.NOFIRST ANOP
         AIF   (K'LINE2 NE 0).NOLINE
&LINE2   SETC  &LINE_NUM
.NOLINE  ANOP
*
* GEN COMMENT IF LESS THAN 28 CHAR (MINIMUM REQ FOR ASM STMT
*
         AIF  (K'&TEXT LT 28).COM          
*
* GEN ASM STATMENTS FOR USING AT 32 AND LINES WITH '   0' AT 2
*
         AIF  (K'&TEXT LT 41).NOUSING         
         AIF  ('&TEXT'(38,5) EQ 'USING').ASM
.NOUSING ANOP
         AIF  ('&TEXT'(2,5) NE '    0').COM
         AGO  .ASM
*********************************************************************
* PUNCH ASSEMBLER STATEMENT OR COMMENT WITH CONTINUATIONS AND QUOTES
*********************************************************************
.PCH     ANOP
         AIF   (K'&STMT LE 71).PCH1
&TEXT    SETC  (DOUBLE '&STMT'(1,71).'X')  FIRST CONTINUED LINE
         PUNCH '&TEXT',DDNAME=SYSUT2
&I1      SETA  72
.CONT    ANOP
         AIF   (&I1+55 GE K'&STMT).LAST
&TEXT    SETC  (DOUBLE (15)' '.'&STMT'(&I1,56).'X') CONTINUING LINES
         PUNCH '&TEXT',DDNAME=SYSUT2
&I1      SETA  &I1+56
         AGO   .CONT
.LAST    ANOP
&STMT    SETC  (DOUBLE (15)' '.'&STMT'(&I1,*))
.PCH1    ANOP                         LAST LINE OF STATEMENT
&STMT    SETC  (DOUBLE &STMT)
         PUNCH '&STMT',DDNAME=SYSUT2
         AGO   .LOOP
*********************************************************************
* PUNCH MISSING LABELS AND END AND TERMINATE
*********************************************************************
.EOF     ANOP
         AIF   (K'&SYSPARM EQ 0).NOPARM
&I       SETA  (&SYSPARM FIND ':')
         AIF   (&I EQ 0).NOPARM
&LINE1   SETC  '00000'.'&SYSPARM'(1,&I-1)
&LINE1   SETC  '&LINE1'(K'&LINE1-5,*)
&LINE2   SETC  '00000'.'&SYSPARM'(&I+1,*)
&LINE2   SETC  '&LINE2'(K'&LINE2-5,*)
         AGO    .GENZ390
.NOPARM  ANOP
&LINE2   SETC  ''
.GENZ390 ANOP
         PUNCH 'PACVT    CSECT',DDNAME=SYSUT2 
         PUNCH 'CVTSTRT  DC    A(LINE_&LINE1)',DDNAME=SYSUT2
         AIF   (K'&LINE2 EQ 0).NOPARM2
         PUNCH 'CVTEND   DC    A(LINE_&LINE2)',DDNAME=SYSUT2
         AGO   .GENEND
.NOPARM2 ANOP
         PUNCH 'Z390END  DC    A(0)',DDNAME=SYSUT2
.GENEND  ANOP
         PUNCH 'CVTLDSA  DC    A(X''&LDSAHEX'')',DDNAME=SYSUT2
         PUNCH 'CVTCGT   DC    A(CGT)',DDNAME=SYSUT2
         PUNCH 'DAB      DC    A(0)',DDNAME=SYSUT2  RESOLVES DAB REF
         PUNCH 'CVTPAINT DC    V(PAOSINT)',DDNAME=SYSUT2
         PUNCH '         END    ',DDNAME=SYSUT2
         AGO   .EXIT
*********************************************************************
* PUNCH ASSEMBLER STATEMENT AFTER FIXUPS
*********************************************************************
.ASM     ANOP       
&STMT    SETC  '&TEXT'(29,*)    ASSEMBLER STATEMENT
         AIF   ('&TEXT'(57,8) NE '@TIMEVRS').NOTTMLAB 
.* INSERT LABEL FOR @TIMEVRS  
&STMT    SETC  '&TEXT'(57,8).' '.'&STMT'(10,*)
.NOTTMLAB ANOP
         AIF   ('&STMT'(10,7) NE 'DS   0H').NOTDS0H
.* CORRENT ALIGNEMENT ON LABEL
         AIF   ('&TEXT'(23,1) EQ ' ').NOTDS0H
&STMT    SETC  '&TEXT'(23,8).' CSECT '.'&STMT'(16,*)
.NOTDS0H ANOP
         AIF   ('&STMT'(3,1)  EQ '-').FIXLAB
         AIF   ('&STMT'(3,1)  EQ '=').FIXLAB
         AGO   .NOTLAB
.FIXLAB  ANOP
.* CHANGE - OR = IN LABEL TO _
&STMT    SETC  '&STMT'(1,2).'_'.'&STMT'(4,*)
.NOTLAB  ANOP
         AIF   ('&STMT'(10,3) NE 'DC ').PCH
         AIF   ('&STMT'(1,1)  EQ ' ').NOTDC8
         AIF   ('&STMT'(2,1)  NE ' ').NOTDC8
.* REMOVE CL8'...' LAST HEX NIBBLE FROM LABEL FIELD
&STMT    SETC  ' '.'&STMT'(2,*)         
.NOTDC8  ANOP
         AIF   ('&STMT'(15,6) NE 'AL4''0''').NOTAL4
.* CHANGE AL4'0' TO AL4(0)
&STMT    SETC  '&STMT'(1,14).'AL4(0) Z390 FIXUP '.'&STMT'(22,*)
.NOTAL4  ANOP
         AIF   ('&STMT'(15,6) NE 'AL2''0''').NOTAL2
.* CHANGE AL2'0' TO AL2(0)
&STMT    SETC  '&STMT'(1,14).'AL2(0) Z390 FIXUP '.'&STMT'(22,*)
.NOTAL2  ANOP
         AGO   .PCH
*********************************************************************
* PUNCH COMMENTS
*********************************************************************
.COM     ANOP
         AIF   (K'&TEXT LT 25).LOOP
         AIF   ('&TEXT'(2,3) NE '  0').LOOP
&STMT    SETC  '*'.'&TEXT'(5,*)
         AGO   .PCH
.EXIT    ANOP
         END           

