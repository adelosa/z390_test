<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>zCOBOL Portable COBOL Compiler System Programmer Guide</title>
<META NAME="DESCRIPTION" CONTENT="z390 Protable Mainframe Assembler, Linker, Emulator Open Source J2SE">
<META name="KEYWORDS" content="Mainframe Assembler Tools z390 SuperZap Open Source J2SE Java">

<style>
<!--
 li.MsoNormal
	{mso-style-parent:"";
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";
	margin-left:0in; margin-right:0in; margin-top:0in}
-->
</style>

</head>

<body>
<table border="0" cellpadding="0" cellspacing="3" style="border-collapse: collapse" bordercolor="#111111" id="AutoNumber1" width="750" height="1">
            <tr>
              <td align="center" width="141" height="69" valign="top">
              <b><font face="Times New Roman">
              <a href="http://www.zcobol.org">
              <img border="0" src="zcobol.jpg" width="100" height="75" alt="z390 Portable Mainframe COBOL Compiler"></a></font></b></td>
              <td align="center" width="445" height="69">
              <p align="center"><b><font size="4" face="Times New Roman">zCOBOL 
              Portable Mainframe COBOL<br>
              System Programmer Guide</font></b></td>
              <td width="152" height="69" align="center">
              <b>
              <a href="http://www.z390.org">
              <img border="0" src="z390.jpg" width="124" height="75" alt="z390 Portable Mainframe Assembler and Emulator"></a><font face="Times New Roman"><br>
&nbsp;</font></b></td>
            </tr>
            </table>
         
        
        </table>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%">
  <tr>
    <td width="25%" align="left" valign="top">
    <ul>
      <li><b><a href="#zc390_tramslator">zc390 translator</a></b></li>
      <li><b><a href="#COBOL_Language_Macros">ZCOBOL macros</a></b></li>
      <li><b><a href="#zCOBOL_Target_Source_Language_Generation_Macros">Generation 
      macros</a></b></li>
      <li><b>zcobol Examples</b><ul>
      <li><b><a href="#COMPUTE">COMPUTE</a></b></li>
    </ul>
      </li>
    </ul>
    </td>
    <td width="25%" align="left" valign="top">
    <ul>
      <li><b><a href="#zcobol_Data_Types">Data Types</a></b></li>
      <li><b><a href="zcobol_options.htm">Options</a></b></li>
      <li><b>
      <a href="zCOBOL_Demos_and_Regression_Tests.htm#zcobo_Regression_Tests">
      Regression Tests</a></b></li>
    </ul>
    </td>
    <td width="25%" align="left" valign="top">
    <ul>
      <li><b><a href="#ZC390LIB_runtime_library">zc390lib runtime</a></b></li>
      <li><b><a href="#Base_Free_Code_Generation">Base free code</a></b></li>
      <li><b><a href="#zcobol_EXEC_CICS_Support">EXEC CICS </a></b></li>
    </ul>
    </td>
    <td width="25%" align="left" valign="top">
    <ul>
      <li><b><a href="http://www.z390.org">z390</a></b></li>
      <li>
      <b>
      <a href="http://www.z390.org/z390_ZSTRMAC_Structured_Macro_Support.htm">
      Structured Code</a></b></li>
      <li><b><a href="http://publibfp.boulder.ibm.com/epubs/pdf/igy3lr40.pdf">COBOL 
      Ref.</a></b></li>
      <li><b><a href="http://publibz.boulder.ibm.com/epubs/pdf/asmr1020.pdf">HLASM 
      Ref.</a></b></li>
      <li><b><a href="http://publibfp.boulder.ibm.com/epubs/pdf/dz9zr006.pdf">zPOP 
      Ref.</a></b></li>
    </ul>
    </td>
  </tr>
</table>
<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%">
  <tr>
    <td width="100%">
    <p align="center"><b><a name="zc390_tramslator">zc390 Translator</a></b></p>
    <p align="left"><b>The zc390 translator is a java regular expression based 
    parser which reads COBOL source program and generates HLASM compatible 
    mainframe assembler source program in one pass.&nbsp; Each recognized COBOL 
    verb starts a new assembler macro call statement with all the parameters up 
    to the next verb, period, or paragraph label passed as positional 
    parameters.&nbsp; Periods generate a separate macro call to PERIOD to 
    generate end to all the structures in the previous sentence.&nbsp; Paragraph 
    and section labels generate call to LABEL with the name and type of label to 
    generate.&nbsp; All hyphens in names are translated to underscores for HLASM 
    compatibility.</b><p align="left">&nbsp;</td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="COBOL_Language_Macros">COBOL Language Verb Macros</a></b></p>
    <p align="left"><b>All the macros for the COBOL language verbs and section 
    headings are stored in the macro library z390\zcobol.&nbsp; These macros 
    parse the parameters, validate them for any syntax errors, and issue calls 
    to generation macros in separate directory as described below.&nbsp; For 
    example, the zcobol\IF.MAC macro generates multiple calls to the generation 
    macros GEN_COMP, GEN_BC GEN_B, and GEN_LABEL.&nbsp; There are no language 
    specific code generation macros in the zcobol directory so it is shared 
    across multiple target language environments.&nbsp; All the macros are  
    written in structured form using the
    <a href="http://www.z390.org/z390_ZSTRMAC_Structured_Macro_Support.htm">z390 
    ZSTRMAC SPE</a> structured programming extensions such as AIF, AELSEIF, 
    AELSE, AEND, AWHILE, etc.&nbsp;&nbsp; As a result there are no explicit AGO 
    or AIF labels in these macros.</b><p align="left">&nbsp;</td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="COMPUTE">COMPUTE Statement Example</a></b></p>
    <p align="left"><b>The COBOL compute statement now supported in v1.5.00d is a 
    good example to study to understand how the zcobol compiler works. The steps 
    followed to compile the following MOVE and COMPUTE statements are as 
    follows:</b></p>
    <p align="left"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 77&nbsp; FLT-SRT&nbsp; 
    USAGE FLOAT-SHORT OCCURS 2.<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ........<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
    MOVE 1.1 TO FLT-SRT(2)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
    COMPUTE FLT-SRT(2) = FLT-SRT(2)+2.2</b></p>
    <ol>
      <li>
      <p align="left"><b>zc390 translator generates the following 2 zcobol verb 
      macro call statements<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MOVE 1.1,'TO',FLT_SRT,&quot;(',2,')'<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; COMPUTE 
      FLT_SRT,'(',2,')',=,FLT_SRT,'(&quot;,2,')',+,2.2</b></li>
      <li>
      <p align="left"><b>The MOVE macro uses shared copybook routine GET_FIELD_PARM 
      to parse the two fields for MOVE and store resulting field name and symbol 
      table index.&nbsp; For the literal 1.1 the index is 0, for the subscripted 
      field, the name is set to explicit register reference including length 
      0ffset(length,register) and the code is generated to set the register to 
      address of the subscripted field.</b></li>
      <li>
      <p align="left"><b>The MOVE macro next issues call to GEN_MOVE with the 
      source and target field names and system table indexes.</b></li>
      <li>
      <p align="left"><b>The GEN_MOVE macro checks the type of each field and 
      generates appropriate code to move value from source to target field.&nbsp; 
      In this case it uses LARL to set register to address of DFP short value of 
      1.1 in literal table and then generates MVC to move the literal to the 
      target subscripted field.</b></li>
      <li>
      <p align="left"><b>The COMPUTE uses GET_FIELD_PARM to obtain name and index 
      of target field and then extracts parms in expression following the = and 
      then calls ZC_CALC macro to generate code for expression and store result 
      in specified target field.&nbsp; This macro can be used by IF and other 
      verb macros to calculate expression for loop etc.</b></li>
      <li>
      <p align="left"><b>The ZC_CALC macro parsers the expression parameters into 
      Backus Normal Form&nbsp; using two stacks.&nbsp; One stack has the 
      operators in expression and the other has the field parm index pointers.&nbsp; 
      Following the rules of precedence, the operators and associated parameter 
      pointers are removed from the stacks and stored sequentially in an 
      operation table containing the operators, 2 operands, and the target field 
      for each operation.&nbsp; Temporary storage fields are represented using 
      negative indexes instead of position and a table of temporary fields 
      created along with their type is maintained.&nbsp; A queue of free 
      temporary fields is maintained and once a temporary field has been used in 
      an operation, that temporary field is on the free queue for reuse rather 
      than allocating a new temporary storage field.&nbsp; Once the expression 
      has been parsed and all the operation table entries have been generated, 
      the last target field is replaced with the result field passed to ZC_CALC 
      and then the operation table is scanned and the generation macros for each 
      operation are called to generate code to perform the operation.&nbsp; Just 
      prior to generating code for an operation, the two input parameter types 
      are used to determine the required type of result to minimize any loss of 
      precision during the calculations.&nbsp; A call to GEN_MOVE is made to 
      move the first operand field to the target field prior to performing add, 
      subtract, etc. on the target field for operation.&nbsp; If the first 
      operand is the same as the target field, the move can be omitted but that 
      is not always possible to determine in the case of subscripting and 
      indexing where different variables may just happen to have the same value.&nbsp; 
      The called generation macros GEN_ADD, GEN_SUB, GEN_MPY, and GEN_DIV check 
      the field types and perform the necessary conversion when types do not 
      match.</b></li>
    </ol>
    <p align="left"><b>The generated zcobol HLASM assembler code for these 2 COBOL 
    statements is as follows:</b></p>
    <p align="left"><b><font face="Courier New">0000DC (1/99)652 * MOVE 
    1.1 TO FLT-SRT(2)<br>
    0000DC (1/100)653 MOVE 1.1,TO,FLT_SRT,'(',2,')'<br>
    0000DC C02900000004 000004 (29/28)660+ IILF R2,(2-1)*4 (LIT-1)*LEN<br>
    0000E2 4122D058 000220 (29/29)661+ LA R2,FLT_SRT(R2)<br>
    0000E6 C0100000006D 0001C0 (30/193)664+ LARL R1,=ED'1.1'<br>
    0000EC D20320001000 (30/194)665+ MVC 0(4,R2),0(R1)<br>
    0000F2 (1/101)668 * COMPUTE FLT-SRT(2) = FLT-SRT(2)+2.2<br>
    0000F2 (1/102)669 COMPUTE FLT_SRT,'(',2,')',=,FLT_SRT,'(',2,')',+,2.2<br>
    0000F2 C0F900000004 000004 (29/28)677+ IILF R15,(2-1)*4 (LIT-1)*LEN<br>
    0000F8 41FFD058 000220 (29/29)678+ LA R15,FLT_SRT(R15)<br>
    0000FC C02900000004 000004 (29/28)688+ IILF R2,(2-1)*4 (LIT-1)*LEN<br>
    000102 4122D058 000220 (29/29)689+ LA R2,FLT_SRT(R2)<br>
    000106 D203F0002000 (30/64)694+ MVC 0(4,R15),0(R2)<br>
    00010C 780F0000 (34/132)697+ LE F0,0(R15)<br>
    000110 B3D40000 (34/133)698+ LDETR F0,F0,0<br>
    000114 C0E000000052 0001B8 (34/134)699+ LARL R14,=DD'2.2'<br>
    00011A 681E0000 (34/135)700+ LD F1,0(R14)<br>
    00011E B3D21000 (34/136)701+ ADTR F0,F0,F1<br>
    000122 B3D50000 (34/137)702+ LEDTR F0,0,F0,0<br>
    000126 700F0000 (34/138)703+ STE F0,0(R15)</font></b></p>
    <p align="left"><b>See the results for this calculation in the&nbsp; regression 
    test zcobol\test\TESTSIX1.CBL.&nbsp; Note that using DFP the result is 
    exactly 3.3 which is not the case when using HFP COMP-1 floating point due 
    to conversion to base 2 versus base 10.&nbsp; The zcobol\ZC_CALC.MAC macro 
    is written in
    <a href="http://www.z390.org/z390_ZSTRMAC_Structured_Macro_Support.htm">
    ZSTRMAC structured conditional macro assembler</a> consisting of about 850 
    lines of code with no AGO statements.</b></td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="zCOBOL_Target_Source_Language_Generation_Macros">
    zCOBOL Target Source Language Generation Macros</a></b></p>
    <p align="left"><b>All the target source language generation macros called by 
    the COBOL verb macros in z390\zcobol are stored in the following directories 
    by target language:</b></p>
    <ul>
      <li>
      <p align="left"><b>z390\zcobol\z390 - generate HLASM compatible mainframe 
      assembler source program</b></li>
      <li>
      <p align="left"><b>z390\zcobol\java&nbsp; - generate J2SE java compatible source 
      program</b></li>
      <li>
      <p align="left"><b>z390\zcobol\vce&nbsp;&nbsp; - generate MS Visual Express C compatible 
      source program</b></li>
      <li>
      <p align="left"><b>z390\zcobol\i586 - generate HLA/MASM Intel assembler 
      compatible source program</b></li>
    </ul>
    <p align="left"><b>Current only the z390 HLASM compatible source generation 
    macros are being fully developed along with the required runtime support 
    functions stored in the zcobol\z390\ZC390LIB.390 dynamically loaded 
    runtime module.&nbsp; However the zcobol demos include a hello world COBOL 
    program which can be compiled and executed in each of the target 
    environments form the same zcobol\demo\HELLO.CBL source program.&nbsp; The 
    following commands generate the corresponding source language equivalent and 
    executable:</b></p>
    <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%">
      <tr>
        <td width="23%"><b>Command</b></td>
        <td width="19%"><b>Generated Source Code Target</b></td>
        <td width="18%"><b>Generated Executable Code</b></td>
      </tr>
      <tr>
        <td width="23%" align="left" valign="top"><b>ZC390CLG zcobol\demo\HELLO</b></td>
        <td width="19%" align="left" valign="top"><b>zcobol\demo\HELLO.MLC/BAL</b></td>
        <td width="18%" align="left" valign="top"><b>zcobol\demo\HELLO.390 requires 
        z390 and J2SE on Windows/Linux</b></td>
      </tr>
      <tr>
        <td width="23%" align="left" valign="top"><b>ZCJAVCLG zcobol\demo\HELLO</b></td>
        <td width="19%" align="left" valign="top"><b>zcobol\demo\HELLO.java</b></td>
        <td width="18%" align="left" valign="top"><b>zcobol\demo\HELLO.class 
        requires J2SE on Windows/Linux</b></td>
      </tr>
      <tr>
        <td width="23%" align="left" valign="top"><b>ZCVCECLG zcobol\demo\HELLO</b></td>
        <td width="19%" align="left" valign="top"><b>zcobol\demo\HELLO.ccp</b></td>
        <td width="18%" align="left" valign="top"><b>zcobol\demo\HELLO.exe requires 
        MS VCE runtime on Windows</b></td>
      </tr>
      <tr>
        <td width="23%" align="left" valign="top"><b>ZC586CLG zcobol\demo\HELLO</b></td>
        <td width="19%" align="left" valign="top"><b>zcobol\demo\HELLO.HLA/ASM</b></td>
        <td width="18%" align="left" valign="top"><b>zcobol\demo\HELLO.exe requires 
        HLA, MASM, and MS VCE runtime on Windows</b></td>
      </tr>
    </table>
    <b><br>
    If you are interested in joining in the open source zcobol development effort in any of 
    the 4 target language environments or want to add another target language 
    environment, join the <a href="http://tech.groups.yahoo.com/group/zcobol/">zcobol development email discussion group</a> and make 
    your interests known.&nbsp; Melvyn Maltz is currently developing additional 
    EXEC CICS support for zcobol programs.</b><p>&nbsp;</td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="ZC390LIB_runtime_library">ZC390LIB Runtime 
    Library</a></b></p>
    <p align="left"><b>The z390\zcobol\z390 code generation macro directory also 
    contains all the source code and the ZC390CVT.CPY copybook required 
    to build the z390\linklib\ZC390LIB.390 runtime load module which is dynamically loaded by 
    all generated z390 zCOBOL programs.&nbsp; This module contains the following 
    components:</b></p>
    <ul>
      <li>
      <p align="left"><b>ZC390LIB.MLC - contains ZC390LIB CSECT and COPY ZC390CVT 
      to include all object modules following the CVT at the beginning</b></li>
      <li>
      <p align="left"><b>ZC390NUC.MLC - included module with system function 
      routines such as CALL, GOBACK, STOPRUN, PERFORM, and PMCHECK to check for 
      end of current performed paragraph or section,</b></li>
      <li>
      <p align="left"><b>ABORT.MLC - contains module called to abort execution with 
      reason code</b></li>
      <li>
      <p align="left"><b>ACCEPT.MLC - contains support for ACCEPT date, time, day 
      of week</b></li>
      <li>
      <p align="left"><b>DISPLAY.MLC - display any type field or literal </b> </li>
      <li>
      <p align="left"><b>INSPECT.MLC - inspect field tallying, replacing, or 
      transforming.</b></li>
    </ul>
      <p align="left"><b>The ZC390CVT.CPY copybook is used in every zcobol 
      generated program to define the DSECT addressed by register 9.&nbsp; The 
      same copybook is also used in ZC390LIB.MLC to generated the CVT at the 
      beginning of the ZC390LIB.390 runtime load module with addresses of all 
      the entries followed by work areas used by the code generation macros.</b></td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="Base_Free_Code_Generation">Base Free Code 
    Generation</a></b></p>
    <p align="left"><b>The zcobol code generation macros in zcobol\z390 generate 
    base free code for the procedure division using relative instructions for 
    both branch addressing and for literal addressing as required.&nbsp; 
    The only address constants generated in zcobol programs are for statically 
    linked CALL's to other zcobol or assembler programs.&nbsp; The only limit on the combined 
    size of working storage and the procedure division is 16 MB.&nbsp; 
    In order to use relative addressing for literals, all odd length 
    literals are padded to even lengths.&nbsp; The LARL instruction is used to 
    set address of data field or literal field as required for use in following 
    RX type instructions.&nbsp; To address working storage 
    and linkage section data fields, conventional base registers are dynamically 
    allocated as required for use in RX type instructions.&nbsp; Since R13 
    always points to the beginning of working-storage, no dynamic base registers 
    are required for access to data items in the first 4k of working storage.</b><p align="left">
    <b>&nbsp;</b></td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="zcobol_EXEC_CICS_Support">zcobol EXEC CICS 
    Support</a></b></p>
    <p align="left"><b>When the option CICS is specified on the command line for 
    ZC390C, ZC390CL, or ZC390CLG, then the zcobol\ZCOBOL.MAC global option &amp;ZC_CICS 
    is set on and the following changes in code generation are made:</b></p>
    <ol>
      <li>
      <p align="left"><b>The CICS option will generate call to DFHEIENT1 to 
      initialize CICS prior to executing user code starting at the first program CSECT.</b></li>
      <li>
      <p align="left"><b>A DFHEISTG DSECT is generated at the beginning of 
      working-storage instead of WSLOC LOCTR and warnings are generated for any 
      data VALUE clauses defined in working-storage section.</b></li>
    </ol>
    </td>
  </tr>
  <tr>
    <td width="100%">
    <p align="center"><b><a name="zcobol_Data_Types">zcobol Data Types</a></b></p>
    <table border="1" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" width="100%">
      <tr>
        <td width="21%" align="left" valign="top"><b>USAGE </b> </td>
        <td width="20%" align="left" valign="top"><b>PICTURE</b></td>
        <td width="21%" align="left" valign="top"><b>Z390 Assembler Type</b></td>
        <td width="38%" align="left" valign="top"><b>Description</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>COMP</b></td>
        <td width="20%" align="left" valign="top"><b>S9(4)</b></td>
        <td width="21%" align="left" valign="top"><b>H</b></td>
        <td width="38%" align="left" valign="top"><b>16 bit binary</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>COMP</b></td>
        <td width="20%" align="left" valign="top"><b>S9(9)</b></td>
        <td width="21%" align="left" valign="top"><b>F</b></td>
        <td width="38%" align="left" valign="top"><b>32 bit binary</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>COMP</b></td>
        <td width="20%" align="left" valign="top"><b>S9(18)</b></td>
        <td width="21%" align="left" valign="top"><b>G</b></td>
        <td width="38%" align="left" valign="top"><b>64 bit binary</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>COMP</b></td>
        <td width="20%" align="left" valign="top"><b>S9(39)</b></td>
        <td width="21%" align="left" valign="top"><b>Q</b></td>
        <td width="38%" align="left" valign="top"><b>128 bit binary</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-HEX-7</b></td>
        <td width="20%" align="left" valign="top"><b>COMP-1</b></td>
        <td width="21%" align="left" valign="top"><b>EH</b></td>
        <td width="38%" align="left" valign="top"><b>HFP short 7 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-HEX-15</b></td>
        <td width="20%" align="left" valign="top"><b>COMP-2</b></td>
        <td width="21%" align="left" valign="top"><b>DH</b></td>
        <td width="38%" align="left" valign="top"><b>HFP long - 15 digits </b> </td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-HEX-30</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>LH</b></td>
        <td width="38%" align="left" valign="top"><b>HFP extended - 30 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-BINARY-7</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>EB</b></td>
        <td width="38%" align="left" valign="top"><b>BFP short 7 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-BINARY-16</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>DB</b></td>
        <td width="38%" align="left" valign="top"><b>BFP long - 16 digits </b> </td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-BINARY-34</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>LB</b></td>
        <td width="38%" align="left" valign="top"><b>BFP extended - 34 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-DECIMAL-7</b></td>
        <td width="20%" align="left" valign="top"><b>FLOAT-SHORT</b></td>
        <td width="21%" align="left" valign="top"><b>EB</b></td>
        <td width="38%" align="left" valign="top"><b>DFP short 7 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-DECIMAL-16</b></td>
        <td width="20%" align="left" valign="top"><b>FLOAT-LONG</b></td>
        <td width="21%" align="left" valign="top"><b>DB</b></td>
        <td width="38%" align="left" valign="top"><b>DFP long - 16 digits </b> </td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-DECIMAL-34</b></td>
        <td width="20%" align="left" valign="top"><b>FLOAT-EXTENDED</b></td>
        <td width="21%" align="left" valign="top"><b>LB</b></td>
        <td width="38%" align="left" valign="top"><b>DFP extended - 34 digits</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>COMP-3 </b> </td>
        <td width="20%" align="left" valign="top"><b>S9(31)</b></td>
        <td width="21%" align="left" valign="top"><b>P (3)</b></td>
        <td width="38%" align="left" valign="top"><b>Packed decimal up to 31 digits 
        with option&nbsp; EXTEND</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top">&nbsp;</td>
        <td width="20%" align="left" valign="top"><b>S9(31)</b></td>
        <td width="21%" align="left" valign="top"><b>Z (3)</b></td>
        <td width="38%" align="left" valign="top"><b>Zoned Decimal up to 31 digits 
        with option EXTEND (uses PD support)</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top">&nbsp;</td>
        <td width="20%" align="left" valign="top"><b>X</b></td>
        <td width="21%" align="left" valign="top"><b>X</b></td>
        <td width="38%" align="left" valign="top"><b>Characters</b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-SHORT</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>EH,EB,ED</b></td>
        <td width="38%" align="left" valign="top"><b>Use option FLOAT(HFP/BFP/DFP)
        </b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-LOG</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>DH,DB,DD</b></td>
        <td width="38%" align="left" valign="top"><b>Use option FLOAT(HFP/BFP/DFP)
        </b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>FLOAT-EXTENDED</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>LH,LB,LD</b></td>
        <td width="38%" align="left" valign="top"><b>Use option FLOAT(HFP/BFP/DFP)
        </b></td>
      </tr>
      <tr>
        <td width="21%" align="left" valign="top"><b>POINTER<br>
        PROCEDURE-POINTER</b></td>
        <td width="20%" align="left" valign="top">&nbsp;</td>
        <td width="21%" align="left" valign="top"><b>A</b></td>
        <td width="38%" align="left" valign="top"><b>31 bit binary</b></td>
      </tr>
    </table>
    <ol>
      <li><b>The zcobol option FLOAT(HEX/BINARY/DECIMAL) can be used to change 
      the default from DECIMAL to HEX or BINARY for the generic types 
      FLOAT-SHORT, FLOAT-LONG, and FLOAT-EXTENDED.</b></li>
      <li><b>COMP-3 packed and also zoned decimal are limited to 18 digits per 
      COBOL standard unless option EXTEND is set allowing up to 31 digits for 
      both packed decimal and zoned decimal fields.</b></li>
    </ol>
    </td>
  </tr>
</table>
<p align="center"><b><font face="Times New Roman">IBM, CICS, HLASM, MVS, OS/390, VSAM, z9, z10, and z/OS<br>
&nbsp;are registered trademarks
&nbsp;of International Business Machines Corporation</font></b></p>

<p align="center"><b><font face="Times New Roman">This page last updated
<!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%A %B %d, %Y" startspan -->Wednesday May 27, 2009<!--webbot bot="Timestamp" i-checksum="43434" endspan -->.&nbsp;&nbsp;
<a href="mailto:don@higgins.net?subject=Automated Software Tools z390 Portable Mainframe Assembler and Emulator">Webmaster</a><br>
Copyright 2009 <a href="http://www.AutomatedSoftwareTools.com">Automated Software Tools Corporation</a></font></b></p>

<p align="center">
<b><font face="Times New Roman">
<br>
<script language=javascript type="text/javascript" src="http://ss.webring.com/navbar?f=j;y=dsh33782;u=10138599"> </script><noscript>
<center> <table bgcolor=gray cellspacing=0 border=2><tr> <td><table cellpadding=2 cellspacing=0 border=0><tr><td align=center> <font face=arial size=-1>This site is a member of WebRing. <br>To browse visit <a href="http://ss.webring.com/navbar?f=l;y=dsh33782;u=10138599"> Here</a>.</font></td></tr></table></td></tr></table> </center></noscript> 
<!-- START OF ACTIVEMETER CODE -->
<script type="text/javascript" language="javascript">
var __pid=36843;
var __am_invisible=0;
</script>
<script type="text/javascript" language="javascript" src="http://www.activemeter.com/counter.js"></script>
<noscript>
   <a href="http://www.activemeter.com/" target="_blank">
      <img  src="http://am1.activemeter.com/webtracker/track.html?method=track&pid=36843&java=0" alt="Free Web Counter" border="0">
   </a></noscript>
<!-- END OF ACTIVEMETER CODE -->
</font></b>
</p>

</body>

</html>