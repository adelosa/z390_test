.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
         MACRO
         CICS_READPREV
.* XRBA AND FLENGTH ARE EXTENSIONS
         LCLB  &RBA,&XRBA,&RRN
         LCLC  &FILE,&DATASET,&INTO,&SET,&LENGTH,&FLENGTH,&RIDFLD
         LCLC  &REQID,&KLENGTH
.*
&NP      SETA  N'&SYSLIST
&IP      SETA  0
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
.*
         AIF   ('&PARM'(1,5)  EQ 'FILE(').FILE
         AIF   ('&PARM'(1,8)  EQ 'DATASET(').DATASET
         AIF   ('&PARM'(1,5)  EQ 'INTO(').INTO
         AIF   ('&PARM'(1,4)  EQ 'SET(').SET
         AIF   ('&PARM'(1,7)  EQ 'LENGTH(').LENGTH
         AIF   ('&PARM'(1,8)  EQ 'FLENGTH(').FLENGTH
         AIF   ('&PARM'(1,10) EQ 'KEYLENGTH(').KLENGTH
         AIF   ('&PARM'(1,7)  EQ 'RIDFLD(').RIDFLD
         AIF   ('&PARM'(1,6)  EQ 'REQID(').REQID
         AIF   ('&PARM'(1,3)  EQ 'RBA').RBA
         AIF   ('&PARM'(1,4)  EQ 'XRBA').XRBA
         AIF   ('&PARM'(1,3)  EQ 'RRN').RRN
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.FILE    ANOP
&FILE    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.DATASET ANOP
&DATASET SETC  '&PARM'(9,K'&PARM-9)
         AGO   .PLOOP
.*
.INTO    ANOP
&INTO    SETC '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.SET     ANOP
&SET     SETC '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.FLENGTH ANOP
&FLENGTH SETC  '&PARM'(9,K'&PARM-9)
         AGO   .PLOOP
.*
.KLENGTH ANOP
&KLENGTH SETC  '&PARM'(11,K'&PARM-11)
         AGO   .PLOOP
.*
.RIDFLD  ANOP
&RIDFLD  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.REQID   ANOP
&REQID   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.RBA     ANOP
&RBA     SETB  1
         AGO   .PLOOP
.*
.XRBA    ANOP
&XRBA    SETB  1
         AGO   .PLOOP
.*
.RRN     ANOP
&RRN     SETB  1
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&FILE' EQ '' AND '&DATASET' EQ '').NOFILE
         AIF   ('&FILE' NE '' AND '&DATASET' NE '').BOTHF
         AIF   ('&INTO' EQ '' AND '&SET' EQ '').NOINTOST
         AIF   ('&INTO' NE '' AND '&SET' NE '').BOTHINST
         AIF   ('&LENGTH' NE '' AND '&FLENGTH' NE '').BOTHLEN
         AIF   ('&RIDFLD' EQ '').NEEDRID
         AIF   (&RBA AND &XRBA).BADRBA
         AIF   (&RRN AND &RBA).BOTHTYP
         AIF   (&RRN AND &XRBA).BOTHTYP
.*
         MVC   EIBFN,=X'0610'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
.* GETMAIN AND MOVE THE DATA TO SEND
         LA    R1,FCPREFIX        R1=FC BLOCK LENGTH
         GETMAIN R,LV=(R1),A=DFHEIFCP
         USING DFHFCBLK,R1
         XC    DFHFCBLK(FCPREFIX),DFHFCBLK CLEAR FC BLOCK
         ST    R0,FCPTCPIO        SAVE LENGTH FOR FREEMAIN
         MVC   FCPFN,=C'0610'     SET FUNCTION CODE
         MVC   FCPTERM,TCTTETI    SET TERMINAL ID
         MVC   FCPTRAN,EIBTRNID   SET TRANSID
         MVC   FCPTASKN,EIBTASKN  SET TASK NUMBER
         MVI   FCPCTYPE,FCPCBRWS  SET BROWSE
         MVC   FCPKEYLN,=X'7FFF'  SET MISSING KEYLENGTH
.*
         AIF   ('&FILE' EQ '').DODTAST
.* GOT FILE
         AIF   ('&FILE'(1,1) EQ '''').FLSTRING
         MVC   EIBRSRCE,&FILE     SET EIBRSRCE AS LABEL
         MVC   FCPFILNM,&FILE     SET FILE NAME AS LABEL
         AGO   .CHKLEN
.*
.FLSTRING ANOP
&FLLEN   SETA  K'&FILE
         AIF   (&FLLEN GT 10).BADFILE
         MVC   EIBRSRCE,=CL8&FILE SET EIBRSRCE AS STRING
         MVC   FCPFILNM,=CL8&FILE SET FILE NAME AS STRING
         AGO   .CHKLEN
.*
.* GOT DATASET
.DODTAST ANOP
         AIF   ('&DATASET'(1,1) EQ '''').DTSTRING
         MVC   EIBRSRCE,&DATASET  SET EIBRSRCE AS LABEL
         MVC   FCPFILNM,&DATASET  SET DATASET NAME AS LABEL
         AGO   .CHKLEN
.*
.DTSTRING ANOP
&DTLEN   SETA  K'&DATASET
         AIF   (&DTLEN GT 10).BADFILE
         MVC   EIBRSRCE,=CL8&DATASET SET EIBRSRCE AS STRING
         MVC   FCPFILNM,=CL8&DATASET SET DATASET NAME AS STRING
.*
.CHKLEN  ANOP
         AIF   ('&SET' EQ '').NOSET
         MVC   FCPLEN,=X'7FFFFFFF' SET MAXIMUM LENGTH
         AGO   .DUNLEN
.*
.NOSET   ANOP
         AIF   ('&LENGTH' EQ '').NOLENG
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').LENLABL
         MVC   FCPLEN,=AL4(&LENGTH) MOVE NUMERIC LENGTH
         AGO   .DUNLEN
.LENLABL ANOP
         MVC   FCPLEN+2(2),&LENGTH MOVE LENGTH AS LABEL
         AGO   .DUNLEN
.*
.NOLENG  ANOP
         AIF   ('&FLENGTH' EQ '').NOLENS
         AIF   ('&FLENGTH'(1,1) LT '0' OR '&FLENGTH'(1,1) GT '9').FLENL-
               BL
         MVC   FCPLEN,=AL4(&FLENGTH) MOVE NUMERIC FLENGTH
         AGO   .DUNLEN
.FLENLBL ANOP
         MVC   FCPLEN,&FLENGTH    MOVE FLENGTH AS LABEL
         AGO   .DUNLEN
.*
.NOLENS  ANOP
&LENGTH  SETC  'L''&INTO'
         MVC   FCPLEN,=AL4(&LENGTH) MOVE IMPLIED LENGTH OF INTO
.DUNLEN  ANOP
         AIF   ('&KLENGTH' EQ '').CHKOPT
         AIF   ('&KLENGTH'(2,1) EQ '''').KLENNUM
         AIF   ('&KLENGTH'(1,1) LT '0' OR '&KLENGTH'(1,1) GT '9').KLENL-
               AB
.KLENNUM ANOP
         MVC   FCPKEYLN,=AL2(&KLENGTH) MOVE NUMERIC KEYLENGTH
         AGO   .CHKGEN
.*
.KLENLAB ANOP
         MVC   FCPKEYLN,&KLENGTH  SET KEYLENGTH FROM LABEL
.CHKGEN  ANOP
         LH    R2,FCPKEYLN        R2=KEYLENGTH
         LTR   R2,R2              IS IT KEYLENGTH(0) OR -VE ?
         BNP   CICS_READPREV_&SYSNDX._NOKEY EXIT IF IT IS
         CH    R2,=H'128'         GT MAX ALLOWED ?
         BH    CICS_READPREV_&SYSNDX._NOKEY EXIT IF IT IS
         BCTR  R2,0               -1 FOR DYNAMIC LENGTH
         STC   R2,CICS_READPREV_&SYSNDX._MVCKEY+1 MOVE LENGTH
CICS_READPREV_&SYSNDX._MVCKEY EQU *
         MVC   FCPRID(0),&RIDFLD  MOVE KEY
CICS_READPREV_&SYSNDX._NOKEY EQU *
         AGO   .DUNOPT
.*
.CHKOPT  ANOP
         AIF   (NOT &RBA).NORBA
         MVC   FCPRBA,&RIDFLD     MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDRBA  SET RIDFLD=RBA
         AGO   .DUNOPT
.*
.NORBA   ANOP
         AIF   (NOT &XRBA).NOXRBA
         MVC   FCPXRBA,&RIDFLD    MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDXRB  SET RIDFLD=XRBA
         AGO   .DUNOPT
.*
.NOXRBA  ANOP
         AIF   (NOT &RRN).NORRN
         MVC   FCPRRN,&RIDFLD     MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDRRN  SET RIDFLD=RRN
         AGO   .DUNOPT
.*
.NORRN   ANOP
.* DEFAULT IS FULL KEY
         MVC   FCPRID,&RIDFLD     MOVE FULL KEY
.*
.DUNOPT  ANOP
         AIF   ('&REQID' EQ '').DUNREQ
         AIF   ('&REQID'(1,1) LT '0' OR '&REQID'(1,1) GT '9').REQLABL
         MVC   FCPREQID,=AL2(&REQID) MOVE NUMERIC REQID
         AGO   .DUNREQ
.*
.REQLABL ANOP
         MVC   FCPREQID,&REQID    MOVE REQID AS LABEL
.DUNREQ  ANOP
* SEND REQUEST TO SERVER, GET REPLY
         LA    R15,FCPREFIX       R15=PREFIX LENGTH
         L     R14,DFHEIFCP       RESTORE FC BLOCK ADDRESS
         TCPIO SEND,MSG=(R14),LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READPREV_&SYSNDX._INVREQ ERROR IF BAD
* ONLY PREFIX IS RECEIVED, WE GET THE DATA LATER
         TCPIO RECEIVE,MSG=(R14),LMSG==A(FCPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READPREV_&SYSNDX._INVREQ ERROR IF BAD
         LR    R1,R14             RE-ESTABLISH FC BLOCK BASE
         OC    FCPRETCD,FCPRETCD  BAD RETURN CODE ?
         BZ    CICS_READPREV_&SYSNDX._01 EXIT IF NONE
         CLC   FCPRETCD,DFHRESP(FILENOTFOUND) FILENOTFOUND ?
         BE    CICS_READPREV_&SYSNDX._FILENOTFOUND EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(INVREQ) INVREQ ?
         BE    CICS_READPREV_&SYSNDX._INVREQ EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(NOTFND) NOTFND ?
         BE    CICS_READPREV_&SYSNDX._NOTFND EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(NOTOPEN) NOTOPEN ?
         BE    CICS_READPREV_&SYSNDX._NOTOPEN EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(DISABLED) DISABLED ?
         BE    CICS_READPREV_&SYSNDX._DISABLED EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(ENDFILE) ENDFILE ?
         BE    CICS_READPREV_&SYSNDX._ENDFILE EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(ILLOGIC) ILLOGIC ?
         BE    CICS_READPREV_&SYSNDX._ILLOGIC EXIT IF IT IS
* SERVER HAS SENT UNKNOWN VALUE IN FCPRETCD
         B     CICS_READPREV_&SYSNDX._INVREQ SHOULD NOT OCCUR
.*
CICS_READPREV_&SYSNDX._01 DS 0H
         AIF   ('&SET' EQ '').DOINTO
         EXEC  CICS GETMAIN SET(&SET) FLENGTH(FCPACLEN)
         L     R1,DFHEIFCP        RESTORE FC BLOCK ADDRESS
.* RESET EIB FIELDS
         MVC   EIBFN,=X'0610'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
&INTO    SETC  '(&SET)'
.*
.DOINTO  ANOP
.* GET THE DATA
         L     R15,FCPLEN         MAXIMUM LENGTH TO RECEIVE
         TCPIO RECEIVE,MSG=&INTO,LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READPREV_&SYSNDX._INVREQ ERROR IF BAD
         L     R1,DFHEIFCP        RESTORE FC BLOCK ADDRESS
         AIF   ('&LENGTH' EQ '').NOLENG2
         AIF   ('&LENGTH'(1,1) EQ 'L').NOLEN2
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').MVLEN
         AGO   .NOLEN2
.*
.MVLEN   ANOP
         MVC   &LENGTH.(2),FCPACLEN+2 SET ACTUAL LENGTH OF DATA
         AGO   .NOLEN2
.*
.NOLENG2 ANOP
         AIF   ('&FLENGTH' EQ '').NOLEN2
         AIF   ('&FLENGTH'(1,1) LT '0' OR '&FLENGTH'(1,1) GT '9').MVFLE-
               N
         AGO   .NOLEN2
.*
.MVFLEN  ANOP
         MVC   &FLENGTH.(4),FCPACLEN SET ACTUAL LENGTH OF DATA
.NOLEN2  ANOP
         CLC   FCPLEN,FCPACLEN    PARTIAL DATA RECEIVED ?
         BL    CICS_READPREV_&SYSNDX._LENGERR ERROR IF IT WAS
         AIF   (NOT &RBA).NORBA2
         MVC   &RIDFLD.(4),FCPRBA MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NORBA2  ANOP
         AIF   (NOT &XRBA).NOXRBA2
         MVC   &RIDFLD.(8),FCPXRBA MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NOXRBA2 ANOP
         AIF   (NOT &RRN).NORBAS2
         MVC   &RIDFLD.(4),FCPRRN MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NORBAS2 ANOP
.* DEFAULT TO KEY
         MVC   &RIDFLD,FCPRID MOVE RIDFLD BACK
.DUNOPT2 ANOP
         B     CICS_READPREV_&SYSNDX._IGNORE EXIT
.*
CICS_READPREV_&SYSNDX._INVREQ DS 0H
.* INVOKE INVREQ
         MVI   EIBRCODE,X'08'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._FILENOTFOUND DS 0H
.* INVOKE FILENOTFOUND
         MVI   EIBRCODE,X'01'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(FILENOTFOUND) SET EIBRESP=FILENOTFOUND
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._LENGERR DS 0H
.* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._NOTFND DS 0H
.* INVOKE NOTFND
         MVI   EIBRCODE,X'81'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(NOTFND) SET EIBRESP=NOTFND
         MVC   EIBRESP2+3(1),FCPRESP2+3 SET EIBRESP2
         MVC   EIBRCODE+1(1),FCPRESP2 MOVE RPLFEEDB+1
         MVC   EIBRCODE+2(1),FCPRESP2+1 MOVE RPLFEEDB+3
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._NOTOPEN DS 0H
.* INVOKE NOTOPEN
         MVI   EIBRCODE,X'0C'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(NOTOPEN) SET EIBRESP=NOTOPEN
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._DISABLED DS 0H
.* INVOKE DISABLED
         MVI   EIBRCODE,X'0D'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(DISABLED) SET EIBRESP=DISABLED
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._ENDFILE DS 0H
.* INVOKE ENDFILE
         MVI   EIBRCODE,X'0F'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ENDFILE) SET EIBRESP=ENDFILE
         MVC   EIBRESP2+3(1),FCPRESP2+3 SET EIBRESP2
         MVC   EIBRCODE+1(1),FCPRESP2 MOVE RPLFEEDB+1
         MVC   EIBRCODE+2(1),FCPRESP2+1 MOVE RPLFEEDB+3
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._ILLOGIC DS 0H
.* INVOKE ILLOGIC
         MVI   EIBRCODE,X'02'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ILLOGIC) SET EIBRESP=ILLOGIC
         MVC   EIBRESP2+3(1),FCPRESP2+3 SET EIBRESP2
         MVC   EIBRCODE+1(1),FCPRESP2 MOVE RPLFEEDB+1
         MVC   EIBRCODE+2(1),FCPRESP2+1 MOVE RPLFEEDB+3
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READPREV_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READPREV_&SYSNDX._IGNORE DS 0H
         ICM   R1,15,DFHEIFCP     ANY ADDRESS TO BE FREED ?
         BZ    CICS_READPREV_&SYSNDX._END EXIT IF NOT
         FREEMAIN LV=FCPREFIX
         XC    DFHEIFCP,DFHEIFCP  CLEAR ADDRESS
CICS_READPREV_&SYSNDX._END DS 0H
         DROP  R1                 DROP FC BLOCK BASE
         MEXIT
.*
.NOFILE  MNOTE 12,'FILE OR DATASET MUST BE SPECIFIED'
         MEXIT
.*
.BOTHF   MNOTE 12,'BOTH FILE AND DATASET ARE SPECIFIED'
         MEXIT
.*
.BADFILE MNOTE 12,'INVALID FILE OR DATASET'
         MEXIT
.*
.NOINTOST MNOTE 12,'INTO OR SET MUST BE SPECIFIED'
         MEXIT
.*
.BOTHINST MNOTE 12,'BOTH INTO AND SET ARE SPECIFIED'
         MEXIT
.*
.BOTHLEN MNOTE 12,'BOTH LENGTH AND FLENGTH ARE SPECIFIED'
         MEXIT
.*
.NEEDRID MNOTE 12,'RIDFLD IS MANDATORY'
         MEXIT
.*
.BADRBA  MNOTE 12,'BOTH RBA AND XRBA ARE SPECIFIED'
         MEXIT
.*
.BOTHTYP MNOTE 12,'BOTH RRN AND (X)RBA ARE SPECIFIED'
         MEXIT
         MEND
