.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
         MACRO
         CICS_STARTBR
.* XRBA IS AN EXTENSION
         LCLB  &RBA,&XRBA,&RRN,&GTEQ,&EQUAL,&GENERIC
         LCLC  &FILE,&DATASET,&RIDFLD,&REQID,&KLENGTH
.*
&NP      SETA  N'&SYSLIST
&IP      SETA  0
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  &SYSLIST(&IP)
.*
         AIF   ('&PARM'(1,5)  EQ 'FILE(').FILE
         AIF   ('&PARM'(1,8)  EQ 'DATASET(').DATASET
         AIF   ('&PARM'(1,7)  EQ 'RIDFLD(').RIDFLD
         AIF   ('&PARM'(1,6)  EQ 'REQID(').REQID
         AIF   ('&PARM'(1,10) EQ 'KEYLENGTH(').KLENGTH
         AIF   ('&PARM'(1,3)  EQ 'RBA').RBA
         AIF   ('&PARM'(1,4)  EQ 'XRBA').XRBA
         AIF   ('&PARM'(1,3)  EQ 'RRN').RRN
         AIF   ('&PARM'(1,4)  EQ 'GTEQ').GTEQ
         AIF   ('&PARM'(1,5)  EQ 'EQUAL').EQUAL
         AIF   ('&PARM'(1,7)  EQ 'GENERIC').GENERIC
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.FILE    ANOP
&FILE    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.DATASET ANOP
&DATASET SETC  '&PARM'(9,K'&PARM-9)
         AGO   .PLOOP
.*
.RIDFLD  ANOP
&RIDFLD  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.REQID   ANOP
&REQID   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.KLENGTH ANOP
&KLENGTH SETC  '&PARM'(11,K'&PARM-11)
         AGO   .PLOOP
.*
.RBA     ANOP
&RBA     SETB  1
         AGO   .PLOOP
.*
.XRBA    ANOP
&XRBA    SETB  1
         AGO   .PLOOP
.*
.RRN     ANOP
&RRN     SETB  1
         AGO   .PLOOP
.*
.GTEQ    ANOP
&GTEQ    SETB  1
         AGO   .PLOOP
.*
.EQUAL   ANOP
&EQUAL   SETB  1
         AGO   .PLOOP
.*
.GENERIC ANOP
&GENERIC SETB  1
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   (&FILE EQ '' AND &DATASET EQ '').NOFILE
         AIF   (&FILE NE '' AND &DATASET NE '').BOTHF
         AIF   (&RIDFLD EQ '').NEEDRID
         AIF   (&RBA AND &XRBA).BADRBA
         AIF   (&RRN AND &RBA).BOTHTYP
         AIF   (&RRN AND &XRBA).BOTHTYP
         AIF   (&GENERIC AND &RBA).BADGEN1
         AIF   (&GENERIC AND &XRBA).BADGEN1
         AIF   (&GENERIC AND &RRN).BADGEN1
         AIF   (&KLENGTH EQ '' AND &GENERIC).BADGEN2
         AIF   (&KLENGTH NE '' AND NOT(&GENERIC)).BADGEN3
         AIF   (&GTEQ AND &EQUAL).BOTHBWS
.*
         MVC   EIBFN,=X'060C'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
.* GETMAIN AND MOVE THE DATA TO SEND
         LA    R1,FCPREFIX        R1=FC BLOCK LENGTH
         GETMAIN R,LV=(R1),A=DFHEIFCP
         USING DFHFCBLK,R1
         XC    DFHFCBLK(FCPREFIX),DFHFCBLK CLEAR FC BLOCK
         ST    R0,FCPTCPIO        SAVE LENGTH FOR FREEMAIN
         MVC   FCPFN,=C'060C'     SET FUNCTION CODE
         MVC   FCPTERM,TCTTETI    SET TERMINAL ID
         MVC   FCPTRAN,EIBTRNID   SET TRANSID
         MVC   FCPTASKN,EIBTASKN  SET TASK NUMBER
         MVI   FCPCTYPE,FCPCBRWS  SET BROWSE
         MVC   FCPKEYLN,=X'7FFF'  SET MISSING KEYLENGTH
.*
         AIF   (&FILE EQ '').DODTAST
.* GOT FILE
         AIF   ('&FILE'(1,1) EQ '''').FLSTRING
         MVC   EIBRSRCE,&FILE     SET EIBRSRCE AS LABEL
         MVC   FCPFILNM,&FILE     SET FILE NAME AS LABEL
         AGO   .DOKL
.*
.FLSTRING ANOP
&FLLEN   SETA  K'&FILE
         AIF   (&FLLEN GT 10).BADFILE
         MVC   EIBRSRCE,=CL8&FILE SET EIBRSRCE AS STRING
         MVC   FCPFILNM,=CL8&FILE SET FILE NAME AS STRING
         AGO   .DOKL
.*
.* GOT DATASET
.DODTAST ANOP
         AIF   ('&DATASET'(1,1) EQ '''').DTSTRING
         MVC   EIBRSRCE,&DATASET  SET EIBRSRCE AS LABEL
         MVC   FCPFILNM,&DATASET  SET DATASET NAME AS LABEL
         AGO   .DOKL
.*
.DTSTRING ANOP
&DTLEN   SETA  K'&DATASET
         AIF   (&DTLEN GT 10).BADFILE
         MVC   EIBRSRCE,=CL8&DATASET SET EIBRSRCE AS STRING
         MVC   FCPFILNM,=CL8&DATASET SET DATASET NAME AS STRING
.*
.DOKL    ANOP
         AIF   (&KLENGTH EQ '').CHKOPT
         AIF   ('&KLENGTH'(2,1) EQ '''').KLENNUM
         AIF   ('&KLENGTH'(1,1) LT '0' OR '&KLENGTH'(1,1) GT '9').KLENL-
               AB
.KLENNUM ANOP
         MVC   FCPKEYLN,=AL2(&KLENGTH) MOVE NUMERIC KEYLENGTH
         AGO   .CHKGEN
.*
.KLENLAB ANOP
         MVC   FCPKEYLN,&KLENGTH  SET KEYLENGTH FROM LABEL
.CHKGEN  ANOP
         LH    R2,FCPKEYLN        R2=KEYLENGTH
         AIF   (NOT &GENERIC).GENKEY
         MVI   FCPRDOPT,FCPRDGEN  SET RIDFLD=GENERIC
.GENKEY  ANOP
         LTR   R2,R2              IS IT KEYLENGTH(0) OR -VE ?
         BNP   CICS_STARTBR_&SYSNDX._NOKEY EXIT IF IT IS
         CH    R2,=H'128'         GT MAX ALLOWED ?
         BH    CICS_STARTBR_&SYSNDX._NOKEY EXIT IF IT IS
         BCTR  R2,0               -1 FOR DYNAMIC LENGTH
         STC   R2,CICS_STARTBR_&SYSNDX._MVCKEY+1 MOVE LENGTH
CICS_STARTBR_&SYSNDX._MVCKEY EQU *
         MVC   FCPRID(0),&RIDFLD  MOVE KEY
CICS_STARTBR_&SYSNDX._NOKEY EQU *
         AGO   .DUNOPT
.*
.CHKOPT  ANOP
         AIF   (NOT &RBA).NORBA
         MVC   FCPRBA,&RIDFLD     MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDRBA  SET RIDFLD=RBA
         AGO   .DUNOPT
.*
.NORBA   ANOP
         AIF   (NOT &XRBA).NOXRBA
         MVC   FCPXRBA,&RIDFLD    MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDXRB  SET RIDFLD=XRBA
         AGO   .DUNOPT
.*
.NOXRBA  ANOP
         AIF   (NOT &RRN).NORRN
         MVC   FCPRRN,&RIDFLD     MOVE RIDFLD
         MVI   FCPRDOPT,FCPRDRRN  SET RIDFLD=RRN
         AGO   .DUNOPT
.*
.NORRN   ANOP
.* DEFAULT IS FULL KEY
         MVC   FCPRID,&RIDFLD     MOVE RIDFLD BY DEFAULT
.*
.DUNOPT  ANOP
         AIF   (&REQID EQ '').DUNREQ
         AIF   ('&REQID'(1,1) LT '0' OR '&REQID'(1,1) GT '9').REQLABL
         MVC   FCPREQID,=AL2(&REQID) MOVE NUMERIC REQID
         AGO   .DUNREQ
.*
.REQLABL ANOP
         MVC   FCPREQID,&REQID    MOVE REQID FROM LABEL
.DUNREQ  ANOP
         AIF   (NOT &GTEQ).NOTGTEQ
         MVI   FCPBROPT,FCPBRGTE  SET GTEQ
         AGO   .DUNGTEQ
.*
.NOTGTEQ ANOP
         AIF   (NOT &EQUAL).NOTEQUL
         MVI   FCPBROPT,FCPBREQU  SET EQUAL
         AGO   .DUNGTEQ
.*
.NOTEQUL ANOP
.* DEFAULT TO GTEQ
         MVI   FCPBROPT,FCPBRGTE  SET GTEQ BY DEFAULT
.DUNGTEQ ANOP
* SEND REQUEST TO SERVER, GET REPLY
         LA    R15,FCPREFIX       R15=PREFIX LENGTH
         L     R14,DFHEIFCP       RESTORE FC BLOCK ADDRESS
         TCPIO SEND,MSG=(R14),LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_STARTBR_&SYSNDX._INVREQ ERROR IF BAD
* ONLY PREFIX IS RECEIVED
         TCPIO RECEIVE,MSG=(R14),LMSG==A(FCPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_STARTBR_&SYSNDX._INVREQ ERROR IF BAD
         LR    R1,R14             RE-ESTABLISH FC BLOCK BASE
         OC    FCPRETCD,FCPRETCD  BAD RETURN CODE ?
         BZ    CICS_STARTBR_&SYSNDX._IGNORE EXIT IF NONE
         CLC   FCPRETCD,DFHRESP(FILENOTFOUND) FILENOTFOUND ?
         BE    CICS_STARTBR_&SYSNDX._FILENOTFOUND EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(INVREQ) INVREQ ?
         BE    CICS_STARTBR_&SYSNDX._INVREQ EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(NOTFND) NOTFND ?
         BE    CICS_STARTBR_&SYSNDX._NOTFND EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(NOTOPEN) NOTOPEN ?
         BE    CICS_STARTBR_&SYSNDX._NOTOPEN EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(DISABLED) DISABLED ?
         BE    CICS_STARTBR_&SYSNDX._DISABLED EXIT IF IT IS
         CLC   FCPRETCD,DFHRESP(ILLOGIC) ILLOGIC ?
         BE    CICS_STARTBR_&SYSNDX._ILLOGIC EXIT IF IT IS
* SERVER HAS SENT UNKNOWN VALUE IN FCPRETCD
         B     CICS_STARTBR_&SYSNDX._INVREQ SHOULD NOT OCCUR
.*
CICS_STARTBR_&SYSNDX._INVREQ DS 0H
.* INVOKE INVREQ
         MVI   EIBRCODE,X'08'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._FILENOTFOUND DS 0H
.* INVOKE FILENOTFOUND
         MVI   EIBRCODE,X'01'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(FILENOTFOUND) SET EIBRESP=FILENOTFOUND
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._NOTFND DS 0H
.* INVOKE NOTFND
         MVI   EIBRCODE,X'81'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(NOTFND) SET EIBRESP=NOTFND
         MVC   EIBRESP2+3(1),FCPRESP2+3 SET EIBRESP2
         MVC   EIBRCODE+1(1),FCPRESP2 MOVE RPLFEEDB+1
         MVC   EIBRCODE+2(1),FCPRESP2+1 MOVE RPLFEEDB+3
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._NOTOPEN DS 0H
.* INVOKE NOTOPEN
         MVI   EIBRCODE,X'0C'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(NOTOPEN) SET EIBRESP=NOTOPEN
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._DISABLED DS 0H
.* INVOKE DISABLED
         MVI   EIBRCODE,X'0D'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(DISABLED) SET EIBRESP=DISABLED
         MVC   EIBRESP2,FCPRESP2  SET EIBRESP2
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._ILLOGIC DS 0H
.* INVOKE ILLOGIC
         MVI   EIBRCODE,X'02'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ILLOGIC) SET EIBRESP=ILLOGIC
         MVC   EIBRESP2+3(1),FCPRESP2+3 SET EIBRESP2
         MVC   EIBRCODE+1(1),FCPRESP2 MOVE RPLFEEDB+1
         MVC   EIBRCODE+2(1),FCPRESP2+1 MOVE RPLFEEDB+3
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_STARTBR_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_STARTBR_&SYSNDX._IGNORE DS 0H
         AIF   (NOT &RBA).NORBA2
         MVC   &RIDFLD.(4),FCPRBA MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NORBA2  ANOP
         AIF   (NOT &XRBA).NOXRBA2
         MVC   &RIDFLD.(8),FCPXRBA MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NOXRBA2 ANOP
         AIF   (NOT &RRN).NORBAS2
         MVC   &RIDFLD.(4),FCPRRN MOVE RIDFLD BACK
         AGO   .DUNOPT2
.*
.NORBAS2 ANOP
.* DEFAULT TO KEY
         MVC   &RIDFLD,FCPRID MOVE RIDFLD BACK
.*
.DUNOPT2 ANOP
         ICM   R1,15,DFHEIFCP     ANY ADDRESS TO BE FREED ?
         BZ    CICS_STARTBR_&SYSNDX._END EXIT IF NOT
         FREEMAIN LV=FCPREFIX
         XC    DFHEIFCP,DFHEIFCP  CLEAR ADDRESS
CICS_STARTBR_&SYSNDX._END DS 0H
         DROP  R1                 DROP FC BLOCK BASE
         MEXIT
.*
.NOFILE  MNOTE 12,'FILE OR DATASET MUST BE SPECIFIED'
         MEXIT
.*
.BOTHF   MNOTE 12,'BOTH FILE AND DATASET ARE SPECIFIED'
         MEXIT
.*
.BADFILE MNOTE 12,'INVALID FILE OR DATASET'
         MEXIT
.*
.NEEDRID MNOTE 12,'RIDFLD IS MANDATORY'
         MEXIT
.*
.BADRBA  MNOTE 12,'BOTH RBA AND XRBA ARE SPECIFIED'
         MEXIT
.*
.BOTHTYP MNOTE 12,'BOTH RRN AND (X)RBA ARE SPECIFIED'
         MEXIT
.*
.BOTHBWS MNOTE 12,'BOTH GTEQ AND EQUAL ARE SPECIFIED'
         MEXIT
.*
.BADGEN1 MNOTE 12,'GENERIC CANNOT BE SPECIFIED WITH RRN OR (X)RBA'
         MEXIT
.*
.BADGEN2 MNOTE 12,'GENERIC REQUIRES KEYLENGTH'
         MEXIT
.*
.BADGEN3 MNOTE 12,'KEYLENGTH REQUIRES GENERIC'
         MEXIT
         MEND
