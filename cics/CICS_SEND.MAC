.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/05/06 RPI 308 CICS RETURN CALLED FROM EXEC
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
         MACRO
         CICS_SEND
         GBLB  &PARMS_0404,&PARMS_1804,&PARMS_1812
         LCLB  &ALARM,&CURSSYM,&DATONLY,&ERASE,&ERASAUP
         LCLB  &FREEKB,&FRSET,&MAPONLY,&CONTROL
         LCLC  &FROM,&LENGTH,&MAP,&MAPSET,&CURSPOS
&NP      SETA  N'&SYSLIST
&IP      SETA  0
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
         AIF   ('&PARM'(1,5) EQ 'FROM(').FROM
         AIF   ('&PARM'(1,7) EQ 'LENGTH(').LENGTH
.* ADDED FOR MAPPING SUPPORT
         AIF   ('&PARM'(1,4) EQ 'MAP(').MAP
         AIF   ('&PARM'(1,7) EQ 'MAPSET(').MAPSET
         AIF   ('&PARM'(1,5) EQ 'ALARM').ALARM
         AIF   ('&PARM'(1,7) EQ 'CURSOR(').CURSPOS
         AIF   ('&PARM'(1,6) EQ 'CURSOR').CURSSYM
         AIF   ('&PARM'(1,8) EQ 'DATAONLY').DATONLY
         AIF   ('&PARM'(1,8) EQ 'ERASEAUP').ERASAUP
         AIF   ('&PARM'(1,5) EQ 'ERASE').ERASE
         AIF   ('&PARM'(1,6) EQ 'FREEKB').FREEKB
         AIF   ('&PARM'(1,5) EQ 'FRSET').FRSET
         AIF   ('&PARM'(1,7) EQ 'MAPONLY').MAPONLY
         AIF   ('&PARM'(1,8) EQ 'TERMINAL').DISCARD
         AIF   ('&PARM'(1,4) EQ 'WAIT').DISCARD
         AIF   ('&PARM'(1,7) EQ 'DEFAULT').DISCARD
.* ADDED FOR SEND CONTROL SUPPORT
         AIF   ('&PARM'(1,7) EQ 'CONTROL').CONTROL
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.FROM    ANOP
&FROM    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.MAP     ANOP
&MAP     SETC  '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.MAPSET  ANOP
&MAPSET  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.ALARM   ANOP
&ALARM   SETB  1
         AGO   .PLOOP
.*
.CURSPOS ANOP
&CURSPOS SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.CURSSYM ANOP
&CURSSYM SETB  1
         AGO   .PLOOP
.*
.DATONLY ANOP
&DATONLY SETB  1
         AGO   .PLOOP
.*
.ERASE   ANOP
&ERASE   SETB  1
         AGO   .PLOOP
.*
.ERASAUP ANOP
&ERASAUP SETB  1
         AGO   .PLOOP
.*
.FREEKB  ANOP
&FREEKB  SETB  1
         AGO   .PLOOP
.*
.FRSET   ANOP
&FRSET   SETB  1
         AGO   .PLOOP
.*
.MAPONLY ANOP
&MAPONLY SETB  1
         AGO   .PLOOP
.*
.CONTROL ANOP
&CONTROL SETB  1
         AGO   .PLOOP
.*
.DISCARD ANOP
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&MAP' EQ '' AND '&MAPSET' EQ '').NOTMAP
         AGO   .MAPPING
.*
.NOTMAP  ANOP
         AIF   (&CONTROL).SENDCON
.* NORMAL SEND (NOT MAP OR CONTROL)
         L     R2,=A(P0404)       LOAD PARM ADDRESS
         USING (P0404,P0404END),R2
         AIF   ('&FROM' EQ '').BADFROM
         AIF   ('&LENGTH' EQ '').BADLEN
         AIF   ('&LENGTH'(2,1) EQ '''').LENNUM
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').LENLABL
.LENNUM  ANOP
         LA    R0,&LENGTH         SET NUMERIC LENGTH
         STH   R0,P0404LEN        SAVE IT
         AGO   .ALLDONE
.*
.LENLABL ANOP
         LH    R0,&LENGTH         SET LENGTH FROM LABEL
         STH   R0,P0404LEN        SAVE IT
.ALLDONE ANOP
&FROMTQ  SETC  T'&FROM
         AIF   ('&FROM'(1,1) EQ '=' OR '&FROMTQ' EQ 'A').FRMADLIT
         LA    R1,&FROM           FROM ADDRESS
         ST    R1,P0404FRM        SAVE IT
         AGO   .FROMOK
.*
.FRMADLIT ANOP
         L     R1,&FROM           INDIRECT FROM ADDRESS
         ST    R1,P0404FRM        SAVE IT
.FROMOK  ANOP
         ST    DFHEIBR,P0404EIB   SET EIB ADDRESS
         ST    TCTTEAR,P0404TCT   SET TCTTE ADDRESS
         DROP  R2
         CALL  LCL0404,(P0404),MF=I CALL SEND PROCESSOR
         AIF   (&PARMS_0404).BYP0404
         B     P0404BYP_&SYSNDX   EXIT
*
         LTORG
*
&PARMS_0404 SETB 1
P0404    EQU   *
         DC    X'0404'            FUNCTION CODE
P0404EIB DS    AL4                EIB
P0404TCT DS    AL4                TCTTE
P0404FRM DS    AL4                FROM
P0404LEN DS    AL2                LENGTH
P0404END EQU   *                  END MARKER
*
P0404BYP_&SYSNDX DS 0H
.BYP0404 ANOP
         MEXIT
.*
.BADFROM ANOP
         MNOTE 12,'FROM IS MANDATORY'
         MEXIT
.*
.BADLEN  ANOP
         MNOTE 12,'LENGTH IS MANDATORY'
         MEXIT
.*
.SENDCON ANOP
.*
.* SEND CONTROL
.*
.* ONLY THESE PARAMETERS ARE PROCESSED:
.*    CURSOR, CURSOR(), ERASE, ERASEAUP, FREEKB, ALARM, FRSET
         AIF   ('&CURSPOS' NE '' AND &CURSSYM).CURSERR
         AIF   (&ERASE AND &ERASAUP).ERASERR
.*
         L     R2,=A(P1812)       LOAD PARM ADDRESS
         USING (P1812,P1812END),R2
         ST    DFHEIBR,P1812EIB   SET EIB ADDRESS
         ST    TCTTEAR,P1812TCT   SET TCTTE ADDRESS
         MVC   P1812CRS,=X'FFFF'  INVALIDATE CURSOR POSITION
         AIF   ('&CURSPOS' EQ '').NOCURSC
         LA    R14,&CURSPOS       R14=CURSOR POSITION
         STH   R14,P1812CRS       SAVE IT
.NOCURSC ANOP
         MVI   P1812OPT,B'&ERASE&ERASAUP&CURSSYM.00&ALARM&FREEKB&FRSET'-
                SET OPTION BITS
         EXEC  CICS GETMAIN SET(R2) LENGTH(7) INITIMG(0)
         LR    R1,R2              COPY OUTPUT AREA ADDRESS
         L     R2,=A(P1812)       RESTORE PARM ADDRESS
         ST    R1,P1812OUT        SAVE OUTPUT AREA ADDRESS
         CALL  LCL1812,(P1812),MF=I CALL SEND CONTROL PROCESSOR
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         BZ    P1812IGN_&SYSNDX   EXIT IF NONE
*
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1812IGN_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         LTORG
*
         AIF   (&PARMS_1812).BYP1812
&PARMS_1812 SETB 1
P1812    EQU   *
         DC    X'1812'            FUNCTION CODE
P1812EIB DS    AL4                EIB
P1812TCT DS    AL4                TCTTE
P1812OUT DS    AL4                OUTPUT AREA
P1812CRS DS    AL2                CURSOR POSITION (X'FFFF'=NONE)
P1812OPT DS    X                  OPTION BITS...
*1812ERS EQU   X'80'                 ERASE
*1812EAU EQU   X'40'                 ERASEAUP
*1812CSM EQU   X'20'                 SYMBOLIC CURSOR
*1812ALM EQU   X'04'                 ALARM
*1812FKB EQU   X'02'                 FREEKB
*1812FRS EQU   X'01'                 FRSET
P1812END EQU   *                  END MARKER
*
.BYP1812 ANOP
P1812IGN_&SYSNDX DS 0H
         EXEC  CICS FREEMAIN DATA(P1812OUT)
         DROP  R2
*
         MEXIT
.*
.MAPPING ANOP
.*
.* SEND MAP
.*
         AIF   (NOT &CONTROL).NOCTRL
         MNOTE 12,'CONTROL IS NOT COMPATABLE WITH SEND MAP'
         MEXIT
.*
.NOCTRL  ANOP
         AIF   ('&MAP' NE '').MAPOK
         MNOTE 12,'MAP IS MANDATORY'
         MEXIT
.*
.MAPOK   ANOP
         AIF   ('&LENGTH' EQ '').LENOK
         MNOTE 12,'LENGTH NOT SUPPORTED'
         MEXIT
.*
.LENOK   ANOP
         AIF   ('&FROM' EQ '').FROMOKM
         MNOTE 12,'FROM NOT SUPPORTED'
         MEXIT
.*
.FROMOKM ANOP
         AIF   ('&CURSPOS' NE '' AND &CURSSYM).CURSERR
         AIF   (&ERASE AND &ERASAUP).ERASERR
         AIF   (&DATONLY AND &MAPONLY).ONLYERR
.*
         L     R2,=A(P1804)       LOAD PARM ADDRESS
         USING (P1804,P1804END),R2
         ST    DFHEIBR,P1804EIB   SET EIB ADDRESS
         ST    TCTTEAR,P1804TCT   SET TCTTE ADDRESS
.*
         AIF   ('&MAPSET' NE '').MSETOK
&MAPSET  SETC  '&MAP'
.MSETOK  ANOP
&MAPLEN  SETA  K'&MAP
         AIF   ('&MAP'(1,1) NE '''').BADMAP
         AIF   (&MAPLEN LT 3 OR &MAPLEN GT 9).BADMAP
.*
         AIF   (T'&MAPSET EQ 'A').LOADIT
&MAPSLEN SETA  K'&MAPSET
         AIF   (&MAPSLEN LT 3 OR &MAPSLEN GT 9).BADMAPS
.LOADIT  ANOP
         EXEC  CICS LOAD PROGRAM(&MAPSET) ENTRY(R14) LENGTH(P1804MLN)
         ST    R14,P1804MSA       SAVE MAPSET ADDRESS
         MVC   P1804MAP,=CL7&MAP  MOVE MAPNAME
.*
.DUNMAP  ANOP
         AIF   (&MAPONLY).NOSTRUC
&MAPANDS SETC  '&MAP'(2,&MAPLEN-2).'S'
&MAPANDL SETC  '&MAP'(2,&MAPLEN-2).'L'
         LA    R14,&MAPANDS       R14=MAP STRUCTURE ADDRESS
         ST    R14,P1804DSC       SAVE IT
         LA    R14,&MAPANDL       R14=MAP STRUCTURE LENGTH
         STH   R14,P1804DSL       SAVE IT
         AGO   .DUNSTRC
.*
.NOSTRUC ANOP
         XC    P1804DSC,P1804DSC  CLEAR MAP STRUCTURE ADDRESS
         XC    P1804DSL,P1804DSL  CLEAR MAP STRUCTURE LENGTH
.DUNSTRC ANOP
         MVC   P1804CRS,=X'FFFF'  INVALIDATE CURSOR POSITION
         AIF   ('&CURSPOS' EQ '').NOCURS
         LA    R14,&CURSPOS       R14=CURSOR POSITION
         STH   R14,P1804CRS       SAVE IT
.NOCURS  ANOP
         MVI   P1804OPT,B'&ERASE&ERASAUP&CURSSYM&MAPONLY&DATONLY&ALARM&-
               FREEKB&FRSET' SET OPTION BITS
         EXEC  CICS GETMAIN SET(R2) LENGTH(2000) INITIMG(0)
         LR    R1,R2              COPY OUTPUT AREA ADDRESS
         L     R2,=A(P1804)       RESTORE PARM ADDRESS
         ST    R1,P1804OUT        SAVE OUTPUT AREA ADDRESS
         CALL  LCL1804,(P1804),MF=I CALL SEND MAP PROCESSOR
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         BZ    P1804IGN_&SYSNDX   EXIT IF NONE
* MAPFAIL, INVMPSZ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P1804IGN_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         LTORG
*
         AIF   (&PARMS_1804).BYP1804
&PARMS_1804 SETB 1
P1804    EQU   *
         DC    X'1804'            FUNCTION CODE
P1804EIB DS    AL4                EIB
P1804TCT DS    AL4                TCTTE
P1804MSA DS    AL4                MAPSET ADDRESS
P1804MAP DS    CL7                MAP NAME
P1804MLN DS    XL2                MAPSET LENGTH
P1804DSC DS    AL4                STRUCTURE ADDRESS
P1804DSL DS    AL2                STRUCTURE LENGTH
P1804OUT DS    AL4                OUTPUT AREA
P1804CRS DS    AL2                CURSOR POSITION (X'FFFF'=NONE)
P1804OPT DS    X                  OPTION BITS...
*1804ERS EQU   X'80'                 ERASE
*1804EAU EQU   X'40'                 ERASEAUP
*1804CSM EQU   X'20'                 SYMBOLIC CURSOR
*1804MNY EQU   X'10'                 MAPONLY
*1804DNY EQU   X'08'                 DATAONLY
*1804ALM EQU   X'04'                 ALARM
*1804FKB EQU   X'02'                 FREEKB
*1804FRS EQU   X'01'                 FRSET
P1804END EQU   *                  END MARKER
*
.BYP1804 ANOP
P1804IGN_&SYSNDX DS 0H
         EXEC  CICS FREEMAIN DATA(P1804OUT)
         DROP  R2
         EXEC  CICS RELEASE PROGRAM(&MAPSET)
*
         MEXIT
.*
.CURSERR ANOP
         MNOTE 12,'CURSOR POSITION AND SYMBOLIC CURSOR SPECIFIED'
         MEXIT
.*
.ERASERR ANOP
         MNOTE 12,'ERASE AND ERASEAUP SPECIFIED'
         MEXIT
.*
.ONLYERR ANOP
         MNOTE 12,'DATAONLY AND MAPONLY SPECIFIED'
         MEXIT
.*
.BADMAP  ANOP
         MNOTE 12,'INVALID MAP NAME'
         MEXIT
.*
.BADMAPS ANOP
         MNOTE 12,'INVALID MAPSET NAME'
         MEXIT
.*
         MEND
