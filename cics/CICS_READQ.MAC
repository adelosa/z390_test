.**********************************************************************
.* Copyright 2006 Automated Software Tools Corporation                *
.* This source code is part of z390 assembler/emulator package        *
.* The z390 package is distributed under GNU general public license   *
.* Author - Don Higgins                                               *
.**********************************************************************
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY         *
.**********************************************************************
         MACRO
         CICS_READQ
         GBLB  &PARMS_0A04
         GBLB  &ZC_CICS
         LCLB  &NEXT,&NOHAND
         LCLC  &TYPE,&QUEUE,&QNAME,&INTO,&SET,&LENGTH,&NUMITEMS,&ITEM
         LCLC  &RESP,&RESP2
&TYPE    SETC  '&SYSLIST(1)'
         AIF   ('&TYPE' EQ 'TS').TS
         MNOTE 12,'READQ TYPE NOT RECOGNIZED'
         MEXIT
.*
.TS      ANOP
&NP      SETA  N'&SYSLIST
&IP      SETA  1
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
.* DISCARDED PARMS
         AIF   ('&PARM'(1,4) EQ 'MAIN').PLOOP
         AIF   ('&PARM'(1,9) EQ 'AUXILIARY').PLOOP
.*
         AIF   ('&PARM'(1,6) EQ 'QUEUE(').QUEUE
         AIF   ('&PARM'(1,6) EQ 'QNAME(').QNAME
         AIF   ('&PARM'(1,5) EQ 'INTO(').INTO
         AIF   ('&PARM'(1,4) EQ 'SET(').SET
         AIF   ('&PARM'(1,7) EQ 'LENGTH(').LENGTH
         AIF   ('&PARM'(1,9) EQ 'NUMITEMS(').NUMITEMS
         AIF   ('&PARM'(1,5) EQ 'ITEM(').ITEM
         AIF   ('&PARM'(1,4) EQ 'NEXT').NEXT
         AIF   ('&PARM'(1,8) EQ 'NOHANDLE').NOHAND
         AIF   ('&PARM'(1,5) EQ 'RESP(').RESP
         AIF   ('&PARM'(1,6) EQ 'RESP2(').RESP2
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.QUEUE   ANOP
&QUEUE   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.QNAME   ANOP
&QNAME   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.INTO    ANOP
&INTO    SETC '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.SET     ANOP
&SET     SETC '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.NUMITEMS ANOP
&NUMITEMS SETC  '&PARM'(10,K'&PARM-10)
         AGO   .PLOOP
.*
.ITEM    ANOP
&ITEM    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.NEXT    ANOP
&NEXT    SETB  1
         AGO   .PLOOP
.*
.NOHAND  ANOP
&NOHAND  SETB  1
         AGO   .PLOOP
.*
.RESP    ANOP
&RESP    SETC  '&PARM'(6,K'&PARM-6)
&NOHAND  SETB  1
         AGO   .PLOOP
.*
.RESP2   ANOP
&RESP2   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&QUEUE' EQ '' AND '&QNAME' EQ '').NOQUEUE
         AIF   ('&QUEUE' NE '' AND '&QNAME' NE '').BOTHQ
         AIF   ('&INTO'  EQ '' AND '&SET'   EQ '').NOINTOST
         AIF   ('&INTO'  NE '' AND '&SET'   NE '').BOTHINST
         AIF   ('&ITEM'  EQ '' AND (NOT &NEXT)).NOITMNXT
         AIF   ('&ITEM'  NE '' AND &NEXT).BOTHITNX
         AIF   ('&SET'   NE '' AND '&LENGTH' EQ '').NEEDLEN
         GEN_XC P0A04,P0A04END-P0A04,P0A04 CLEAR PARMS
         GEN_MVC P0A04FN,,=X'0A04' SET FUNCTION CODE
         AIF   ('&QUEUE' EQ '').DOQNAME
.* GOT QUEUE
         AIF   ('&QUEUE'(1,1) EQ '''').QUSTRING
         LARL  R15,P0A04QNM       ADDRESS TARGET
         MVC   0(8,R15),&QUEUE    SET QUEUE NAME FROM LABEL
         GEN_MVC P0A04QNM+8,8,=CL8' ' CLEAR REMAINDER
         AGO   .CHKNAME
.*
.QUSTRING ANOP
&QULEN   SETA  K'&QUEUE
         AIF   (&QULEN GT 10).BADQ
         GEN_MVC P0A04QNM,,=CL16&QUEUE SET QUEUE NAME AS STRING
         AGO   .CHKNAME
.*
.* GOT QNAME
.DOQNAME ANOP
         AIF   ('&QNAME'(1,1) EQ '''').QNSTRING
         LARL  R15,P0A04QNM       ADDRESS TARGET
         MVC   0(16,R15),&QNAME   SET QUEUE NAME FROM LABEL
         AGO   .CHKNAME
.*
.QNSTRING ANOP
&QNLEN   SETA  K'&QNAME
         AIF   (&QNLEN GT 18).BADQ
         GEN_MVC P0A04QNM,,=CL16&QNAME SET QUEUE NAME AS STRING
.CHKNAME ANOP
.* PROCESS ITEM
         AIF   ('&ITEM' NE '').DOITEM
         GEN_MVC P0A04ITM,,=X'FFFF' SET ITEM NUMBER TO NEXT
         AGO   .DUNITEM
.*
.DOITEM  ANOP
         AIF   (T'&ITEM NE 'N').ITMLABL
         GEN_MVC P0A04ITM,,=AL2(&ITEM) SET ITEM
         AGO   .DUNITEM
.*
.ITMLABL ANOP
         LARL  R15,P0A04ITM       ADDRESS TARGET
         MVC   0(2,R15),&ITEM     MOVE ITEM FROM LABEL
.DUNITEM ANOP
         AIF   ('&SET' EQ '').NOSET
         GEN_MVI P0A04SET,X'FF'   SET SET INDICATOR
         AGO   .DOLENG
.*
.NOSET   ANOP
         LA    R0,&INTO           INTO ADDRESS
         GEN_ST R0,P0A04INT       SAVE IT
.DOLENG  ANOP
         AIF   ('&LENGTH' EQ '').NOLENG
         AIF   ('&LENGTH'(2,1) EQ '''').LENNUM
         AIF   (T'&LENGTH NE 'N').LENLABL
.LENNUM  ANOP
         LA    R0,&LENGTH         R0=LENGTH
         GEN_STH R0,P0A04LEN      SAVE IT
         AGO   .DUNLEN
.*
.LENLABL ANOP
         AIF   ('&SET' EQ '').NOSET2
         LHI   R0,32767           SET MAXIMUM LENGTH
         AGO   .LENADD
.*
.NOSET2  ANOP
         AIF   (&ZC_CICS)
         AIF   ('&LENGTH'(1,10) EQ 'LENGTH,OF,')
.* COBOL LENGTH OF EXTRACT
&LENLSL  SETC  '&LENGTH'(11,K'&LENGTH-10)
         LA    R0,L'&LENLSL       SET LENGTH
         AELSE
.* COBOL LENGTH AS LABEL
         LH    R0,&LENGTH         R0=LENGTH FROM LABEL
         AEND
         AELSE
.* ASM LENGTH AS LABEL
         LH    R0,&LENGTH         R0=LENGTH FROM LABEL
         AEND
.LENADD  ANOP
         GEN_STH R0,P0A04LEN      SAVE IT
         LA    R0,&LENGTH         R0=ADDRESS OF LENGTH
         GEN_ST R0,P0A04LAD       SAVE IT
         AGO   .DUNLEN
.*
.NOLENG  ANOP
         LA    R0,L'&INTO         R0=IMPLIED LENGTH OF INTO
         GEN_STH R0,P0A04LEN      SAVE IT
.DUNLEN  ANOP
         AIF   ('&NUMITEMS' EQ '').NONUMIT
         LA    R0,&NUMITEMS       R0=ADDRESS OF NUMITEMS
         GEN_ST R0,P0A04NUM       SAVE IT
.NONUMIT ANOP
         GEN_ST DFHEIBR,P0A04EIB  SET EIB ADDRESS
         GEN_ST TCTTEAR,P0A04TCT  SET TCTTE ADDRESS
         AIF   (NOT &NOHAND).DUNNOH
         GEN_MVI P0A04NOH,X'FF'   SET NOHANDLE
.DUNNOH  ANOP
         AIF   ('&RESP' EQ '').NORESP
         LA    R0,&RESP           ADDRESS OF RESP
         GEN_ST R0,P0A04RSP       SAVE IT
.NORESP  ANOP
         AIF   ('&RESP2' EQ '').NORESP2
         LA    R0,&RESP2          ADDRESS OF RESP2
         GEN_ST R0,P0A04RS2       SAVE IT
.NORESP2 ANOP
         L     R15,TCTTELCL       R15=LCL MODULE INDEXER
         LARL  R1,=A(P0A04)       R1=LCL MODULE PARAMETER LIST
         BAKR  0,R15              STACK REGS AND GO
.*
         AIF   ('&SET' EQ '').NOSET3
         AIF   (&ZC_CICS)
         AIF   ('&SET'(1,11) EQ 'ADDRESS,OF,')
.* COBOL LINKAGE-SECTION LABEL, EXTRACT AND TRANSFORM
&SETLSL  SETC  '&SET'(12,K'&SET-11)
         LARL  R1,P0A04STA        ADDRESS SOURCE
         MVC   ZC_&SETLSL._PTR(4),0(R1) SET ADDRESS IN L-S POINTER
         AELSE
.* COBOL STANDARD POINTER
         GEN_MVC &SET,4,P0A04STA  SET ADDRESS IN POINTER
         AEND
         AELSE
.* ASM GENERAL REGISTER
         LRL   &SET,P0A04STA      LOAD THE SET REGISTER
         AEND
.NOSET3  ANOP
         GEN_CLI P0A04NOH,X'FF'   NOHANDLE ?
         JE    P0A04BYP_&SYSNDX   EXIT IF IT IS
         OC    EIBRESP,EIBRESP    ANY BAD RESPONSE ?
         JZ    P0A04BYP_&SYSNDX   EXIT IF NONE
* INVREQ, ITEMERR, LENGERR, QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(P0A04BYP_&SYSNDX) ENTRYPOINT FOR IGNORE CONDITION
*
         AIF   (&PARMS_0A04).BYP0A04
&PARMS_0A04 SETB 1
P0A04    DS    0H
P0A04FN  DS    XL2                FUNCTION CODE
P0A04EIB DS    AL4                EIB
P0A04TCT DS    AL4                TCTTE
P0A04QNM DS    CL16               QUEUE NAME
P0A04ITM DS    XL2                ITEM
P0A04LEN DS    XL2                LENGTH
P0A04LAD DS    AL4                ADDRESS OF LENGTH IF LABEL
P0A04SET DS    X                  FF=SET IS SPECIFIED
         DS    X
P0A04STA DS    AL4                ADDRESS FOR SET
P0A04INT DS    AL4                ADDRESS OF INTO
P0A04NUM DS    AL4                ADDRESS OF NUMITEMS
P0A04NOH DS    X                  FF=NOHANDLE
         DS    X
P0A04RSP DS    AL4                RESP
P0A04RS2 DS    AL4                RESP2
P0A04END EQU   *                  END MARKER
         DS    0H
*
.BYP0A04 ANOP
P0A04BYP_&SYSNDX DS 0H
         MEXIT
.*
.NOQUEUE MNOTE 12,'QUEUE OR QNAME MUST BE SPECIFIED'
         MEXIT
.*
.BOTHQ   MNOTE 12,'BOTH QUEUE AND QNAME ARE SPECIFIED'
         MEXIT
.*
.BADQ    MNOTE 12,'INVALID QUEUE OR QNAME'
         MEXIT
.*
.NOINTOST MNOTE 12,'INTO OR SET MUST BE SPECIFIED'
         MEXIT
.*
.BOTHINST MNOTE 12,'BOTH INTO AND SET ARE SPECIFIED'
         MEXIT
.*
.NOITMNXT MNOTE 12,'ITEM OR NEXT MUST BE SPECIFIED'
         MEXIT
.*
.BOTHITNX MNOTE 12,'BOTH ITEM AND NEXT ARE SPECIFIED'
         MEXIT
.*
.NEEDLEN MNOTE 12,'SET REQUIRES LENGTH'
         MEXIT
.*
         MEND
