.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY 
.*********************************************************************
         MACRO
         CICS_READQ
         LCLB  &NEXT
         LCLC  &TYPE
         LCLC  &QUEUE,&QNAME,&INTO,&SET,&LENGTH,&NUMITEMS,&ITEM
&TYPE    SETC  '&SYSLIST(1)'
         AIF   ('&TYPE' EQ 'TS').TS
         MNOTE 12,'READQ TYPE NOT RECOGNIZED'
         MEXIT
.*
.TS      ANOP
&NP      SETA  N'&SYSLIST
&IP      SETA  1
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
.* DISCARDED PARMS
         AIF   ('&PARM'(1,4)  EQ 'MAIN').PLOOP
         AIF   ('&PARM'(1,9)  EQ 'AUXILIARY').PLOOP
.*
         AIF   ('&PARM'(1,6)  EQ 'QUEUE(').QUEUE
         AIF   ('&PARM'(1,6)  EQ 'QNAME(').QNAME
         AIF   ('&PARM'(1,5)  EQ 'INTO(').INTO
         AIF   ('&PARM'(1,4)  EQ 'SET(').SET
         AIF   ('&PARM'(1,7)  EQ 'LENGTH(').LENGTH
         AIF   ('&PARM'(1,9)  EQ 'NUMITEMS(').NUMITEMS
         AIF   ('&PARM'(1,5)  EQ 'ITEM(').ITEM
         AIF   ('&PARM'(1,4)  EQ 'NEXT').NEXT
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.QUEUE   ANOP
&QUEUE   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.QNAME   ANOP
&QNAME   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.INTO    ANOP
&INTO    SETC '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.SET     ANOP
&SET     SETC '&PARM'(5,K'&PARM-5)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.NUMITEMS ANOP
&NUMITEMS SETC  '&PARM'(10,K'&PARM-10)
         AGO   .PLOOP
.*
.ITEM    ANOP
&ITEM    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.NEXT    ANOP
&NEXT    SETB  1
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&QUEUE' EQ '' AND '&QNAME' EQ '').NOQUEUE
         AIF   ('&QUEUE' NE '' AND '&QNAME' NE '').BOTHQ
         AIF   ('&INTO'  EQ '' AND '&SET'   EQ '').NOINTOST
         AIF   ('&INTO'  NE '' AND '&SET'   NE '').BOTHINST
         AIF   ('&ITEM'  EQ '' AND (NOT &NEXT)).NOITMNXT
         AIF   ('&ITEM'  NE '' AND &NEXT).BOTHITNX
         AIF   ('&SET'   NE '' AND '&LENGTH' EQ '').NEEDLEN
.*
         MVC   EIBFN,=X'0A04'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
.*
.* GETMAIN AND MOVE THE DATA TO SEND
         LA    R1,TSPREFIX        R1=TS BLOCK LENGTH
         GETMAIN R,LV=(R1),A=DFHEITSP
         USING DFHTSBLK,R1
         XC    DFHTSBLK(TSPREFIX),DFHTSBLK CLEAR TS BLOCK
         ST    R0,TSPTCPIO        SAVE LENGTH FOR FREEMAIN
         MVC   TSPFN,=C'0A04'     SET FUNCTION CODE
         MVC   TSPTERM,TCTTETI    SET TERMINAL ID
         MVC   TSPTRAN,EIBTRNID   SET TRANSID
.*
         AIF   ('&QUEUE' EQ '').DOQNAME
.* GOT QUEUE
         AIF   ('&QUEUE'(1,1) EQ '''').QUSTRING
         MVC   EIBRSRCE,&QUEUE    SET EIBRSRCE AS LABEL
         MVC   TSPNAME(8),&QUEUE  SET TSP QUEUE NAME AS LABEL
         MVC   TSPNAME+8(8),=8C' ' CLEAR REMAINDER
         AGO   .CHKNAME
.*
.QUSTRING ANOP
&QULEN   SETA  K'&QUEUE
         AIF   (&QULEN GT 10).BADQ
         MVC   EIBRSRCE,=CL16&QUEUE SET EIBRSRCE AS STRING
         MVC   TSPNAME,=CL16&QUEUE SET TSP QUEUE NAME AS STRING
         AGO   .CHKNAME
.*
.* GOT QNAME
.DOQNAME ANOP
         AIF   ('&QNAME'(1,1) EQ '''').QNSTRING
         MVC   EIBRSRCE,&QNAME    SET EIBRSRCE AS LABEL
         MVC   TSPNAME,&QNAME     SET TSP QUEUE NAME AS LABEL
         AGO   .CHKNAME
.*
.QNSTRING ANOP
&QNLEN   SETA  K'&QNAME
         AIF   (&QNLEN GT 18).BADQ
         MVC   EIBRSRCE,=CL16&QNAME SET EIBRSRCE AS STRING
         MVC   TSPNAME,=CL16&QNAME SET TSP QUEUE NAME AS STRING
.*
.CHKNAME ANOP
         OC    TSPNAME,TSPNAME    ALL ZEROS ?
         BZ    CICS_READQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLI   TSPNAME,X'FA'      X'FA'-X'FF' ?
         BNL   CICS_READQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'**'  RESERVED ID ?
         BE    CICS_READQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'$$'  RESERVED ID ?
         BE    CICS_READQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'DF'  RESERVED ID ?
         BE    CICS_READQ_&SYSNDX._INVREQ ERROR IF IT IS
.* PROCESS ITEM
         AIF   ('&ITEM' NE '').DOITEM
         MVC   TSPITEM,=X'FFFF'   SET ITEM NUMBER TO NEXT
         AGO   .DUNITEM
.DOITEM  ANOP
         AIF   ('&ITEM'(1,1) LT '0' OR '&ITEM'(1,1) GT '9').ITMLABL
         MVC   TSPITEM,=AL2(&ITEM) MOVE NUMERIC ITEM
         AGO   .DUNITEM
.*
.ITMLABL ANOP
         MVC   TSPITEM,&ITEM      MOVE ITEM AS LABEL
.DUNITEM ANOP
         AIF   ('&LENGTH' EQ '').NOLEN
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').LENLABL
         MVC   TSPLEN,=AL2(&LENGTH) MOVE NUMERIC LENGTH
         AGO   .DUNLEN
.LENLABL ANOP
         MVC   TSPLEN,&LENGTH     MOVE LENGTH AS LABEL
         AGO   .DUNLEN
.*
.NOLEN   ANOP
&LENGTH  SETC  'L''&INTO'
         MVC   TSPLEN,=AL2(&LENGTH) MOVE IMPLIED LENGTH OF INTO
.DUNLEN  ANOP
* SEND REQUEST TO SERVER, GET REPLY
         LA    R15,TSPREFIX       R15=PREFIX LENGTH
         L     R14,DFHEITSP       RESTORE TS BLOCK ADDRESS
         TCPIO SEND,MSG=(R14),LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READQ_&SYSNDX._INVREQ ERROR IF BAD
* ONLY PREFIX IS RECEIVED, WE GET THE DATA LATER
         TCPIO RECEIVE,MSG=(R14),LMSG==A(TSPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READQ_&SYSNDX._INVREQ ERROR IF BAD
         LR    R1,R14             RE-ESTABLISH TS BLOCK BASE
         OC    TSPRETCD,TSPRETCD  BAD RETURN CODE ?
         BZ    CICS_READQ_&SYSNDX._01 EXIT IF NONE
         CLC   TSPRETCD,DFHRESP(ITEMERR) ITEMERR ?
         BE    CICS_READQ_&SYSNDX._ITEMERR EXIT IF IT IS
         CLC   TSPRETCD,DFHRESP(QIDERR) QIDERR ?
         BE    CICS_READQ_&SYSNDX._QIDERR EXIT IF IT IS
* SERVER HAS SENT UNKNOWN VALUE IN TSPRETCD
         B     CICS_READQ_&SYSNDX._INVREQ SHOULD NOT OCCUR
.*
CICS_READQ_&SYSNDX._01 DS 0H
         AIF   ('&SET' EQ '').DOINTO
         EXEC  CICS GETMAIN SET(&SET) LENGTH(&LENGTH)
         L     R1,DFHEITSP        RESTORE TS BLOCK ADDRESS
.* RESET EIB FIELDS
         MVC   EIBFN,=X'0A04'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
&INTO    SETC  '(&SET)'
.*
.DOINTO  ANOP
.* GET THE DATA
         LH    R15,TSPLEN         LENGTH TO RECEIVE
         TCPIO RECEIVE,MSG=&INTO,LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_READQ_&SYSNDX._INVREQ ERROR IF BAD
         L     R1,DFHEITSP        RESTORE TS BLOCK ADDRESS
         AIF   ('&LENGTH'(1,1) EQ 'L').NOLEN2
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').MVLEN
         AGO   .NOLEN2
.MVLEN   ANOP
         MVC   &LENGTH.(2),TSPACLEN  SET ACTUAL LENGTH OF ITEM
.NOLEN2  ANOP
         CLC   TSPLEN,TSPACLEN    PARTIAL DATA RECEIVED ?
         BL    CICS_READQ_&SYSNDX._LENGERR ERROR IF IT WAS
         AIF   ('&NUMITEMS' EQ '').NONUMIT
         MVC   &NUMITEMS.(2),TSPNUMIT SET NUMITEMS
.NONUMIT ANOP
         DROP  R1                 DROP TS BLOCK BASE
         B     CICS_READQ_&SYSNDX._IGNORE EXIT
.*
CICS_READQ_&SYSNDX._INVREQ DS 0H
.* INVOKE INVREQ
         MVI   EIBRCODE,X'20'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READQ_&SYSNDX._ITEMERR DS 0H
.* INVOKE ITEMERR
         MVI   EIBRCODE,X'01'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ITEMERR) SET EIBRESP=ITEMERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READQ_&SYSNDX._LENGERR DS 0H
.* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READQ_&SYSNDX._QIDERR DS 0H
.* INVOKE QIDERR
         MVI   EIBRCODE,X'02'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(QIDERR) SET EIBRESP=QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_READQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_READQ_&SYSNDX._IGNORE DS 0H
         ICM   R1,15,DFHEITSP     ANY ADDRESS TO BE FREED ?
         BZ    CICS_READQ_&SYSNDX._END EXIT IF NOT
         FREEMAIN LV=TSPREFIX
         XC    DFHEITSP,DFHEITSP  CLEAR ADDRESS
CICS_READQ_&SYSNDX._END DS 0H
         MEXIT
.*
.NOQUEUE MNOTE 12,'QUEUE OR QNAME MUST BE SPECIFIED'
         MEXIT
.*
.BOTHQ   MNOTE 12,'BOTH QUEUE AND QNAME ARE SPECIFIED'
         MEXIT
.*
.BADQ    MNOTE 12,'INVALID QUEUE OR QNAME'
         MEXIT
.*
.NOINTOST MNOTE 12,'INTO OR SET MUST BE SPECIFIED'
         MEXIT
.*
.BOTHINST MNOTE 12,'BOTH INTO AND SET ARE SPECIFIED'
         MEXIT
.*
.NOITMNXT MNOTE 12,'ITEM OR NEXT MUST BE SPECIFIED'
         MEXIT
.*
.BOTHITNX MNOTE 12,'BOTH ITEM AND NEXT ARE SPECIFIED'
         MEXIT
.*
.NEEDLEN MNOTE 12,'SET REQUIRES LENGTH'
         MEXIT
.*
         MEND
