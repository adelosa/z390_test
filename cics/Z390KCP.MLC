***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
* 05/07/06 RPI 308 ADD INITIAL EXEC CICS SUPPORT COMMAND PROCESSOR    *
* 06/17/08 RPI 845 CHANGE ESTAE ROUTINES TO USE NEW SDWA              *
* 11/11/08 RPI 946 CORRECTIONS TO MESSAGES TO PREVENT 6'S DISPLAYED   *
***********************************************************************
Z390KCP  SUBENTRY BASES=(R13,R3)
*
* THE Z390/CICS LOCAL MANAGER, PREVIOUSLY CALLED CICS.MLC
*
* HANDLES ALL LOCAL SERVICES AND COMMS BETWEEN THE TASK AND THE
* GLOBAL MANAGER Z390CICS
*
* THIS IS A SINGLE TASK SYSTEM, CONTROL BLOCKS ARE GETMAINED HERE
* WE DON'T NEED THE ZCVT TO HOLD THE ADDRESSES.
*
         L     R4,=A(ZCVT)
         USING IHAZCVT,R4
*
* ESTABLISH THE ABEND AND HANDLE CONDITION ROUTINE
*
         ESTAE APPABEND,CT
*
* GETMAIN TCTTE AND CLEAR IT
* THE TCTTE IS NEVER FREED, IT GOES WHEN THE THREAD IS TERMINATED
*
         GETMAIN R,LV=TCTTELEN
         LR    TCTTEAR,R1         TCTTE BASE
         USING DFHTCTTE,TCTTEAR
         XC    DFHTCTTE(TCTTELEN),DFHTCTTE CLEAR TCTTE
         MVC   TCTTEHED,=CL8'DFHTCTTE' SET HEADER
         MVC   TCTTEQFN,=PL3'1'   SET SEQ TERM FILE NUMBER
*
* THE LKA CARRIES THE DSA ADDRESS FOR EACH LINK LEVEL (TCTTELNK)
* IT'S USED TO DETERMINE WHERE WE GO BACK TO AT PROGRAM END
*
* SPACE FOR 25 LINK-LEVELS IS GETMAINED.
* NO CODING CHECKS WILL BE DONE IF THIS IS EXCEEDED.
*
* GETMAIN LKA AND CLEAR IT
* THE LKA IS NEVER FREED, IT GOES WHEN THE THREAD IS TERMINATED
*
         GETMAIN R,LV=100,A=TCTTELKA
         XC    0(100,R1),0(R1)    CLEAR LKA
         ST    R13,0(R1)          LINK-LEVEL 0 IS HERE
*
* Z390CICS PASSES TERMID AND OPTIONAL INITIAL TRANSID VIA PARM()
* TRANSID WILL BE ---- IF NONE
*
* TYPES OF PARM():
*    LTERMTRANK OR LTERM----K   LOCAL TERMINAL SUPPORT
*                               DATA PASSED BY Z390CICS
*
*    R                          REMOTE TERMINAL SUPPORT
*
         SR    R6,R6              CLEAR R6
         ICM   R6,3,ZCVTPARM      R6=PARM LENGTH
         BZ    PARMERR            ERROR IF ZERO
         CH    R6,=H'10'          MAX 10 BYTES
         BH    PARMERR            ERROR IF HIGHER
         MVC   TCTTETI,=4C' '     CLEAR TERMID
*
* OPEN TCPIO CLIENT
*
         TCPIO OPEN,HOST=*,PORT=3900 OPEN CLIENT PORT
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLI   ZCVTPARM+2,C'L'    LOCAL AND Z390CICS PARM
         BE    Z390PARM           EXIT IF IT IS
         B     OPENRMTE           EXIT IF REMOTE
*
Z390PARM EQU   *
* LOCAL TERMINAL INITIATED FROM Z390CICS
         MVC   TCTTETI,ZCVTPARM+3 SET TERMID
         MVC   TCTTEINT,ZCVTPARM+7 SET INITIAL TRANSID
         MVC   INIDATE,ZCVTPARM+11 SET DATE FORMAT
         CLC   TCTTETI,=C'SQ01'   SEQUENTIAL TERMINAL ?
         BNE   OPEN3270           EXIT IF NOT
* SET UP SEQUENTIAL TERMINAL PATH AND FILENAME
         GETENV SEQENV            GET Z390SEQ ENV VARIABLE
         LA    R9,SEQFILE         R9=PATHNAME ADDRESS
Z390SEQL EQU   *
         MVC   0(1,R9),0(R2)      MOVE DSN A BYTE AT A TIME
         AHI   R2,1               BUMP SOURCE
         AHI   R9,1               BUMP DESTINATION
         CLI   0(R2),X'00'        END OF DSN ?
         BNE   Z390SEQL           LOOP IF NOT
         MVC   0(12,R9),=C'SEQI0001.TXT'
         ST    R9,TCTTEQFL        SAVE FILENAME ADDRESS
         LA    R9,SEQRCVE         RECEIVE DCB
         ST    R9,TCTTEQDI        SAVE IT
         LA    R9,SEQSEND         SEND DCB
         ST    R9,TCTTEQDO        SAVE IT
* OPEN OF SEQRCVE IS HANDLED IN EXEC CICS RECEIVE
         L     R9,TCTTEQFL        R9=FILENAME ADDRESS
         MVI   3(R9),C'O'         SET TO SEQO0001.TXT
         OPEN  (SEQSEND,OUTPUT)   OPEN SEND FILE
         B     OPEN3270           EXIT
*
OPENRMTE EQU   *
* REMOTE, MUST ASK FOR TERMID/TRANSID
         LA    R6,KCPREQTM        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=200,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLC   KCPRCFN,=C'04FE'   CHECK IT'S RIGHT
         BE    TERMERR            EXIT IF REQUEST FAILED
         CLC   KCPRCFN,=C'04FF'   CHECK IT'S RIGHT
         BNE   TCPIOERR           EXIT IF NOT
         MVC   TCTTETI,KCPRCTRM   SAVE REQUESTED TERMID
         MVC   TCTTEINT,KCPRCTRN  SET INITIAL TRANSID
         MVC   INIDATE,KCPRCDAT   SET DATE FORMAT
OPEN3270 EQU   *
*
* OPEN 3270 WINDOW
*
         MVC   TERM_TITLE+9(4),TCTTETI    TERMID INTO TITLE
         GUAM  WINDOW,TITLE,TERM_TITLE    SHOW WHICH TERMINAL WE ARE
         GUAM  WINDOW,LOC,0,0             POSITION WINDOW TOP LEFT
         GUAM  WINDOW,VIEW,SCREEN,24,80,0 RESET SCREEN TO 24 X 80
*
* LOAD PCT, WE DON'T DELETE IT, IT'S TOO POPULAR
* WE CAN'T USE EXEC CICS LOAD, WE DON'T HAVE AN EIB
*
         LOAD  EP=DFHPCT,LOADPT=DFHPCTAD
*
* TELL Z390CICS WE ARE UP AND RUNNING
*
         MVC   KCPUPTRM,TCTTETI   SET TERMID
         LA    R6,KCPUP           MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
*
LOCAL_MANAGER EQU *
*
* GETMAIN AND INITIALIZE EIB
* THE EIB WILL BE FREED AT TASK END
*
         GETMAIN R,LV=EIBLENG
         LR    DFHEIBR,R1         EIB BASE
         USING DFHEIBLK,DFHEIBR
         XC    DFHEIBLK(EIBLENG),DFHEIBLK CLEAR EIB
         MVC   EIBHEAD,=CL8'DFHEIB' SET HEADER
         MVC   EIBTRMID,TCTTETI   SET TERMID
         TIME  DEC                GET TIME/DATE
         ST    R0,TIMEDEC         SAVE TIME AS HHMMSSTT
         MVO   EIBTIME,TIMEDEC(3) MOVE AS PACKED
         OI    EIBTIME+3,X'0C'    SET +VE SIGN
         ST    R1,EIBDATE         SET DATE AS CCYYDDD+
         MVC   EIBDTFRM,INIDATE   SET DATE FORMAT
         OC    TCTTECA,TCTTECA    ANY RETURN COMMAREA ?
         BZ    INITTSET           EXIT IF NONE
         MVC   EIBCALEN,TCTTECAL  SET COMMAREA LENGTH
*
* INTERNAL RECEIVE FOR NEXT TRANSID
* TRANSID MAY HAVE PRECEDING SBA
*
INITTSET EQU   *
         CLI   TCTTEINT,C'-'      ANY INITIAL TRANSID ?
         BE    INITGO             EXIT IF NOT
         MVC   INITBUFF(3),=X'7D40C4' FAKE ENTER,SBA(1,5)
         MVC   INITBUFF+3(4),TCTTEINT SET INITIAL TRANSID
         MVI   KCPGOTYP,C'A'      SET INITIAL TRANSID TYPE
         MVC   TCTTEINT,=4C'-'    NEVER AGAIN
         XC    P0402TGR,P0402TGR  FAKE A GOOD RECEIVE
         B     INITFAKE           EXIT
*
INITGO   EQU   *
         CLI   TCTTEIMM,X'FF'     RETURN IMMEDIATE SET ?
         BNE   NOIMM              EXIT IF NOT
* RETURN IMMEDIATE
         MVI   TCTTEIMM,X'00'     RESET RETURN IMMEDIATE FLAG
         MVC   INITBUFF(3),=X'7D40C4' FAKE ENTER,SBA(1,5)
         MVC   INITBUFF+3(4),TCTTETC SET RETURN TRANSID
         MVI   KCPGOTYP,C'C'      SET RETURN TRANSID TYPE
         XC    P0402TGR,P0402TGR  FAKE A GOOD RECEIVE
         B     INITFAKE           EXIT
*
NOIMM    EQU   *
         LA    R6,INITBUFF        AREA TO CLEAR
         LA    R7,L'INITBUFF      LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR INITBUFF
*
INITRCVE EQU   *
         EXEC  CICS RECEIVE INTO(INITBUFF) LENGTH(INITLEN)             X
               NOHANDLE NOWAIT
*
* THE TGET RETURN CODE IS IN P0402TGR
*
INITFAKE EQU  *
* BUFFER HAS AID(1), CURSOR POS(2), DATA
*
* FIRST CHECK IF WE ARE IN SHUTDOWN MODE
*
         MVC   KCPSQTRM,EIBTRMID  SET TERMID
         LA    R6,KCPSHUTQ        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
INITQURY EQU   *
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=200,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
* GET NULL DATA SOMETIMES
         OC    KCPRCVE(4),KCPRCVE NULL DATA ?
         BZ    INITQURY           EXIT IF IT IS
         CLI   KCPSQIND,X'FF'     SHUTDOWN IN PROGRESS ?
         BE    SHUTKCP            EXIT IF IT IS
*
* NOT IN SHUTDOWN
*
         CLC   P0402TGR,=F'4'     ANYTHING RECEIVED ?
         BNE   INITPROC           EXIT IF WE HAVE
*
* WE DIDN'T RECEIVE ANYTHING
*
* TEST TO SEE IF WE HAVE AN EXPIRED ICE FOR THIS TERMINAL
* START IT IF WE DO, WAIT A WHILE IF WE DON'T
         MVC   KCPICTRM,EIBTRMID  SET TERMID
         LA    R6,KCPICEQ         MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=200,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         OC    KCPRCTRN,KCPRCTRN  ANY TRANSID ?
         BZ    INITWAIT           EXIT IF NONE
* WE HAVE A TRANSID TO START
         MVC   INITBUFF(3),=X'7D40C4' FAKE ENTER,SBA(1,5)
         MVC   INITBUFF+3(4),KCPRCTRN SET TRANSID
         MVC   EIBREQID,KCPRCRQD  SET REQID
         XC    P0402TGR,P0402TGR  FAKE A GOOD RECEIVE
         MVI   KCPGOTYP,C'D'      SET IC START TYPE
         B     INITFAKE           EXIT

INITWAIT EQU   *
         STIMER WAIT,BINTVL=INITDLAY WAIT 2 SECONDS
         B     INITRCVE           EXIT TO RETRY
*
* PROCESS WHAT WE RECEIVED
*
INITPROC EQU   *
         LA    R6,INITBUFF        R6=INITIAL TIOA ADDRESS
         ST    R6,TCTTEDA         SET IN TCTTE
         MVC   EIBAID,INITBUFF    SET AID
* PROCESS CLEAR KEY, PASS IT IF WE HAVE A PRESET TRANSID
         OC    TCTTETC,TCTTETC    ANY PRESET TRANSID ?
         BNZ   NOCLEAR            EXIT IF WE HAVE ONE
         CLI   EIBAID,DFHCLEAR    CLEAR KEY ?
         BNE   NOCLEAR            EXIT IF NOT
         EXEC  CICS SEND FROM(CLEARIT) LENGTH(CLEARLEN)
         B     INITTSET           EXIT
*
NOCLEAR  EQU   *
* CURSOR POS TO HEX EG. C1C6, ROW 1 COL 71, POS 70
         SR    R6,R6              CLEAR R6
         LR    R7,R6              CLEAR R7
         ICM   R6,8,INITBUFF+1    1ST BYTE TO TOP OF R6  C1..
         SLL   R6,2               SHIFT OUT PARITY BITS  04..
         SRL   R6,26              CONVERT TO 6 BIT VALUE ..01
         ICM   R7,8,INITBUFF+2    2ND BYTE TO TOP OF R7  ..01/C6...
         SLL   R7,2               SHIFT OUT PARITY BITS  ..01/18...
         SRDL  R6,26              COMBINE TO 12-BITS     ..../...46
         STH   R7,EIBCPOSN        SAVE IT
* TRANSID PRECEDENCE:
*    INITIAL TRANSID---ONCE OFF
*    TRANSID FROM RETURN IMMEDIATE (TCTTETC)
*    IC STARTED TRANSID
*    TRANSID FROM RETURN (TCTTETC)
*    TRANSID FROM SCREEN
         CLI   KCPGOTYP,C'D'      IC START ?
         BNE   TRYA               EXIT IF NOT
* IC STARTED TASK
* IT MAY BE INTERCEPTING A PSEUDO-CONVERSATIONAL TASK
* SO MUST NOT HARM TCTTETC
* EXEC CICS RETURN (LCL0E08) HAS MODS FOR THIS AS WELL
         MVC   EIBTRNID,INITBUFF+3 SET TRANSID
         OC    EIBTRNID,=4C' '    TRANSID TO UPPER CASE
         B     GOICTRAN           EXIT
*
TRYA     EQU   *
         CLI   KCPGOTYP,C'A'      INITIAL TRANSID ?
         BE    INITTRAN           EXIT IF IT IS
         MVI   KCPGOTYP,C'C'      SET RETURN TRANSID TYPE
         OC    TCTTETC,TCTTETC    ANY PRESET TRANSID ?
         BNZ   GOTRAN             EXIT IF WE HAVE ONE
* TRANSID FROM SCREEN
         MVI   KCPGOTYP,C'B'      SET SCREEN TRANSID TYPE
         CLI   INITBUFF+3,SBA     IS IT AN SBA ?
         BE    TISSBA             EXIT IF IT IS
INITTRAN EQU   *
         MVC   TCTTETC,INITBUFF+3 MOVE TRANSID
         B     GOTRAN             EXIT
*
TISSBA   EQU   *
         MVC   TCTTETC,INITBUFF+6 MOVE TRANSID
GOTRAN   EQU   *
         OC    TCTTETC,=4C' '     TRANSID TO UPPER CASE
         MVC   EIBTRNID,TCTTETC   SET POTENTIAL TRANSID
GOICTRAN EQU   *
         MVC   TCTTETYP,KCPGOTYP  SET THE TRANSID TYPE IN THE TCTTE
*
* SCAN PCT AND DO BLDL/LINK
* SCAN FAILURE ISSUES 'INVALID TRANSID' MSG
* BLDL FAILURE ISSUES APCT ABEND
*
         L     R6,DFHPCTAD        R6=PCT ADDRESS
PCTLOOP  EQU   *
         CLC   0(4,R6),EIBTRNID   FOUND TRANSID ?
         BE    PCTFOUND           EXIT IF IT IS
         AHI   R6,12              BUMP POINTER
         CLI   0(R6),X'FF'        STOPPER ?
         BE    INVTRAN            EXIT IF BAD TRANSID
         B     PCTLOOP            LOOP
*
PCTFOUND EQU   *
         MVC   BLDLNAME,4(R6)     SAVE PROGRAM NAME
         BLDL  0,BLDLLIST         BLDL
         LTR   R15,R15            RC=4 IF ENTRY NOT FOUND
         BNZ   INVPROG            EXIT IF NOT FOUND
*
* THE PROGRAM EXISTS
*
* TELL Z390CICS WE ARE STARTING A TRANSID
* THIS IS ALSO A REQUEST FOR A TASK NUMBER
* IF SHUTDOWN IS IN PROGRESS, THE REQUEST IS REJECTED
*
         MVC   KCPGOTRM,EIBTRMID  SET TERMID
         MVC   KCPGOTRN,EIBTRNID  SET TRANSID
         LA    R6,KCPGO           MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         MVI   KCPGOTYP,C' '      CLEAR TRANSID TYPE
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=200,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         PACK  EIBTASKN,KCPRCTSK  SAVE TASK NUMBER
*
* SAVE PASSED COMMAREA INFO
*
         MVC   COMMADDR,TCTTECA   SAVE COMMAREA ADDRESS
         MVC   COMMLEN+2(2),TCTTECAL SAVE COMMAREA LENGTH
*
* GO TO THE INITIAL PROGRAM
* THE ONLY COMMAREA WE CAN PASS HERE IS ONE FROM RETURN COMMAREA
         XC    TCTTELNK,TCTTELNK  SET LEVEL 0
         EXEC  CICS LINK PROGRAM(BLDLNAME) COMMAREA(TCTTECA)           X
               LENGTH(TCTTECAL) LEVEL0
*
TASKRETN EQU   *
* WE COME HERE AFTER TASK END OR ABEND
* ENSURE OUR 1ST BASE IS CORRECT
         LR    R13,R3             RE-ESTABLISH
         AHI   R13,-4096                       1ST BASE
*
* FN=12FC  TELL Z390CICS TO DEQALL
*
         MVC   KCPDQTRM,EIBTRMID  SET TERMID
         LA    R6,KCPDQALL        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
*
* FN=0EFF  TELL Z390CICS THAT TRANSID HAS ENDED
*
         MVC   KCPNDTRN,EIBTRNID  SET TRANSID
         MVC   KCPNDTRM,EIBTRMID  SET TERMID
         MVC   KCPNDTSK,EIBTASKN  SET TASK NUMBER
         LA    R6,KCPEND          MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         CLI   TCTTETS,X'FF'      CEMT S TER OUT REQUEST ?
         BE    SHUTKCP            EXIT IF IT IS
*
* FREE ABEND BLOCK IF ANY
*
         ICM   R1,15,TCTTEABD     ANY ABEND BLOCK ADDRESS ?
         BZ    FREEGTM            EXIT IF NONE
         AHI   R1,-8              R1=ORIGIN ADDRESS
         FREEMAIN LV=ABDLENG*25+8
         XC    TCTTEABD,TCTTEABD  CLEAR ABEND BLOCK ANCHOR
*
* FREE GETMAIN CHAIN
*
FREEGTM  EQU   *
         ICM   R1,15,TCTTESCC     R1=NEXT GETMAIN ADDRESS
         BZ    FREEEIB            EXIT IF NONE
         MVC   TCTTESCC,0(R1)     MOVE NEXT CHAIN ADDRESS
         FREEMAIN LA=4(R1)        FREEMAIN
         B     FREEGTM            LOOP
*
* FREE EIB
*
FREEEIB  EQU   *
         FREEMAIN A=(DFHEIBR),LV=EIBLENG
*
* POST RETURN COMMAREA PROCESSING
*    ANY PREVIOUS COMMAREA ?
*       NO  --- EXIT
*       YES --- ANY RETURN COMMAREA ?
*               NO  --- FREEMAIN PREVIOUS COMMAREA
*               YES --- SAME ADDRESS ?
*                          YES --- EXIT
*                          NO  --- FREEMAIN PREVIOUS COMMAREA
*
         OC    COMMADDR,COMMADDR  ANY PREVIOUS COMMAREA SUPPLIED ?
         BZ    LOCAL_MANAGER      EXIT IF NOT
* THERE IS A PREVIOUS COMMAREA
         OC    TCTTECA,TCTTECA    ANY COMMAREA PASSED ?
         BZ    FREECOMM           EXIT IF NONE
* RETURN WITH COMMAREA
         CLC   TCTTECA,COMMADDR   SAME ADDRESS ?
         BE    LOCAL_MANAGER      EXIT IF IT IS
*
FREECOMM EQU   *
* THERE WAS A PREVIOUS COMMAREA, FREEMAIN IT
         FREEMAIN A=COMMADDR,LA=COMMLEN
         XC    COMMADDR,COMMADDR  CLEAR PREVIOUS COMMAREA ADDRESS
         B     LOCAL_MANAGER      EXIT
*
INVTRAN  EQU   *
*
* INVALID TRANSACTION
*
         LA    R7,AC2001          MSG ADDRESS
         USING MSG,R7
         BAL   R9,TMDTPROC        ERROR MSG TO SCREEN
         XC    TCTTETC,TCTTETC    NO PRESET TRANSID
         EXEC  CICS SEND FROM(AC2001) LENGTH(AC2001L)
         DROP  R7                 DROP MSG BASE
         B     FREEEIB2           EXIT
*
INVPROG  EQU   *
*
* ABEND APCT
*
         LA    R7,AC2206          MSG ADDRESS
         USING MSG,R7
         MVC   MSGPROG,4(R6)      BAD PROGRAM TO MSG
         MVC   MSGABCDE,=C'APCT'  ABEND CODE TO MSG
         BAL   R9,TMDTPROC        ERROR MSG TO SCREEN
         XC    TCTTETC,TCTTETC    NO PRESET TRANSID
         EXEC  CICS SEND FROM(AC2206) LENGTH(AC2206L)
         DROP  R7                 DROP MSG BASE
* FREE EIB
FREEEIB2 EQU   *
         FREEMAIN A=(DFHEIBR),LV=EIBLENG
         B     LOCAL_MANAGER      EXIT
*
TERMERR  EQU   *
         MVC   KCPXXCDE,=C'MM01'  SET ABEND CODE
         B     ABORT              EXIT
*
PARMERR  EQU   *
         MVC   KCPXXCDE,=C'MM02'  SET ABEND CODE
         B     ABORT              EXIT
*
TCPIOERR EQU   *
         MVC   KCPXXCDE,=C'MM03'  SET ABEND CODE
         B     ABORTIMM           EXIT
*
* ABORT Z390KCP WITH RC=16
*
ABORT    EQU   *
         MVC   KCPXXTRM,TCTTETI   SET TERMID
         MVC   KCPXXTRN,=4C' '    NO TRANSID
         LA    R6,KCPABORT        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
ABORTIMM EQU   *
         SUBEXIT RC=16
*
* SHUTTERM REQUESTED
* TELL Z390CICS, END Z390KCP
*
SHUTKCP  EQU   *
* FN=12FE  Z390KCP SHUTTERM REQUEST
         GUAM  WINDOW,VIEW,SCREEN CLOSE SCREEN
         MVC   KCPSHTRM,EIBTRMID  SET TERMID
         LA    R6,KCPSHUT         MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO CLOSE,PORT=3900    CLOSE CLIENT
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLC   TCTTETI,=C'SQ01'   SEQUENTIAL TERMINAL ?
         BNE   SHUTIT             EXIT IF NOT
         CLOSE SEQSEND            CLOSE IT
SHUTIT   EQU   *
         SUBEXIT
*
* ESTAE APPLICATION ABEND ROUTINE
* IF HANDLE CONDITION OR HANDLE ABEND ARE ACTIVE,
* TAKE THE CORRECT ACTION
*
APPABEND DS    0H
* R1 POINTS TO ESTAD
* R15 IS BASE
*
* AT THE ABEND POINT WE HAVE THE FOLLOWING MARKERS:
*    1) HANDLE CONDITION INCIDENT
*       AL3(0),C'ABEND',A(IGNORE ADDRESS)
*
*    2) AN EXEC CICS ABEND, REQUEST DUMP XXXX
*       X'0000FE',C'ABEND',C'XXXX'
*
*    3) AN EXEC CICS ABEND, REQUEST NODUMP
*       X'0000FF',C'ABEND',C'????'
*
*    IF NO MARKER RECOGNISED, WE HAVE REALLY ABENDED
*
         USING SDWA,R1            SDWA PASSED TO ESTAE EXIT RPI 845
* SWITCH BASE
         USING *,R12
         LR    R12,R15            R12=NEW BASE
         L     R6,SDWAEC1+4       R6=ABEND ADDRESS (EC1 PSW RPI 845)
         CLC   0(8,R6),APPABCDE   IS IT AN HC MARKER ?
         BNE   APPABORT           NO, IT'S A REAL ABEND
* ABEND CONDITION HAS ARISEN
         L     R9,SDWAXPAD        GET SDWA PTRS TO EXTENSIONS   RPI 845
         USING SDWAPTRS,R9                                      RPI 845
         L     R9,SDWAXEME        GET SDWA RC4 REGISTER EXTENSION   845
         USING SDWARC4,R9                                       RPI 845
         L     R9,SDWAG64+(8*R13)+4 R9=DSA ADDRESS              RPI 845
         USING DFHEISTG,R9
         ICM   R7,15,DFHEIHCN     ANY HANDLE CONDITION BLOCK ?
         BZ    APPABBLK           EXIT IF NONE
         USING DFHHCBLK,R7
         DROP  R9                 DROP TEMP DSA BASE
APPHCLP  EQU   *
         OC    HCNCHAIN,HCNCHAIN  IS THERE A CHAIN ?
         BZ    APPHCEND           EXIT IF END OF CHAIN
         L     R7,HCNCHAIN        R7=NEXT CONDITION BLOCK
         B     APPHCLP            LOOP UNTIL END
*
APPHCEND EQU   *
* LAST CONDITION BLOCK LOCATED
         L     R8,EIBRESP         R8=RESP OF CONDITION
         SLL   R8,2               * 4 = INDEX
         LA    R8,12(R7,R8)       R8=12 (PREFIX) + INDEX + COND. BLOCK
         OC    0(4,R8),0(R8)      ANY HANDLE CONDITION ?
         BNZ   APPHANDL           EXIT IF THERE IS
* NO SPECIFIC HANDLE, THIS IS AN ABEND, SO CHECK ERROR
         LA    R8,HCNERROR        R8=HANDLE ERROR ADDRESS
         DROP  R7                 DROP HANDLE BLOCK BASE
         OC    0(4,R8),0(R8)      ANY HANDLE CONDITION ERROR ?
         BZ    APPABBLK           EXIT IF NONE
APPHANDL EQU   *
* GOT A HANDLE/IGNORE CONDITION
         CLC   0(4,R8),=4X'FF'    IS IT IGNORE CONDITION ?
         BNE   APPNTIGN           EXIT IF NOT
* IT'S AN IGNORE, GO TO THE IGNORE ADDRESS (IT MIGHT BE 0)
APPIGNOR EQU   *
         L     R8,SDWAEC1+4       ABEND ADDRESS FROM SDWA PSW RPI 845
         L     R0,8(R8)           SET IGNORE ADDRESS
         LA    R15,4              TELL SVC 3 TO USE R0
         BR    R14                GO TO THE IGNORE ADDRESS
*
APPNTIGN EQU   *
* IT'S A REAL HANDLE, SET THE ADDRESS
         L     R0,0(R8)           SET THE HANDLE ADDRESS
         LA    R15,4              TELL SVC 3 TO USE R0
         BR    R14                GO TO THE HANDLE CONDITION
*
APPABORT EQU   *
* R6 POINTS TO ABEND ADDRESS...
*    X'0000FE',C'ABEND',C'XXXX'  AN EXEC CICS ABEND, REQUEST DUMP XXXX
*    X'0000FF',C'ABEND',C'????'  AN EXEC CICS ABEND, REQUEST NODUMP
*    IF NO MARKER RECOGNISED, WE HAVE REALLY ABENDED
         L     R7,=A(AC2206)      MSG ADDRESS
         USING MSG,R7
         LA    R8,999             SET THE DEFAULT SNAP ID
         MVC   APPABMSG+6(4),=C'ASRA' DEFAULT ABEND CODE FOR SNAP
         MVC   MSGABCDE,=C'ASRA'  DEFAULT ABEND CODE TO MSG
         CLC   0(8,R6),APPREQDM   IS IT AN ABEND REQUEST WITH DUMP ?
         BNE   APPNTRQD           EXIT IF NOT
         LA    R8,998             SET ABEND REQUEST SNAP ID
         MVC   APPABMSG+6(4),8(R6) SET THE ABCODE REQUESTED FOR SNAP
         MVC   MSGABCDE,8(R6)     ABEND CODE TO MSG
         B     APPDUMP            EXIT
*
APPNTRQD EQU   *
         CLC   0(8,R6),APPREQND   IS IT AN ABEND REQUEST WITH NO DUMP ?
         BNE   APPDUMP            EXIT IF NOT
         MVC   MSGABCDE,8(R6)     ABEND CODE TO MSG
         DROP  R7                 DROP MSG BASE
         B     APPNODMP           EXIT
*
APPDUMP  EQU   *
* ALWAYS TAKE A DUMP FOR ASRA
* ALWAYS TAKE A DUMP FOR REQUESTED ABEND WITH DUMP
         LR    R7,R1              SAVE ESTAD BASE
         LA    R1,APPABMSG        TEXT FOR SNAP
         SNAP  PDATA=ALL,ID=(R8),TEXT=(R1)
         LR    R1,R7              RESTORE ESTAD BASE
APPNODMP EQU   *
         L     R7,=A(AC2206)      MSG ADDRESS
         USING MSG,R7
         MVC   MSGPROG,EIBPROG    ABENDING PROGRAM TO MSG
         DROP  R7                 DROP MSG BASE
         B     APPTABDN           EXIT
*
APPABBLK EQU   *
* CONDITION RAISED BUT NO HANDLE OR IGNORE
* TAKE DUMP WITH CONDITION ABEND CODE
*
* SOME CONDITIONS HAVE IGNORE AS DEFAULT
         CLC   EIBRESP,DFHRESP(EXPIRED) EXPIRED ?
         BE    APPIGNOR           EXIT IF IT IS
         L     R7,=A(AC2206)      MSG ADDRESS
         USING MSG,R7
         MVC   MSGPROG,EIBPROG    ABENDING PROGRAM TO MSG
         MVC   MSGABCDE,=4C'?'    DEFAULT ABEND CODE TO MSG
         MVC   APPABMSG+6(4),=4C'?' DEFAULT ABEND CODE TO SNAP TEXT
         LA    R8,APPABTAB        R8=ABEND CODE TABLE
APPTABLP EQU   *
         CLC   EIBRESP,0(R8)      MATCH ?
         BNE   APPTABIN           EXIT IF NOT
         MVC   MSGABCDE,4(R8)     ABEND CODE TO MSG
         MVC   APPABMSG+6(4),4(R8) ABEND CODE TO SNAP TEXT
         DROP  R7                 DROP MSG BASE
         B     APPTABDN           EXIT
*
APPABTAB DS    0F
         DC    F'11',C'AEIK'      TERMIDERR
         DC    F'12',C'AEIL'      FILENOTFOUND
         DC    F'13',C'AEIM'      NOTFND
         DC    F'14',C'AEIN'      DUPREC
         DC    F'15',C'AEIO'      DUPKEY
         DC    F'16',C'AEIP'      INVREQ
         DC    F'17',C'AEIQ'      IOERR
         DC    F'18',C'AEIR'      NOSPACE
         DC    F'19',C'AEIS'      NOTOPEN
         DC    F'20',C'AEIT'      ENDFILE
         DC    F'21',C'AEIU'      ILLOGIC
         DC    F'22',C'AEIV'      LENGERR
         DC    F'26',C'AEIZ'      ITEMERR
         DC    F'27',C'AEI0'      PGMIDERR
         DC    F'28',C'AEI1'      TRANSIDERR
         DC    F'29',C'AEI2'      ENDDATA
         DC    F'31',C'AEI4'      EXPIRED
         DC    F'36',C'AEI9'      MAPFAIL
         DC    F'38',C'AEYB'      INVMPSZ
*                40               OVERFLOW CANNOT ABEND
         DC    F'44',C'AEYH'      QIDERR
*                55               ENQBUSY CANNOT ABEND
         DC    F'56',C'AEYT'      ENVDEFERR
         DC    F'84',C'AEXL'      DISABLED
         DC    X'FF'              STOPPER
*
APPTABIN DS    0H
         AHI   R8,8               BUMP TABLE ADDRESS
         CLI   0(R8),X'FF'        STOPPER ?
         BNE   APPTABLP           LOOP IF NOT
*
* HANDLE ABEND PROCESSING
*
APPTABDN EQU   *
         ICM   R8,15,TCTTEABD     ANY ABEND BLOCK ?
         BZ    APPTERMI           EXIT IF NONE
         LA    R8,24*ABDLENG(R8)  POINT TO 25TH (LAST) ENTRY
         USING ABDDEST,R8
APPHALP  EQU   *
         OC    ABDDEST,ABDDEST    ANY ABEND BLOCK HERE ?
         BZ    APPHADEC           EXIT IF NONE
* FOUND A HANDLE ABEND ENTRY
         OC    ABDACTIV,ABDACTIV  IS IT ACTIVE ?
         BNZ   APPHADEC           EXIT IF NOT
* FOUND AN ACTIVE HANDLE ABEND ENTRY
         MVC   ABDACTIV,=X'FFFF'  MAKE IT INACTIVE TO STOP RECURSION
         CLI   ABDDEST,X'00'      LABEL OR PROGRAM ?
         BNE   APPABPRG           EXIT IF PROGRAM
* ACTIVE HANDLE ABEND LABEL()
* EXIT ESTAE
         ST    R8,APPSAVAB        SAVE ABEND BLOCK ENTRY ADDRESS
         LA    R0,APPHALAB        SET RETURN ADDRESS
         LA    R15,4              TELL SVC 3 TO USE R0
         BR    R14                EXIT TO APPHALAB
*
APPHADEC EQU   *
         C     R8,TCTTEABD        JUST PROCESSED 1ST ENTRY ?
         BE    APPTERMI           YES, NO ACTIVE HANDLE ABEND
         AHI   R8,-ABDLENG        SCAN BACKWARDS
         B     APPHALP            LOOP
*
* GOTO HANDLE ABEND LABEL()
*
APPHALAB EQU   *
         BALR  R7,0               TEMP BASE
         USING *,R7
         L     R8,APPSAVAB        RESTORE ABEND BLOCK ENTRY ADDRESS
         DROP  R7                 DROP TEMP BASE
         L     R15,ABDDEST+4      SET LABEL() ADDRESS
         LM    R2,R12,ABDREGS     RESTORE HANDLE ABEND ISSUER REGS
         LA    R1,ZCVTSDWA        RE-ESTABLISH SDWA BASE RPI 845
         USING SDWA,R1
         L     R9,SDWAXPAD        GET SDWA PTRS TO EXTENSIONS   RPI 845
         USING SDWAPTRS,R9                                      RPI 845
         L     R9,SDWAXEME        GET SDWA RC4 REGISTER EXTENSION   845
         USING SDWARC4,R9                                       RPI 845
         L     R13,SDWAG64+(8*R13)+4 RESTORE THE ABENDING PROGRAMS DSA
         BR    R15                GO TO LABEL()
*
* NO CONDITION HANDLING
* NO HANDLE ABEND BLOCK OR NO ACTIVE ENTRY
* EXIT ESTAE, WE ARE GOING TO ABEND
*
APPTERMI EQU   *
         BALR  R7,0               TEMP BASE
         USING *,R7
         LA    R0,APPTERMT        SET RETURN ADDRESS
         DROP  R7                 DROP TEMP BASE
         LA    R15,4              TELL SVC 3 TO USE R0
         BR    R14                EXIT TO APPTERMT
*
APPABPRG EQU   *
* ACTIVE HANDLE ABEND PROGRAM()
* EXIT ESTAE
         ST    R8,APPSAVAB        SAVE ABEND BLOCK ENTRY ADDRESS
         LA    R0,APPHAPRG        SET RETURN ADDRESS
         LA    R15,4              TELL SVC 3 TO USE R0
         BR    R14                EXIT TO APPHAPRG
*
APPHAPRG EQU   *
         BALR  R7,0               TEMP BASE
         USING *,R7
         L     R8,APPSAVAB        RESTORE ABEND BLOCK ENTRY ADDRESS
* COPY XCTL PARMS BECAUSE OF ADDRESSING PROBLEMS
         MVC   APPPROG,ABDDEST    COPY PROGRAM NAME
         MVC   APPCOMM,ABDCOMM    COPY COMMAREA ADDRESS
         MVC   APPCALEN,ABDCALEN  COPY COMMAREA LENGTH
         LA    R1,ZCVTSDWA        RE-ESTABLISH ESTAE BASE     RPI 845
         USING SDWA,R1
         L     R9,SDWAXPAD        GET SDWA PTRS TO EXTENSIONS   RPI 845
         USING SDWAPTRS,R9                                      RPI 845
         L     R9,SDWAXEME        GET SDWA RC4 REGISTER EXTENSION   845
         USING SDWARC4,R9                                       RPI 845
         L     R13,SDWAG64+(8*R13)+4 RESTORE THE ABENDING PROGRAMS DSA
         DROP  R1                 DROP ESTAD BASE
         USING DFHEISTG,R13
         OC    APPCOMM,APPCOMM    ANY COMMAREA ?
         BZ    APPXCTL2           EXIT IF NONE
         EXEC  CICS XCTL PROGRAM(APPPROG)                              X
               COMMAREA(APPCOMM) LENGTH(APPCALEN)
*
APPXCTL2 EQU   *
         EXEC  CICS XCTL PROGRAM(APPPROG)
APPSAVAB DS    AL4
         DROP  R7,R13             DROP TEMP BASE AND DSA BASE
*
APPTERMT DS    0H
* NO HANDLES, NOW CLEAN THE TASK AND ABEND
         DROP  R3                 DROP MAIN BASE 2
         BALR  R12,0              TEMP BASE 1
         USING *,R12
         L     R7,=A(AC2206)      MSG ADDRESS
         USING MSG,R7
         BAL   R9,TMDTPROC        ERROR MSG TO SCREEN
         EXEC  CICS SEND FROM(=A(AC2206)) LENGTH(AC2206L2)
         DROP  R7                 DROP MSG BASE
*
* CLEANER
*
* VERY SIMILAR TO CLEANUP AFTER RETURN
* R8 HOLDS EIBRESP, DON'T DESTROY IT
*
* FREE RETURN COMMAREA
*
         OC    TCTTECA,TCTTECA    ANY RETURN COMMAREA ?
         BZ    CLEANPRT           EXIT IF NONE
         LH    R0,TCTTECAL        R0=COMMAREA LENGTH
         FREEMAIN A=TCTTECA,LV=(R0)
         CLC   TCTTECA,COMMADDR   SAME AS LAST PASSED COMMAREA ?
         BNE   CLEANPRT           EXIT IF NOT
         XC    COMMADDR,COMMADDR  CLEAR LAST PASSED COMMAREA
CLEANPRT EQU   *
*
* CLEAR PRESET TRANSID
*
         XC    TCTTETC,TCTTETC    CLEAR PRESET TRANSID
*
* DON'T NEED TO CLEAN ABEND BLOCK OR GETMAIN CHAIN HERE,
* BETTER DONE AT TASK END
*
         L     R7,TCTTELKA        R7=LKA ADDRESS
         AHI   R7,4               AVOID US
CLEANDLP EQU   *
         USING DFHEISTG,R6
         ICM   R6,15,0(R7)        ANY DSA HERE ?
         BZ    CLEANLKA           EXIT IF NO MORE
         BAL   R9,CLEANSUB        CLEAR CONTROL BLOCKS CHAINED FROM DSA
*
* FREE EACH DSA
*
         FREEMAIN A=(R6),LV=DFHEILEN
         AHI   R7,4               BUMP LKA
         B     CLEANDLP           LOOP
*
* CLEAR LKA (BUT NOT 1ST ENTRY)
*
CLEANLKA EQU   *
         XC    TCTTECA(6),TCTTECA CLEAR RETURN COMMAREA ADDRESS/LENGTH
         L     R7,TCTTELKA        R7=LKA ADDRESS
         XC    4(96,R7),4(R7)     CLEAR LKA (NOT 1ST ENTRY)
*
* DELETE ANY IC TS Q
*
         OC    EIBREQID,EIBREQID  ANY REQID ?
         BZ    CLEANDUN           EXIT IF NOT
         MVC   APPRESP,EIBRESP    SAVE THE ORIGINAL RESP
         EXEC  CICS DELETEQ TS QUEUE(EIBREQID) NOHANDLE
         MVC   EIBRESP,APPRESP    RESTORE THE ORIGINAL RESP
CLEANDUN EQU   *
*
* FN=0EFE  TELL Z390CICS THAT TRANSID HAS ABENDED
*
         MVC   KCPABTRN,EIBTRNID  SET TRANSID
         MVC   KCPABTRM,EIBTRMID  SET TERMID
         MVC   KCPABTSK,EIBTASKN  SET TASK NUMBER
         MVC   KCPABCDE,AC2206_ABCODE SET ABEND CODE
         MVC   APPABMSG+6(4),KCPABCDE SET ABEND CODE FOR SNAP
         LA    R6,KCPABD          MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
*
* TAKE SNAP AND EXIT TO LABEL AFTER OUR LINK
*
         L     R1,TCTTELKA        R1=LKA ADDRESS
         L     R13,0(R1)          LOAD Z390KCP DSA/SAVE AREA ADDRESS
         L     R0,EIBRESP         SET SNAP ID TO EIBRESP
         LA    R1,APPABMSG        SET SNAP TEXT ADDRESS
         RESTORE (R14,R15)        RESTORE OUR REGS
         RESTORE (R2,R12)         RESTORE OUR REGS
         SNAP  PDATA=ALL,ID=(R0),TEXT=(R1)
         J     TASKRETN           EXIT
*
APPABCDE DC    AL3(0),C'ABEND'    HANDLE CONDITION INCIDENT
APPREQDM DC    X'0000FE',C'ABEND' ABEND WITH DUMP
APPREQND DC    X'0000FF',C'ABEND' ABEND WITHOUT DUMP
*
APPPROG  DS    CL8                COPY OF ABEND PROGRAM
APPCOMM  DS    A                  COPY OF ABEND COMMAREA ADDRESS
APPCALEN DS    H                  COPY OF ABEND COMMAREA LENGTH
APPABMSG DC    C'ABEND XXXX',X'00'
APPRESP  DS    F                  SAVE EIBRESP
*
* ESTAE SUBROUTINE
*
CLEANSUB DS    0H
* R6=DSA BASE
* ONLY DSA DEPENDANT FREEMAINS HERE
*
* FREE XCTL PARM AREA
*
         MVI   TCTTECND,X'00'     CLEAR XCTL INDICATOR
         OC    DFHEIPRM,DFHEIPRM  ANY XCTL PARM AREA ?
         BZ    CLEANCA            EXIT IF NONE
         FREEMAIN A=DFHEIPRM,LV=8
*
* FREE COMMAREA
*
CLEANCA  EQU   *
         OC    DFHEICAP,DFHEICAP  ANY COMMAREA ?
         BZ    CLEANAID           EXIT IF NONE
         CLC   DFHEICAP,TCTTECA   SAME COMMAREA JUST FREED ?
         BE    CLEANAID           EXIT IF IT IS
* COMPLEX SITUATIONS LIKE ABEND HANDLED BY PROGRAM CAN LEAVE A
* COMMAREA ADDRESS WITH ZERO LENGTH
         SR    R0,R0              CLEAR R0
         ICM   R0,3,EIBCALEN      R0=COMMAREA LENGTH
         BZ    CLEANAID           EXIT IF ZERO
         FREEMAIN A=DFHEICAP,LV=(R0)
         XC    EIBCALEN,EIBCALEN  CLEAR COMMAREA LENGTH
*
* FREE ALL AID BLOCKS
*
CLEANAID EQU   *
         USING DFHADBLK,R1
         ICM   R1,15,DFHEIAID     ANY AID BLOCK ADDRESSES ?
         BZ    CLEANHCN           EXIT IF NONE
CLEANALP EQU   *
         L     R7,AIDCHAIN        R7=NEXT AID BLOCK IF ANY
         FREEMAIN LV=AIDLENG
         LTR   R1,R7              ANY MORE AID BLOCKS ?
         BNZ   CLEANALP           LOOP IF THERE ARE
*
CLEANHCN EQU   *
         DROP  R1                 DROP AID BLOCK ADDRESS
*
* FREE ALL HANDLE CONDITION BLOCKS
*
         USING DFHHCBLK,R1
         ICM   R1,15,DFHEIHCN     ANY CONDITION BLOCK ADDRESSES ?
         BZR   R9                 RETURN IF NONE
CLEANHLP EQU   *
         L     R7,HCNCHAIN        R7=NEXT CONDITION BLOCK IF ANY
         FREEMAIN LV=HCNLENG
         LTR   R1,R7              ANY MORE CONDITION BLOCKS ?
         BNZ   CLEANHLP           LOOP IF THERE ARE
         BR    R9                 RETURN
*
AC2206L2 DC    AL2(AC2206Q)
* DROP HANDLE BLOCK BASE  (R1)
* DROP TEMP DSA BASE      (R6)
* DROP TEMP BASE 1        (R12)
         DROP  R1,R6,R12
*
* SUBROUTINE SHARED BY MULTIPLE BASES
*
TMDTPROC EQU   *
         BALR  R14,0              SET TEMPORARY BASE
         USING *,R14
         USING MSG,R7
         CLI   INIDATE,C'K'       DMY FORMAT ?
         BNE   TMDTNTUK           EXIT IF NOT
         TIME  DEC,TIMEDEC,DATETYPE=DDMMYYYY,LINKAGE=SYSTEM
         MVC   DATEHERE,DATEEDIT  MOVE EDIT WORD
         B     TMDTEDIT
*
TMDTNTUK EQU   *
         CLI   INIDATE,C'U'       MDY FORMAT ?
         BNE   TMDTNTUS           EXIT IF NOT
         TIME  DEC,TIMEDEC,DATETYPE=MMDDYYYY,LINKAGE=SYSTEM
         MVC   DATEHERE,DATEEDIT  MOVE EDIT WORD
         B     TMDTEDIT
*
TMDTNTUS EQU   *
         TIME  DEC,TIMEDEC,DATETYPE=YYYYMMDD,LINKAGE=SYSTEM
         MVC   DATEHERE,DATEEDT2  MOVE EDIT WORD
TMDTEDIT EQU   *
         MVO   TMDTPACK,DATEDEC   PACKED DATE
         ED    DATEHERE,TMDTPACK  EDIT DATE
         MVC   MSGDATE,DATEHERE+2 MOVE DATE TO MSG
         MVO   TMDTPACK,TIMEDEC   PACKED TIME
         MVC   TIMEHERE,TIMEEDIT  MOVE EDIT WORD
         ED    TIMEHERE,TMDTPACK  EDIT TIME
         MVC   MSGTIME,TIMEHERE+2 MOVE TIME TO MSG
         MVC   MSGTRAN,EIBTRNID   MOVE TRANSID TO MSG
         BR    R9                 RETURN
*
TIMEDEC  DS    XL4                SAVE TIME HHMMSSTT
         DS    CL4
DATEDEC  DS    CL4                SAVE DATE DDMMYYYY
TMDTPACK DC    PL5'0'
DATEEDIT DC    X'F02120206120206120202020'
DATEEDT2 DC    X'F02120202020612020612020'
TIMEEDIT DC    X'F02120207A20207A20204B2020'
DATEHERE DS    CL12
TIMEHERE DS    CL13
         LTORG
         DROP  R7,R14             DROP TEMPORARY BASE AND MSG BASE
*
* SUBROUTINES
*
         USING Z390KCP+8,R13      RESTORE ORIGINAL BASE
TCPSEND  DS    0H
         L     R8,0(R6)           R8=MESSAGE LENGTH
         TCPIO SEND,MSG=(R6),LMSG=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         JNZ   TCPIOERR           EXIT IF BAD
         BR    R9                 RETURN
*
* Z390KCP DATA AREAS
*
DFHPCTAD DS    A                  PCT ADDRESS
*
COMMADDR DC    A(0)               COMMAREA ADDRESS LAST PASSED
COMMLEN  DC    F'0'               COMMAREA LENGTH LAST PASSED
*
INITBUFF DS    CL2000             INITIAL BUFFER
INITDLAY DC    F'200'             NOWAIT DELAY OF 2 SECONDS
INITLEN  DS    H                  RECEIVED LENGTH
INIDATE  DS    C                  DATE FORMAT: K=DMY  S=MDY  R=YMD
*
BLDLLIST DC    H'1'               BLDL LIST WITH 1 ENTRY
         DC    H'12'              BLDL ENTRY LENGTH
BLDLNAME DC    CL8' '             BLDL ENTRY NAME TO FIND
         DC    XL4'00'
*
SEQENV   DC    C'Z390SEQ',X'00'   Z390SEQ ENV VARIABLE
SEQFILE  DC    XL80'00'           PATH AND FILE FOR SEQ TERM
*
* MESSAGES
*
TERM_TITLE DC C'TERMINAL TTTT',X'00'
*
CLEARIT  TN3270 ESC,WRT_EW,WCC_KD,(SBA,1,1),IC
CLEARLEN DC    AL2(*-CLEARIT)
*
AC2001   TN3270 WCC_KD,(SBA,24,1)
         DC    C'DFHAC2001 '
         DS    CL10               DD/MM/YYYY
         DC    C' '
         DS    CL11               HH:MM:SS.SS
         DC    C' TRANSID='
         DS    CL4                TRANSID
         DC    C' IS NOT RECOGNISED'
         DC    CL(80-(*-AC2001))' '
         TN3270 (SBA,1,1),(SF,ATT_UA),IC
AC2001L  DC    AL2(*-AC2001)
*
AC2206   TN3270 WCC_KD,(SBA,24,1)
         DC    C'DFHAC2206 '
         DS    CL10               DD/MM/YYYY
         DC    C' '
         DS    CL11               HH:MM:SS.SS
         DC    C' TRANSID='
         DS    CL4                TRANSID
         DC    C' PROG='
         DS    CL8                PROGRAM
         DC    C' ABENDED '
AC2206_ABCODE DS   CL4            ABEND CODE
         DC    CL(80-(*-AC2206))' '
         TN3270 (SBA,1,1),(SF,ATT_UA),IC
AC2206Q  EQU   *-AC2206
AC2206L  DC    AL2(*-AC2206)
*
* FORMAL MESSAGE REQUESTS AND INFO TO Z390CICS
*
KCPUP    DS    0F
* Z390KCP INITIALIZED
         DC    A(KCPUPEND-*)
         DC    C'12FF'
KCPUPTRM DS    CL4
KCPUPEND EQU   *
*
KCPSHUT  DS    0F
* SHUTTERM REQUEST
*    CEMT S TER OUT
*    CEMT P SHUT
         DC    A(KCPSHEND-*)
         DC    C'12FE'
KCPSHTRM DS    CL4
KCPSHEND EQU   *
*
KCPABORT DS    0F
* Z390KCP ABORTED
         DC    A(KCPXXEND-*)
         DC    C'12FD'
KCPXXTRM DS    CL4
KCPXXTRN DS    CL4
KCPXXCDE DS    CL4
KCPXXEND EQU   *
*
KCPREQTM DS    0F
* REQUEST TERMID/INITIAL TRANSID
         DC    A(KCPREQND-*)
         DC    C'04FF'
KCPREQND EQU   *
*
KCPGO    DS    0F
* TRANSID STARTED
         DC    A(KCPGOEND-*)
         DC    C'0E00'
KCPGOTRM DS    CL4                TERMID
KCPGOTRN DS    CL4                TRANSID
KCPGOTYP DS    C                  TYPE OF TRANSID START
*                                 REFLECT THIS IN THE TCTTE
*                                    A = .INI INITIAL TRANSID
*                                    B = SCREEN INPUT
*                                    C = RETURN TRANSID()
*                                    D = IC START
KCPGOEND EQU   *
*
KCPICEQ  DS    0F
* EXPIRED ICE REQUEST
         DC    A(KCPICEND-*)
         DC    C'10FF'
KCPICTRM DS    CL4                TERMID
KCPICEND EQU   *
*
KCPABD   DS    0F
* TRANSID ABENDED
         DC    A(KCPABEND-*)
         DC    C'0EFE'
KCPABTRM DS    CL4                TERMID
KCPABTRN DS    CL4                TRANSID
         DS    C                  NO TRANSID TYPE
KCPABTSK DS    PL4                PACKED TASK NUMBER
KCPABCDE DS    CL4                ABEND CODE
KCPABEND EQU   *
*
KCPEND   DS    0F
* TRANSID ENDED
         DC    A(KCPNDEND-*)
         DC    C'0EFF'
KCPNDTRM DS    CL4                TERMID
KCPNDTRN DS    CL4                TRANSID
         DS    C                  NO TRANSID TYPE
KCPNDTSK DS    PL4                PACKED TASK NUMBER
KCPNDEND EQU   *
*
KCPDQALL DS    0F
* DEQALL
         DC    A(KCPDQEND-*)
         DC    C'12FC'
KCPDQTRM DS    CL4                TERMID
         DC    (KCPREFIX-12)X'00' FAKE DFHKCBLK
KCPDQEND EQU   *
*
KCPSHUTQ DS    0F
* SHUTDOWN QUERY
         DC    A(KCPSQEND-*)
         DC    C'FE04'
KCPSQTRM DS    CL4                TERMID
KCPSQEND EQU   *
*
KCPRCVE  DS    0F
* RECEIVE AREA
         DS    A                  LENGTH
KCPRCFN  DS    CL4                FN
KCPRCTRM DS    CL4                TERMID
KCPRCDTA DS    CL188              DATA
         ORG   KCPRCDTA
* 04FF AREA
KCPRCTRN DS    CL4                INITIAL TRANSID
KCPRCDAT DS    C                  DATE FORMAT
         ORG   KCPRCDTA
* 10FF AREA
         DS    CL4                TRANSID
KCPRCRQD DS    XL8                REQID
         ORG   KCPRCDTA
* 0E00 AREA
KCPRCTSK DS    CL7                TASK NUMBER
         ORG   KCPRCDTA
* FE04 AREA
KCPSQIND DS    C                  SHUTDOWN INDICATOR
         ORG
*
SEQRCVE  DCB   DSORG=PS,                                               X
               RECFM=F,                                                X
               EODAD=0,                                                X
               DSNAME=SEQFILE,                                         X
               MACRF=GM,                                               X
               BLKSIZE=1,                                              X
               LRECL=1,                                                X
               SYNAD=0
*
SEQSEND  DCB   DSORG=PS,                                               X
               RECFM=F,                                                X
               DSNAME=SEQFILE,                                         X
               MACRF=PM,                                               X
               BLKSIZE=2000,                                           X
               LRECL=2000
*
         LTORG
*
* CICS MESSAGE STRUCTURE
*
MSG      DSECT
         DS    CL4                WCC/SBA
         DS    CL10               MSG ID
MSGDATE  DS    CL10               DD/MM/YYYY
         DS    C                  SPACE
MSGTIME  DS    CL11               HH:MM:SS.SS
         DS    CL9                ' TRANSID='
MSGTRAN  DS    CL4                TRANSID
         DS    CL6                ' PROG='
MSGPROG  DS    CL8                PROGRAM
         DS    CL9                ' ABENDED '
MSGABCDE DS    CL4                ABEND CODE
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
         DFHEISTG                 DSA FOR ABEND ROUTINE
         DFHADBLK                 HANDLE AID BLOCK
         DFHHCBLK                 HANDLE CONDITION BLOCK
         DFHABBLK                 HANDLE ABEND BLOCK
         DFHKCBLK                 TASK CONTROL BLOCK
*
         TN3270 SYMBOLS   DEFINE AID ENTER AND PF3 CODES
         GUAM   SYMBOLS   DEFINE GUAM GUI DIALOG WINDOW OPTIONS
         COPY   DFHAID    AID KEYS
         ZCVTD  ,         ZCVT
         IHASDWA ,        SDWA CONTROL BLOCK FOR ESTAE EXIT RPI 845
         EQUREGS
* R3  BASE 2
* R4  ZCVT
* R9  LINK REG
* R10 TCTTE
* R11 EIB
* R13 SAVE AREA AND BASE 1
         END
