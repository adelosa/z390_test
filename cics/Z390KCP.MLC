.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 05/07/06 RPI 308 - ADD INITIAL EXEC CICS SUPPORT COMMAND PROCESSOR
.* 05/08/07 RPI 609 - FIX DC XL4 TO ADD DATA PER RPI 609              
.*********************************************************************
Z390KCP  SUBENTRY BASES=(R13,R3)
*
* THE Z390/CICS LOCAL MANAGER, PREVIOUSLY CALLED CICS.MLC
*
* HANDLES ALL LOCAL SERVICES AND COMMS BETWEEN THE TASK AND THE
* GLOBAL MANAGER Z390CICS
*
* THIS IS A SINGLE TASK SYSTEM, CONTROL BLOCKS ARE GETMAINED HERE
* WE DON'T NEED THE ZCVT TO HOLD THE ADDRESSES.
*
         L     R4,=A(ZCVT)
         USING IHAZCVT,R4
*
* GETMAIN TCTTE AND CLEAR IT
* THE TCTTE IS NEVER FREED, IT GOES WHEN THE THREAD IS TERMINATED
*
         GETMAIN R,LV=TCTTELEN,A=DFHEITCT
         LR    TCTTEAR,R1        TCTTE BASE
         USING DFHTCTTE,TCTTEAR
         XC    DFHTCTTE(TCTTELEN),DFHTCTTE CLEAR TCTTE
         MVC   TCTTEHED,=CL8'TCTTE' SET HEADER
*
* THE LKA CARRIES THE DSA ADDRESS FOR EACH LINK LEVEL (TCTTELNK)
* IT'S USED TO DETERMINE WHERE WE GO BACK TO AT PROGRAM END
*
* SPACE FOR 25 LINK-LEVELS IS GETMAINED.
* NO CODING CHECKS WILL BE DONE IF THIS IS EXCEEDED.
*
* GETMAIN LKA AND CLEAR IT
* THE LKA IS NEVER FREED, IT GOES WHEN THE THREAD IS TERMINATED
*
         GETMAIN R,LV=100,A=TCTTELKA
         XC    0(100,R1),0(R1)    CLEAR LKA
         ST    R13,0(R1)          LINK-LEVEL 0 IS HERE
*
* Z390CICS PASSES TERMID AND OPTIONAL INITIAL TRANSID VIA PARM()
* TRANSID WILL BE ---- IF NONE
*
* TYPES OF PARM():
*    TERMTRAN OR TERM----   LOCAL TERMINAL SUPPORT
*                           DATA PASSED BY Z390CICS
*
*    NNN.NNN.NNN.NNN        TERMINAL REQUEST
*                           IP ADDRESS OF Z390CICS
*                           Z390CICS IS ASKED FOR TERMID
*
* SAVE THE IP ADDRESS
         SR    R6,R6              CLEAR R6
         ICM   R6,3,ZCVTPARM      R6=PARM LENGTH
         BZ    PARMERR            ERROR IF ZERO
         CH    R6,=H'15'          MAX 15 BYTES
         BH    PARMERR            ERROR IF HIGHER
         MVC   TCTTETI,=4C' '     CLEAR TERMID
         CLI   ZCVTPARM+2,C'0'    IP ADDRESS OR Z390CICS PARM ?
         BL    Z390PARM           EXIT IF Z390CICS PARM
         BCTR  R6,0               -1 FOR EXECUTE
         EX    R6,MOVEIP          MOVE THE IP ADDRESS
         B     OPENS              EXIT
MOVEIP   MVC   HOSTIPAD(0),ZCVTPARM+2 MOVE IP ADDRESS
*
Z390PARM EQU   *
* TERMINAL INITIATED FROM Z390CICS
         MVC   TCTTETI,ZCVTPARM+2 INITIALISE TERMINAL ID
         XC    TCTTETC,TCTTETC    NO INITIAL TRANSID
         CLI   ZCVTPARM+6,C'-'    ANY TRANSID ?
         BE    OPENS              EXIT IF NOT
         MVC   TCTTETC,ZCVTPARM+6 INITIALISE TRANSID
OPENS    EQU   *
*
* OPEN TCPIO CLIENT
*
         CLI   HOSTIPAD,C'*'      LOCAL HOST ?
         BNE   NEEDIPOP           EXIT IF NOT
         TCPIO OPEN,HOST=*,PORT=3900 OPEN CLIENT PORT
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         B     OPEN3270           EXIT
NEEDIPOP EQU   *
         LA    R6,HOSTIPAD        POINT TO IP ADDRESS
         TCPIO OPEN,HOST=(R6),PORT=3900 OPEN CLIENT PORT
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
* REMOTE, MUST ASK FOR TERMID
         LA    R6,KCPREQTM        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=128,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLC   KCPRCFN,=C'04FE'   CHECK IT'S RIGHT
         BE    TERMERR            EXIT IF REQUEST FAILED
         CLC   KCPRCFN,=C'04FF'   CHECK IT'S RIGHT
         BNE   TCPIOERR           EXIT IF NOT
         MVC   TCTTETI,KCPRCTRM   SAVE REQUESTED TERMID
*
* OPEN 3270 WINDOW
*
OPEN3270 EQU   *
         MVC   TERM_TITLE+9(4),TCTTETI    TERMID INTO TITLE
         GUAM  WINDOW,TITLE,TERM_TITLE    SHOW WHICH TERMINAL WE ARE
         GUAM  WINDOW,LOC,0,0             POSITION WINDOW TOP LEFT
         GUAM  WINDOW,VIEW,SCREEN,24,80,0 RESET SCREEN TO 24 X 80
*
* LOAD PCT
*
         LOAD  EP=DFHPCT,LOADPT=DFHPCTAD
*
* TELL Z390CICS WE ARE UP AND RUNNING
*
         MVC   KCPUPTRM,TCTTETI   SET TERMID
         LA    R6,KCPUP           MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
*
LOCAL_MANAGER EQU *
*
* GETMAIN AND INITIALIZE EIB
* THE EIB WILL BE FREED AT RETURN
*
         GETMAIN R,LV=EIBLENG,A=DFHEIEIB
         LR    DFHEIBR,R1         EIB BASE
         USING DFHEIBLK,DFHEIBR
         XC    DFHEIBLK(EIBLENG),DFHEIBLK CLEAR EIB
         MVC   EIBHEAD,=CL8'DFHEIB' SET HEADER
         MVC   EIBTRMID,TCTTETI   SET TERMID
         TIME  DEC                GET TIME/DATE
         ST    R0,TIMEDEC         SAVE TIME AS HHMMSSTT
         MVO   EIBTIME,TIMEDEC(3) MOVE AS PACKED
         OI    EIBTIME+3,X'0C'    SET +VE SIGN
         ST    R1,EIBDATE         SET DATE AS CCYYDDD+
         OC    TCTTECA,TCTTECA    ANY RETURN COMMAREA ?
         BZ    INITRCVE           EXIT IF NONE
         MVC   EIBCALEN,TCTTECAL  SET COMMAREA LENGTH
*
* INTERNAL RECEIVE FOR NEXT TRANSID
* TRANSID MAY HAVE PRECEDING SBA
*
INITRCVE EQU   *
* ### RECEIVE DOESN'T WORK UNLESS ATTRIB ON SCREEN
* ### REMOVE WHEN FIXED
         EXEC CICS SEND FROM(INITIAL) LENGTH(INITIAL_LEN)
         LA    R6,INITBUFF        AREA TO CLEAR
         LA    R7,L'INITBUFF      LENGTH TO CLEAR
         LA    R8,INITBUFF        AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR INITBUFF
*
         EXEC CICS RECEIVE INTO(INITBUFF) LENGTH(INITLEN)
* BUFFER HAS AID(1), CURSOR POS(2), DATA
*
* FIRST CHECK IF WE ARE IN SHUTDOWN MODE
*
         MVC   KCPSQTRM,EIBTRMID  SET TERMID
         LA    R6,KCPSHUTQ        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=128,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLC   KCPRCFN,=C'FE04'   CHECK IT'S RIGHT
         BNE   TCPIOERR           EXIT IF REQUEST FAILED
         CLI   KCPSQIND,X'FF'     SHUTDOWN IN PROGRESS ?
         BE    SHUTKCP            EXIT IF IT IS
*
         LA    R6,INITBUFF        R6=INITIAL TIOA ADDRESS
         ST    R6,TCTTEDA         SET IN TCTTE
         MVC   EIBAID,INITBUFF    SET AID
* PROCESS CLEAR KEY
         CLI   EIBAID,CLEAR       CLEAR KEY ?
         BNE   NOCLEAR            EXIT IF NOT
         GUAM  WINDOW,VIEW,SCREEN,24,80,0 RESET SCREEN TO 24 X 80
         B     INITRCVE           EXIT
NOCLEAR  EQU   *
* CURSOR POS TO NUMERIC
         NC    INITBUFF+1(2),=B'0011111100111111' KILL THE PARITY BITS
         SR    R6,R6              CLEAR R6
         LR    R7,R6              CLEAR R7
         ICM   R7,8,INITBUFF+2    2ND BYTE TO TOP OF R7 0C
         SLL   R7,2               SHIFT OUT PARITY BITS C
         IC    R6,INITBUFF+1      1ST BYTE TO END OF R6 00
         SRDL  R6,26              NOW ....000C
         STH   R7,EIBCPOSN        SAVE IT
* PRESET TRANSID FROM RETURN TAKES PRECEDENCE
         MVI   KCPGOTYP,C'C'      SET RETURN TRANSID START
         OC    TCTTETC,TCTTETC    ANY PRESET TRANSID ?
         BNZ   GOTRAN             EXIT IF WE HAVE ONE
* TRANSID FROM SCREEN
         MVI   KCPGOTYP,C'B'      SET SCREEN TRANSID
         CLI   INITBUFF+3,SBA     IS IT AN SBA ?
         BE    TISSBA             EXIT IF IT IS
         MVC   TCTTETC,INITBUFF+3 MOVE TRANSID
         B     GOTRAN             EXIT
TISSBA   EQU   *
         MVC   TCTTETC,INITBUFF+6 MOVE TRANSID
GOTRAN   EQU   *
         OC    TCTTETC,=4C' '     TRANSID TO UPPER CASE
         MVC   EIBTRNID,TCTTETC   SET POTENTIAL TRANSID
*
* SCAN PCT AND DO BLDL/LINK
* SCAN FAILURE ISSUES 'INVALID TRANSID' MSG
* BLDL FAILURE ISSUES APCT ABEND
*
* ### DO A PCT DSECT SOMETIME, REFLECT IN Z390CEMT
         L     R6,DFHPCTAD        R6=PCT ADDRESS
PCTLOOP  EQU   *
         CLC   0(4,R6),EIBTRNID   FOUND TRANSID ?
         BE    PCTFOUND           EXIT IF IT IS
         AHI   R6,12              BUMP POINTER
         CLI   0(R6),X'FF'        STOPPER ?
         BE    INVTRAN            EXIT IF BAD TRANSID
         B     PCTLOOP            LOOP
PCTFOUND EQU   *
         MVC   BLDLNAME,4(R6)     SAVE PROGRAM NAME
         BLDL  0,BLDLLIST         BLDL
         LTR   R15,R15            RC=4 IF ENTRY NOT FOUND
         BNZ   INVPROG            EXIT IF NOT FOUND
*
* THE PROGRAM EXISTS
*
* TELL Z390CICS WE ARE STARTING A TRANSID
* THIS IS ALSO A REQUEST FOR A TASK NUMBER
* IF SHUTDOWN IS IN PROGRESS, THE REQUEST IS REJECTED
*
* PASS THE TCTTE, EIB AND COMMAREA ADDRESSES
*
         MVC   KCPGOTRM,EIBTRMID  SET TERMID
         MVC   KCPGOTRN,EIBTRNID  SET TRANSID
         LA    R6,KCPGO           MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO RECEIVE,MSG=KCPRCVE,LMSG=128,PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         CLC   KCPRCFN,=C'0E00'   CHECK IT'S RIGHT
         BNE   TCPIOERR           EXIT IF NOT
         PACK  EIBTASKN,KCPRCTSK  SAVE TASK NUMBER
*
* SAVE PASSED COMMAREA INFO
*
         MVC   COMMADDR,TCTTECA   SAVE COMMAREA ADDRESS
         MVC   COMMLEN+2(2),EIBCALEN SAVE COMMAREA LENGTH
*
* GO TO THE INITIAL PROGRAM
* PASS TCTTE AND EIB ADDRESSES
* THE ONLY COMMAREA WE CAN PASS HERE IS ONE FROM RETURN COMMAREA
*
         MVC   DFHEICAP,TCTTECA   MOVE POTENTIAL COMMAREA ADDRESS
         MVC   TCTTELNK,=H'1'     SET INITIAL PROGRAM AT LEVEL 1
         LA    R1,DFHEITCT        ADDRESS PARMS TO BE PASSED
         LINK  EPLOC=BLDLNAME
*
* FN=0EFF  TELL Z390CICS THAT TRANSID HAS ENDED
*
         MVC   KCPNDTRN,EIBTRNID  SET TRANSID
         MVC   KCPNDTRM,EIBTRMID  SET TERMID
         MVC   KCPNDTSK,EIBTASKN  SET TASK NUMBER
         LA    R6,KCPEND          MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
*
* CEMT S TER OUT IS SHUTTERM REQUEST
*
         CLI   TCTTETS,X'FF'      SHUTTERM REQUEST ?
         BE    SHUTKCP            EXIT IF IT IS
*
* FREE EIB
*
         FREEMAIN A=(DFHEIBR),LV=EIBLENG
*
* POST RETURN COMMAREA PROCESSING
*
         CLC   TCTTECA,COMMADDR   SAME ADDRESS ?
         BNE   DIFFCOMM           EXIT IF NOT
         CLC   TCTTECAL,COMMLEN+2 SAME OR SMALLER LENGTH ?
         BH    DIFFCOMM           EXIT IF NOT
         MVC   TCTTECAL,COMMLEN+2 SET ACTUAL LENGTH ACQUIRED
         B     LOCAL_MANAGER      EXIT IF IT IS
*
DIFFCOMM EQU   *
*
* LAST COMMAREA (IF ANY) NOT THE SAME AS THE NEW ONE (IF ANY)
*
         MVC   COMMSAVA,COMMADDR  SAVE LAST COMMAREA ADDRESS
         MVC   COMMSAVL,COMMLEN   SAVE LAST COMMAREA LENGTH
         OC    TCTTECA,TCTTECA    ANY NEW COMMAREA ?
         BZ    NONEWCOM           EXIT IF NONE
*
* TAKE A COPY OF THE NEW COMMAREA
*
         LH    R1,TCTTECAL        R1=COMMAREA LENGTH
         GETMAIN R,LV=(R1),A=COMMADDR
         ST    R0,COMMLEN         SAVE ACTUAL LENGTH ACQUIRED
         L     R6,COMMADDR        DESTINATION ADDRESS
         LR    R7,R0              LENGTH
         L     R8,TCTTECA         SOURCE ADDRESS
         LR    R9,R0              LENGTH
         MVCL  R6,R8              COPY DATA
         MVC   TCTTECA,COMMADDR   SET AS NEW COMMAREA
         MVC   TCTTECAL,COMMLEN+2 SET AS NEW COMMAREA LENGTH
*
NONEWCOM EQU   *
         OC    COMMSAVA,COMMSAVA  ANY COMMAREA PASSED LAST TIME ?
         BZ    LOCAL_MANAGER      EXIT IF NONE
*
* FREE THE PREVIOUS COMMAREA
*
         FREEMAIN A=COMMSAVA,LA=COMMSAVL
         XC    COMMSAVA,COMMSAVA  CLEAR SAVED COMMAREA ADDRESS
         B     LOCAL_MANAGER      EXIT
*
INVTRAN  EQU   *
*
* INVALID TRANSACTION
*
         LA    R7,AC2001          MSG ADDRESS
         BAL   R9,TMDTPROC        ERROR MSG TO SCREEN
         XC    TCTTETC,TCTTETC    NO PRESET TRANSID
         EXEC CICS SEND FROM(AC2001) LENGTH(AC2001L)
         B     FREEEIB            EXIT
*
INVPROG  EQU   *
*
* ABEND APCT
*
         LA    R7,AC2206          MSG ADDRESS
         MVC   AC2206_PROG,4(R6)  BAD PROGRAM TO MSG
         MVC   AC2206_ABCODE,=C'APCT' ABEND CODE TO MSG
         BAL   R9,TMDTPROC        ERROR MSG TO SCREEN
         XC    TCTTETC,TCTTETC    NO PRESET TRANSID
         EXEC CICS SEND FROM(AC2206) LENGTH(AC2206L)
FREEEIB  EQU   *
* FREE EIB
         FREEMAIN A=(DFHEIBR),LV=EIBLENG
         B     LOCAL_MANAGER      EXIT
*
TERMERR  EQU   *
         MVC   KCPABCDE,=C'MM01'  SET ABEND CODE
         B     ABORT
*
PARMERR  EQU   *
         MVC   KCPABCDE,=C'MM02'  SET ABEND CODE
         B     ABORT
*
TCPIOERR EQU   *
         MVC   KCPABCDE,=C'MM03'  SET ABEND CODE
         B     ABORT
*
* ABORT Z390KCP WITH RC=16
*
ABORT    EQU   *
         MVC   KCPABTRM,TCTTETI   SET TERMID
         MVC   KCPABTRN,=4C' '    NO TRANSID
         LA    R6,KCPABORT        MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         SUBEXIT RC=16
*
* SHUTTERM REQUESTED
* TELL Z390CICS, END Z390KCP
*
SHUTKCP  EQU   *
* FN=12FE  Z390KCP SHUTTERM REQUEST
         MVC   KCPSHTRM,EIBTRMID  SET TERMID
         LA    R6,KCPSHUT         MESSAGE TO SEND
         BAL   R9,TCPSEND         SEND IT
         TCPIO CLOSE,PORT=3900    CLOSE CLIENT
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         SUBEXIT
*
* SUBROUTINES
*
TCPSEND  DS    0H
         L     R8,0(R6)           R8=MESSAGE LENGTH
         TCPIO SEND,MSG=(R6),LMSG=(R8),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   TCPIOERR           EXIT IF BAD
         BR    R9                 RETURN
*
TMDTPROC EQU   *
         USING MSG,R7
         TIME  DEC,TIMEDEC,DATETYPE=DDMMYYYY,LINKAGE=SYSTEM
         MVO   TMDTPACK,DATEDEC   PACKED DATE
         MVC   DATEHERE,DATEEDIT  MOVE EDIT WORD
         ED    DATEHERE,TMDTPACK  EDIT DATE
         MVC   MSGDATE,DATEHERE+2 MOVE DATE TO MSG
         MVO   TMDTPACK,TIMEDEC   PACKED TIME
         MVC   TIMEHERE,TIMEEDIT  MOVE EDIT WORD
         ED    TIMEHERE,TMDTPACK  EDIT TIME
         MVC   MSGTIME,TIMEHERE+2 MOVE TIME TO MSG
         MVC   MSGTRAN,EIBTRNID   MOVE TRANSID TO MSG
         BR    R9                 RETURN
         DROP  R7
*
* Z390KCP PSEUDO DFHEISTG PARMS
*
DFHEITCT DS    A                  TCTTE ADDRESS
DFHEIEIB DS    A                  EIB ADDRESS
DFHEICAP DS    A                  COMMAREA POINTER
*
* Z390KCP DATA AREAS
*
DFHPCTAD DS    A                  PCT ADDRESS
*
COMMADDR DC    A(0)               COMMAREA ADDRESS LAST PASSED
COMMLEN  DC    F'0'               COMMAREA LENGTH LAST PASSED
COMMSAVA DC    A(0)               TEMP SAVED COMMAREA ADDRESS
COMMSAVL DC    F'0'               TEMP SAVED COMMAREA LENGTH
*
TIMEDEC  DS    XL4                SAVE TIME HHMMSSTT
         DS    CL4
DATEDEC  DS    CL4                SAVE DATE DDMMYYYY
TMDTPACK DC    PL5'0'
DATEEDIT DC    X'402020206120206120202020'
TIMEEDIT DC    X'402020207A20207A20204B2020'
DATEHERE DS    CL12
TIMEHERE DS    CL13
*
INITBUFF DS    CL2000             INITIAL BUFFER
INITLEN  DC    H'2000'            INITIAL BUFFER LENGTH
*
BLDLLIST DC    H'1'               BLDL LIST WITH 1 ENTRY
         DC    H'12'              BLDL ENTRY LENGTH
BLDLNAME DS    CL8' '             BLDL ENTRY NAME TO FIND
         DC    XL4'00' RPI 609
*
HOSTIPAD DC    C'*',15X'00'       HOST=* OR IP ADDRESS
*
* MESSAGES
*
TERM_TITLE DC C'TERMINAL TTTT',X'00'
*
INITIAL  TN3270 WCC_KD,(SBA,1,1)
         TN3270 (SF,ATT_UA_MDT)
         TN3270 IC
INITIAL_LEN DC AL2(*-INITIAL)
*
AC2001   TN3270 WCC_KD,(SBA,24,1)
         DC    C'DFHAC2001 '
         DS    CL10               DD/MM/YYYY
         DC    C' '
         DS    CL11               HH:MM:SS.SS
         DC    C' TRANSID='
         DS    CL4                TRANSID
         DC    C' IS NOT RECOGNISED'
         DS    CL(80-(*-AC2001))
         TN3270 (SBA,1,1),(SF,ATT_UA),IC
AC2001L  DC    AL2(*-AC2001)
*
AC2206   TN3270 WCC_KD,(SBA,24,1)
         DC    C'DFHAC2206 '
         DS    CL10               DD/MM/YYYY
         DC    C' '
         DS    CL11               HH:MM:SS.SS
         DC    C' TRANSID='
         DS    CL4                TRANSID
         DC    C' PROG='
AC2206_PROG DS CL8
         DC    C' ABENDED '
AC2206_ABCODE DS   CL4
         DS    CL(80-(*-AC2206))
         TN3270 (SBA,1,1),(SF,ATT_UA),IC
AC2206L  DC    AL2(*-AC2206)
*
* FORMAL MESSAGE REQUESTS AND INFO TO Z390CICS
*
KCPUP    DS    0F
* Z390KCP INITIALIZED
         DC    A(KCPUPEND-*)
         DC    C'12FF'
KCPUPTRM DS    CL4
KCPUPEND EQU   *
*
KCPSHUT  DS    0F
* SHUTTERM REQUEST  (CEMT S TER OUT)
         DC    A(KCPSHEND-*)
         DC    C'12FE'
KCPSHTRM DS    CL4
KCPSHEND EQU   *
*
KCPABORT DS    0F
* ABENDED
         DC    A(KCPABEND-*)
         DC    C'12FD'
KCPABTRM DS    CL4
KCPABTRN DS    CL4
KCPABCDE DS    CL4
KCPABEND EQU   *
*
KCPREQTM DS    0F
* REQUEST TERMID
         DC    A(KCPREQND-*)
         DC    C'04FF'
KCPREQND EQU   *
*
KCPGO    DS    0F
* TRANSID STARTED
         DC    A(KCPGOEND-*)
         DC    C'0E00'
KCPGOTRM DS    CL4                TERMID
KCPGOTRN DS    CL4                TRANSID
KCPGOTYP DS    C                  TYPE OF TRANSID START
*                                    A = PARM()
*                                    B = INPUT
*                                    C = RETURN TRANSID()
KCPGOEND EQU   *
*
KCPEND   DS    0F
* TRANSID ENDED
         DC    A(KCPNDEND-*)
         DC    C'0EFF'
KCPNDTRM DS    CL4                TERMID
KCPNDTRN DS    CL4                TRANSID
         DS    C                  NO TRANSID TYPE
KCPNDTSK DS    PL4                PACKED TASK NUMBER
KCPNDEND EQU   *
*
KCPSHUTQ DS    0F
* SHUTDOWN QUERY
         DC    A(KCPSQEND-*)
         DC    C'FE04'
KCPSQTRM DS    CL4                TERMID
KCPSQEND EQU   *
*
KCPRCVE  DS    0F
* RECEIVE AREA
         DC    A(KCPRCEND-*)
KCPRCFN  DS    CL4                FN
KCPRCTRM DS    CL4                TERMID
KCPRCDTA DS    CL116              DATA
         ORG   KCPRCDTA
* 0E00 AREA
KCPRCTSK DS    CL7                TASK NUMBER
         ORG   KCPRCDTA
* FE04 AREA
KCPSQIND DS    C                  SHUTDOWN INDICATOR
         ORG
KCPRCEND EQU   *
*
         LTORG
*
* CICS MESSAGE STRUCTURE
*
MSG      DSECT
         DS    CL4                WCC/SBA
         DS    CL10               MSG ID
MSGDATE  DS    CL10               DD/MM/YYYY
         DS    C                  SPACE
MSGTIME  DS    CL11               HH:MM:SS.SS
         DS    CL9                ' TRANSID '
MSGTRAN  DS    CL4
*
*  TERMINAL CONTROL TABLE - TERMINAL ENTRY
*
         DFHTCTTE
*
* EXEC INTERFACE BLOCK
*
         DFHEIBLK
*
         TN3270 SYMBOLS   DEFINE AID ENTER AND PF3 CODES
         GUAM   SYMBOLS   DEFINE GUAM GUI DIALOG WINDOW OPTIONS
         ZCVTD
         EQUREGS
* R3  BASE 2
* R4  ZCVT
* R9  LINK REG
* R10 TCTTE
* R11 EIB
* R12 BASE 1
* R13 DSA
         END
