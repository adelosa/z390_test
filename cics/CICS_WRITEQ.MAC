.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
         MACRO
         CICS_WRITEQ
         LCLC  &TYPE
         LCLB  &REWRITE
         LCLC  &QUEUE,&QNAME,&FROM,&LENGTH,&NUMITEMS,&ITEM
&TYPE    SETC  '&SYSLIST(1)'
         AIF   ('&TYPE' EQ 'TS').TS
         MNOTE 12,'WRITEQ TYPE NOT RECOGNIZED'
         MEXIT
.*
.TS      ANOP
&NP      SETA  N'&SYSLIST
&IP      SETA  1
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
.* DISCARDED PARMS
         AIF   ('&PARM'(1,4)  EQ 'MAIN').PLOOP
         AIF   ('&PARM'(1,9)  EQ 'AUXILIARY').PLOOP
.*
         AIF   ('&PARM'(1,6)  EQ 'QUEUE(').QUEUE
         AIF   ('&PARM'(1,6)  EQ 'QNAME(').QNAME
         AIF   ('&PARM'(1,5)  EQ 'FROM(').FROM
         AIF   ('&PARM'(1,7)  EQ 'LENGTH(').LENGTH
         AIF   ('&PARM'(1,9)  EQ 'NUMITEMS(').NUMITEMS
         AIF   ('&PARM'(1,5)  EQ 'ITEM(').ITEM
         AIF   ('&PARM'(1,7)  EQ 'REWRITE').REWRITE
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.QUEUE   ANOP
&QUEUE   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.QNAME   ANOP
&QNAME   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.FROM    ANOP
&FROM    SETC '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.LENGTH  ANOP
&LENGTH  SETC  '&PARM'(8,K'&PARM-8)
         AGO   .PLOOP
.*
.NUMITEMS ANOP
&NUMITEMS SETC  '&PARM'(10,K'&PARM-10)
         AGO   .PLOOP
.*
.ITEM    ANOP
&ITEM    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.REWRITE ANOP
&REWRITE SETB  1
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&QUEUE' EQ '' AND '&QNAME' EQ '').NOQUEUE
         AIF   ('&QUEUE' NE '' AND '&QNAME' NE '').BOTHQ
         AIF   ('&ITEM' NE '' AND (NOT &REWRITE)).BADITEM
         AIF   (&REWRITE AND '&ITEM' EQ '').BADITEM
         AIF   ('&NUMITEMS' NE '' AND '&ITEM' NE '').BADNUM
         AIF   ('&NUMITEMS' NE '' AND &REWRITE).BADNUM
         AIF   ('&FROM' EQ '').BADFROM
.*
         MVC   EIBFN,=X'0A02'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
.*
         AIF   ('&FROM' NE '').GOTFROM
         AIF   ('&LENGTH' EQ '').GOTFROM
         MNOTE 12,'LENGTH WITHOUT FROM'
         MEXIT
.*
.GOTFROM ANOP
&FROMTQ  SETC  T'&FROM
         AIF   ('&FROM'(1,1) EQ '=' OR '&FROMTQ' EQ 'A').FRMADLIT
         LA    R14,&FROM          FROM ADDRESS
         AGO   .FROMLEN
.*
.FRMADLIT ANOP
         L     R14,&FROM          INDIRECT FROM ADDRESS
.* LENGTH IS COMPULSORY FOR INDIRECT
         AIF   ('&LENGTH' EQ '').BADLEN
.FROMLEN ANOP
         AIF   ('&LENGTH' NE '').LENVAL
&LENGTH  SETC  'L''&FROM'
         AGO   .LENNUM
.*
.LENVAL  ANOP
         AIF   ('&LENGTH'(2,1) EQ '''').LENNUM
         AIF   ('&LENGTH'(1,1) LT '0' OR '&LENGTH'(1,1) GT '9').LENLABL
.LENNUM  ANOP
         LH    R2,=AL2(&LENGTH)   R2=NUMERIC LENGTH
         AGO   .ALLDONE
.*
.LENLABL ANOP
         LH    R2,&LENGTH         R2=LENGTH FROM LABEL
.ALLDONE ANOP
         LTR   R2,R2              VALID LENGTH ?
         BNP   CICS_WRITEQ_&SYSNDX._LENGERR ERROR IF NOT POSITIVE
         CH    R2,=H'32763'       VALID LENGTH
         BH    CICS_WRITEQ_&SYSNDX._LENGERR ERROR IF TOO BIG
.* GETMAIN AND MOVE THE DATA TO SEND
         LA    R1,TSPREFIX(R2)    R1=TS BLOCK LENGTH+DATA LENGTH
         GETMAIN R,LV=(R1),A=DFHEITSP
         USING DFHTSBLK,R1
         ST    R0,TSPTCPIO        SAVE LENGTH FOR FREEMAIN
         MVC   TSPFN,=C'0A02'     SET FUNCTION CODE
         MVC   TSPTERM,TCTTETI    SET TERMINAL ID
         MVC   TSPTRAN,EIBTRNID   SET TRANSID
         STH   R2,TSPLEN          SET DATA LENGTH
.*
         AIF   ('&QUEUE' EQ '').DOQNAME
.* GOT QUEUE
         AIF   ('&QUEUE'(1,1) EQ '''').QUSTRING
         MVC   EIBRSRCE,&QUEUE    SET EIBRSRCE AS LABEL
         MVC   TSPNAME(8),&QUEUE  SET TSP QUEUE NAME AS LABEL
         MVC   TSPNAME+8(8),=8C' ' CLEAR REMAINDER
         AGO   .CHKNAME
.*
.QUSTRING ANOP
&QULEN   SETA  K'&QUEUE
         AIF   (&QULEN GT 10).BADQ
         MVC   EIBRSRCE,=CL16&QUEUE SET EIBRSRCE AS STRING
         MVC   TSPNAME,=CL16&QUEUE SET TSP QUEUE NAME AS STRING
         AGO   .CHKNAME
.*
.* GOT QNAME
.DOQNAME ANOP
         AIF   ('&QNAME'(1,1) EQ '''').QNSTRING
         MVC   EIBRSRCE,&QNAME    SET EIBRSRCE AS LABEL
         MVC   TSPNAME,&QNAME     SET TSP QUEUE NAME AS LABEL
         AGO   .CHKNAME
.*
.QNSTRING ANOP
&QNLEN   SETA  K'&QNAME
         AIF   (&QNLEN GT 18).BADQ
         MVC   EIBRSRCE,=CL16&QNAME SET EIBRSRCE AS STRING
         MVC   TSPNAME,=CL16&QNAME SET TSP QUEUE NAME AS STRING
.*
.CHKNAME ANOP
         OC    TSPNAME,TSPNAME    ALL ZEROS ?
         BZ    CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLI   TSPNAME,X'FA'      X'FA'-X'FF' ?
         BNL   CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'**'  RESERVED ID ?
         BE    CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'$$'  RESERVED ID ?
         BE    CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF IT IS
         CLC   TSPNAME(2),=C'DF'  RESERVED ID ?
         BE    CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF IT IS
.* PROCESS ITEM
         AIF   ('&ITEM' NE '').DOITEM
         XC    TSPITEM,TSPITEM    CLEAR ITEM NUMBER
         AGO   .DUNITEM
.DOITEM  ANOP
         AIF   ('&ITEM'(1,1) LT '0' OR '&ITEM'(1,1) GT '9').ITMLABL
         MVC   TSPITEM,=AL2(&ITEM) MOVE NUMERIC ITEM
         AGO   .DUNITEM
.*
.ITMLABL ANOP
         MVC   TSPITEM,&ITEM      MOVE ITEM AS LABEL
.DUNITEM ANOP
* MOVE THE DATA, R2=DATA LENGTH  R14=SOURCE ADDRESS
         LR    R15,R2             SOURCE LENGTH
         LA    R0,TSPDATA         DESTINATION ADDRESS
         LR    R1,R15             DESTINATION LENGTH
         MVCL  R0,R14             MOVE THE DATA
         L     R14,DFHEITSP       RESTORE GETMAIN ADDRESS
         AHI   R2,TSPREFIX        R2=DATA LENGTH+PREFIX
         LR    R15,R2             SET LENGTH FOR TCPIO
* SEND REQUEST TO SERVER, GET REPLY
* USE ACTUAL LENGTH OF DATA, NOT GETMAIN LENGTH
         TCPIO SEND,MSG=(R14),LMSG=(R15),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF BAD
         TCPIO RECEIVE,MSG=(R14),LMSG==A(TSPREFIX),PORT=3900
         LTR   R15,R15            CHECK RC ?
         BNZ   CICS_WRITEQ_&SYSNDX._INVREQ ERROR IF BAD
         LR    R1,R14             RE-ESTABLISH TS BLOCK BASE
         OC    TSPRETCD,TSPRETCD  BAD RETURN CODE ?
         BZ    CICS_WRITEQ_&SYSNDX._01 EXIT IF NONE
         CLC   TSPRETCD,DFHRESP(ITEMERR) ITEMERR ?
         BE    CICS_WRITEQ_&SYSNDX._ITEMERR EXIT IF IT IS
         CLC   TSPRETCD,DFHRESP(QIDERR) QIDERR ?
         BE    CICS_WRITEQ_&SYSNDX._QIDERR EXIT IF IT IS
* SERVER HAS SENT UNKNOWN VALUE IN TSPRETCD
         B     CICS_WRITEQ_&SYSNDX._INVREQ SHOULD NOT OCCUR
*
CICS_WRITEQ_&SYSNDX._01 DS 0H
         AIF   ('&NUMITEMS' EQ '').NONUMIT
         MVC   &NUMITEMS.(2),TSPNUMIT SET NUMITEMS
.NONUMIT ANOP
         DROP  R1                 DROP TS BLOCK BASE
         B     CICS_WRITEQ_&SYSNDX._IGNORE EXIT
.*
CICS_WRITEQ_&SYSNDX._INVREQ DS 0H
.* INVOKE INVREQ
         MVI   EIBRCODE,X'20'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_WRITEQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_WRITEQ_&SYSNDX._ITEMERR DS 0H
.* INVOKE ITEMERR
         MVI   EIBRCODE,X'01'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(ITEMERR) SET EIBRESP=ITEMERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_WRITEQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_WRITEQ_&SYSNDX._LENGERR DS 0H
.* INVOKE LENGERR
         MVI   EIBRCODE,X'E1'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(LENGERR) SET EIBRESP=LENGERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_WRITEQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_WRITEQ_&SYSNDX._QIDERR DS 0H
.* INVOKE QIDERR
         MVI   EIBRCODE,X'02'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(QIDERR) SET EIBRESP=QIDERR
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_WRITEQ_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_WRITEQ_&SYSNDX._IGNORE DS 0H
         ICM   R1,15,DFHEITSP     ANY ADDRESS TO BE FREED ?
         BZ    CICS_WRITEQ_&SYSNDX._END EXIT IF NOT
         FREEMAIN LA=0(R1)
         XC    DFHEITSP,DFHEITSP  CLEAR ADDRESS
CICS_WRITEQ_&SYSNDX._END DS 0H
         MEXIT
.*
.NOQUEUE MNOTE 12,'QUEUE OR QNAME MUST BE SPECIFIED'
         MEXIT
.*
.BOTHQ   MNOTE 12,'BOTH QUEUE AND QNAME ARE SPECIFIED'
         MEXIT
.*
.BADQ    MNOTE 12,'INVALID QUEUE OR QNAME'
CICS_WRITEQ_&SYSNDX._LENGERR DS 0H
         MEXIT
.*
.BADITEM MNOTE 12,'ITEM AND REWRITE MUST BOTH BE SPECIFIED'
         MEXIT
.*
.BADNUM  MNOTE 12,'IF NUMITEMS IS SPECIFIED, ITEM AND REWRITE ARE INVAL-
               ID'
         MEXIT
.*
.BADFROM MNOTE 12,'FROM IS MANDATORY'
         MEXIT
.*
.BADLEN  MNOTE 12,'LENGTH IS MANDATORY FOR INDIRECT FROM'
         MEXIT
         MEND
