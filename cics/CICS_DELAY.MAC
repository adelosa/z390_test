.*********************************************************************
.* Copyright 2006 Automated Software Tools Corporation               *
.* This source code is part of z390 assembler/emulator package       *
.* The z390 package is distributed under GNU general public license  *
.* Author - Don Higgins                                              *
.*********************************************************************
.* 04/19/08 RPI 833 ADD STRING QUOTES FOR HLASM COMPATIBILITY
.*********************************************************************
         MACRO
         CICS_DELAY
         LCLB  &FOR,&UNTIL
         LCLB  &ONLYH,&ONLYM,&ONLYS
         LCLC  &INTVAL,&TIME,&HOURS,&MINS,&SECS,&REQID
&NP      SETA  N'&SYSLIST
&IP      SETA  0
.PLOOP   ANOP
&IP      SETA  &IP+1
         AIF   (&IP GT &NP).ELOOP
&PARM    SETC  '&SYSLIST(&IP)'
         AIF   ('&PARM'(1,9) EQ 'INTERVAL(').INTVAL
         AIF   ('&PARM'(1,5) EQ 'TIME(').TIME
         AIF   ('&PARM'(1,6) EQ 'HOURS(').HOURS
         AIF   ('&PARM'(1,8) EQ 'MINUTES(').MINS
         AIF   ('&PARM'(1,8) EQ 'SECONDS(').SECS
         AIF   ('&PARM'(1,6) EQ 'REQID(').REQID
         AIF   ('&PARM'(1,3) EQ 'FOR').FOR
         AIF   ('&PARM'(1,5) EQ 'UNTIL').UNTIL
         MNOTE 12,'BAD PARM &PARM'
         AGO   .PLOOP
.*
.INTVAL  ANOP
&INTVAL  SETC  '&PARM'(10,K'&PARM-10)
         AGO   .PLOOP
.*
.TIME    ANOP
&TIME    SETC  '&PARM'(6,K'&PARM-6)
         AGO   .PLOOP
.*
.HOURS   ANOP
&HOURS   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.MINS    ANOP
&MINS    SETC  '&PARM'(9,K'&PARM-9)
         AGO   .PLOOP
.*
.SECS    ANOP
&SECS    SETC  '&PARM'(9,K'&PARM-9)
         AGO   .PLOOP
.*
.REQID   ANOP
&REQID   SETC  '&PARM'(7,K'&PARM-7)
         AGO   .PLOOP
.*
.FOR     ANOP
&FOR     SETB  1
         AGO   .PLOOP
.*
.UNTIL   ANOP
&UNTIL   SETB  1
         AGO   .PLOOP
.*
.ELOOP   ANOP
         AIF   ('&REQID'  NE '').BADREQ
         AIF   ('&INTVAL' NE '' AND '&TIME' NE '').BOTHIT
         AIF   (&FOR AND &UNTIL).BOTHFU
         AIF   ('&INTVAL' NE '' AND &FOR).BADFORUN
         AIF   ('&INTVAL' NE '' AND &UNTIL).BADFORUN
         AIF   ('&TIME'   NE '' AND &FOR).BADFORUN
         AIF   ('&TIME'   NE '' AND &UNTIL).BADFORUN
         AIF   ('&INTVAL' NE '' AND '&HOURS' NE '').BADHMS
         AIF   ('&INTVAL' NE '' AND '&MINS'  NE '').BADHMS
         AIF   ('&INTVAL' NE '' AND '&SECS'  NE '').BADHMS
         AIF   ('&TIME'   NE '' AND '&HOURS' NE '').BADHMS
         AIF   ('&TIME'   NE '' AND '&MINS'  NE '').BADHMS
         AIF   ('&TIME'   NE '' AND '&SECS'  NE '').BADHMS
         AIF   ('&HOURS'  NE '' AND NOT(&FOR OR &UNTIL)).BADHMS2
         AIF   ('&MINS'   NE '' AND NOT(&FOR OR &UNTIL)).BADHMS2
         AIF   ('&SECS'   NE '' AND NOT(&FOR OR &UNTIL)).BADHMS2
         AIF   ((&FOR OR &UNTIL) AND '&HOURS' EQ '' AND '&MINS' EQ '' A-
               ND '&SECS' EQ '').BADFUN
.* DEFAULT SETTING IS INTERVAL(0)
         AIF   ('&INTVAL' EQ '' AND '&TIME' EQ '' AND '&HOURS' EQ '' AN-
               D '&MINS' EQ '' AND '&SECS' EQ '').DEFINT
         AGO   .PARMOK
.*
.DEFINT  ANOP
&INTVAL  SETC  '0'
.PARMOK  ANOP
         MVC   EIBFN,=X'1004'     SET EIBFN
         XC    EIBRCODE,EIBRCODE  CLEAR EIBRCODE
         XC    EIBRESP,EIBRESP    CLEAR EIBRESP
         XC    EIBRESP2,EIBRESP2  CLEAR EIBRESP2
.* JOIN UP INTERVAL AND TIME
         AIF   ('&INTVAL' EQ '').NOTINT
&HHMMSS  SETC  '&INTVAL'
         AGO   .DOHMS
.*
.NOTINT  ANOP
         AIF   ('&TIME' EQ '').NOTIT
&HHMMSS  SETC  '&TIME'
.DOHMS   ANOP
.* PROCESS INTERVAL/TIME
&ONLYH   SETB  1
&ONLYM   SETB  1
&ONLYS   SETB  1
.* HHMMSS  MAX 995959  CAN BE LENGTH 1-6
         AIF   ('&HHMMSS'(1,1) LT '0' OR '&HHMMSS'(1,1) GT '9').TIMELAB
&KHMS    SETA  K'&HHMMSS
         AIF   (&KHMS GT 6).BADTIME
         MVC   CICS_DELAY_&SYSNDX._IVD(6),=6C'0' INITIALIZE CONSTANT
         MVC   CICS_DELAY_&SYSNDX._IVD+(6-&KHMS)(&KHMS),=C'&HHMMSS' MOV-
               E CONSTANT
         AGO   .DOTIME
.*
.TIMELAB ANOP
         MVC   CICS_DELAY_&SYSNDX._IVD(6),&HHMMSS MOVE FROM LABEL
.DOTIME  ANOP
         PACK  CICS_DELAY_&SYSNDX._IV,CICS_DELAY_&SYSNDX._IVD(6)
.* VALIDATE HHMMSS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'00000FFF' LEAVE SECS
         CP    CICS_DELAY_&SYSNDX._IVC,=P'59' TOO MANY SECS ?
         BH    CICS_DELAY_&SYSNDX._IV6 ERROR IF IT IS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'000FF00F' LEAVE MINS
         CP    CICS_DELAY_&SYSNDX._IVC,=P'5900' TOO MANY MINS ?
         BH    CICS_DELAY_&SYSNDX._IV5 ERROR IF IT IS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'FFF0000F' LEAVE MINS
         CP    CICS_DELAY_&SYSNDX._IVC,=P'990000' TOO MANY HOURS ?
         BH    CICS_DELAY_&SYSNDX._IV4 ERROR IF IT IS
.* CONVERT TO SECS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'00000FFF' LEAVE SECS
         SP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IVB CLR TOT
         AP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IVC ADD SECS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'000FF00F' LEAVE MINS
         SRP   CICS_DELAY_&SYSNDX._IVC,64-2,0 /100 = MINS
         MP    CICS_DELAY_&SYSNDX._IVC,=P'60' *60  = SECS
         AP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IVC ADD MINS
         ZAP   CICS_DELAY_&SYSNDX._IVC,CICS_DELAY_&SYSNDX._IV COPY IT
         NC    CICS_DELAY_&SYSNDX._IVC,=X'FFF0000F' LEAVE MINS
         SRP   CICS_DELAY_&SYSNDX._IVC,64-4,0   /10000 = HOURS
         MP    CICS_DELAY_&SYSNDX._IVC,=P'3600' *3600  = SECS
         AP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IVC ADD HRS
         SRP   CICS_DELAY_&SYSNDX._IVB,2,0 *100 = 0.01 SECS
.GENCHK  ANOP
         CVB   R1,CICS_DELAY_&SYSNDX._IVB CONVERT TO BINARY
         ST    R1,CICS_DELAY_&SYSNDX._IVF SAVE REQUESTED TIME
         AIF   ('&TIME' EQ '').GOINT
.* SEPARATE PROCESSING FOR TIME
         TIME  BIN                GET TIME NOW IN 0.01 SECS
.* IF REQUESTED TIME-TIME NOW = 0 TO -6 TIME HAS EXPIRED
.* IF REQUESTED TIME-(TIME NOW+24 HOURS) = 0 TO -6 TIME HAS EXPIRED
.* IF REQUESTED TIME-TIME NOW = 0 TO -6 TIME HAS EXPIRED
.* IF REQUESTED TIME-TIME NOW < -6 THEN ADD 24 HOURS FOR THE PERIOD
.* IF REQUESTED TIME-TIME NOW > 0  THEN THAT IS THE PERIOD TO USE
         L     R1,CICS_DELAY_&SYSNDX._IVF LOAD REQUESTED TIME
         SR    R1,R0              R1=PERIOD TO ELAPSE
         BZ    CICS_DELAY_&SYSNDX._NOSTMR EXIT IF ZERO
         BP    CICS_DELAY_&SYSNDX._PEROK  EXIT IF +VE
         C     R1,=AL4(-6*60*60*100) LESS THAN 6 HOURS ?
         BNL   CICS_DELAY_&SYSNDX._NOSTMR EXIT IF IT IS
CICS_DELAY_&SYSNDX._PEROK DS 0H
         ST    R1,CICS_DELAY_&SYSNDX._IVT SAVE REQ-NOW
         A     R0,=AL4(24*60*60*100) ADD 24 HOURS
         L     R1,CICS_DELAY_&SYSNDX._IVF LOAD REQUESTED TIME
         SR    R1,R0              R1=PERIOD TO ELAPSE - 24 HOURS
         BZ    CICS_DELAY_&SYSNDX._NOSTMR EXIT IF ZERO
         BP    CICS_DELAY_&SYSNDX._P24OK  EXIT IF +VE
         C     R1,=AL4(-6*60*60*100) LESS THAN 6 HOURS ?
         BNL   CICS_DELAY_&SYSNDX._NOSTMR EXIT IF IT IS
CICS_DELAY_&SYSNDX._P24OK DS 0H
         L     R1,CICS_DELAY_&SYSNDX._IVT LOAD REQ-NOW
         ST    R1,CICS_DELAY_&SYSNDX._IVF SAVE REQ-NOW
         LTR   R1,R1              +VE TIME ?
         BP    CICS_DELAY_&SYSNDX._NOTEXP EXIT IF IT IS
         A     R1,=AL4(24*60*60*100) ADD 24 HOURS
         ST    R1,CICS_DELAY_&SYSNDX._IVF SAVE REQ-NOW+24 HOURS
         B     CICS_DELAY_&SYSNDX._NOTEXP EXIT
CICS_DELAY_&SYSNDX._IVT DS FL4 TIME LAPSE IN 0.01 SECS BINARY
*
.GOINT   ANOP
         LTR   R1,R1              ZERO PERIOD ?
         BNZ   CICS_DELAY_&SYSNDX._NOTEXP EXIT IF NOT
         AIF   ('&TIME' EQ '').GOINT2
CICS_DELAY_&SYSNDX._NOSTMR DS 0H
.GOINT2  ANOP
.* INTERVAL(0) OR TIME HAS EXPIRED
         B     CICS_DELAY_&SYSNDX._EXPIRED EXIT
*
CICS_DELAY_&SYSNDX._NOTEXP DS 0H
         STIMER WAIT,BINTVL=CICS_DELAY_&SYSNDX._IVF WAIT A WHILE
         B     CICS_DELAY_&SYSNDX._IGNORE EXIT
         AGO   .CONS
.*
.NOTIT   ANOP
.* HOURS MINUTES SECONDS ... ALL 3 OR ANY 2 FORM INTERVAL (FOR) OR
.* TIME (UNTIL). HOURS (0-99), MINUTES (0-59), SECONDS (0-59)
.*
.* A SINGLE PARAMETER FORMS HOURS (0-99), MINUTES (0-5999) OR
.* SECONDS (0-359999)
.*
         AIF   ('&HOURS' NE '' AND '&MINS' EQ '' AND '&SECS' EQ '').ONL-
               YH
         AIF   ('&HOURS' EQ '' AND '&MINS' NE '' AND '&SECS' EQ '').ONL-
               YM
         AIF   ('&HOURS' EQ '' AND '&MINS' EQ '' AND '&SECS' NE '').ONL-
               YS
.* MORE THAN ONE PARM
&ONLYH   SETB  1
&ONLYM   SETB  1
&ONLYS   SETB  1
         AIF   ('&HOURS' NE '').TRYM
&HOURS   SETC  '0'
.TRYM    ANOP
         AIF   ('&MINS' NE '').TRYS
&MINS    SETC  '0'
.TRYS    ANOP
         AIF   ('&SECS' NE '').DOFUHMS
&SECS    SETC  '0'
.DOFUHMS ANOP
         ZAP   CICS_DELAY_&SYSNDX._IVB,=P'&HOURS' SET HOURS
         CP    CICS_DELAY_&SYSNDX._IVB,=P'99' TOO MANY HOURS ?
         BH    CICS_DELAY_&SYSNDX._IV4 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IVB,=P'360000' CONVERT TO 0.01 SECS
         ZAP   CICS_DELAY_&SYSNDX._IV,=P'&MINS' SET MINUTES
         CP    CICS_DELAY_&SYSNDX._IVB,=P'59' TOO MANY MINUTES ?
         BH    CICS_DELAY_&SYSNDX._IV5 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IV,=P'6000' CONVERT TO 0.01 SECS
         AP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IV SUM IT
         ZAP   CICS_DELAY_&SYSNDX._IV,=P'&SECS' SET SECONDS
         CP    CICS_DELAY_&SYSNDX._IVB,=P'59' TOO MANY SECONDS ?
         BH    CICS_DELAY_&SYSNDX._IV6 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IV,=P'100' CONVERT TO 0.01 SECS
         AP    CICS_DELAY_&SYSNDX._IVB,CICS_DELAY_&SYSNDX._IV SUM IT
         AGO   .DOFUN
.*
.ONLYH   ANOP
&ONLYH   SETB  1
         ZAP   CICS_DELAY_&SYSNDX._IVB,=P'&HOURS' SET HOURS
         CP    CICS_DELAY_&SYSNDX._IVB,=P'99' TOO MANY HOURS ?
         BH    CICS_DELAY_&SYSNDX._IV4 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IVB,=P'360000' CONVERT TO 0.01 SECS
         AGO   .DOFUN
.*
.ONLYM   ANOP
&ONLYM   SETB  1
         ZAP   CICS_DELAY_&SYSNDX._IVB,=P'&MINS' SET MINUTES
         CP    CICS_DELAY_&SYSNDX._IVB,=P'5999' TOO MANY MINUTES ?
         BH    CICS_DELAY_&SYSNDX._IV5 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IVB,=P'6000' CONVERT TO 0.01 SECS
         AGO   .DOFUN
.*
.ONLYS   ANOP
&ONLYS   SETB  1
         ZAP   CICS_DELAY_&SYSNDX._IVB,=P'&SECS' SET SECONDS
         CP    CICS_DELAY_&SYSNDX._IVB,=P'359999' TOO MANY SECONDS ?
         BH    CICS_DELAY_&SYSNDX._IV6 ERROR IF IT IS
         MP    CICS_DELAY_&SYSNDX._IVB,=P'100' CONVERT TO 0.01 SECS
.DOFUN   ANOP
         AIF   (&FOR).DOFOR
&TIME    SETC  'DUMMY'
         AGO   .GENCHK
.*
.DOFOR   ANOP
&INTVAL  SETC  'DUMMY'
         AGO   .GENCHK
.*
.CONS    ANOP
         AIF   (&FOR OR &UNTIL).MISSCON
CICS_DELAY_&SYSNDX._IVC DS PL4 INTERVAL COPY AREA    0HHMMSS+
CICS_DELAY_&SYSNDX._IVD DC 6C'0' INTERVAL HOLDING AREA CONSTANT
.MISSCON ANOP
         AIF   (&ONLYH AND &ONLYM AND &ONLYS).NEEDCON
         AGO   .MISSCN2
.*
.NEEDCON ANOP
CICS_DELAY_&SYSNDX._IV  DS PL4 INTERVAL HOLDING AREA 0HHMMSS+
.MISSCN2 ANOP
CICS_DELAY_&SYSNDX._IVB DC PL8'0' INTERVAL IN 0.01 SECS
CICS_DELAY_&SYSNDX._IVF DS FL4 INTERVAL IN 0.01 SECS BINARY
.*
         AIF   (NOT(&ONLYH)).DOIV5
CICS_DELAY_&SYSNDX._IV4 DS 0H
         MVC   EIBRESP2,=F'4'     SET EIBRESP2=BAD HOURS
         B     CICS_DELAY_&SYSNDX._INVREQ EXIT
.*
.DOIV5   ANOP
         AIF   (NOT(&ONLYM)).DOIV6
CICS_DELAY_&SYSNDX._IV5 DS 0H
         MVC   EIBRESP2,=F'5'     SET EIBRESP2=BAD MINUTES
         B     CICS_DELAY_&SYSNDX._INVREQ EXIT
.*
.DOIV6   ANOP
         AIF   (NOT(&ONLYS)).DOIV
CICS_DELAY_&SYSNDX._IV6 DS 0H
         MVC   EIBRESP2,=F'6'     SET EIBRESP2=BAD SECONDS
.*
.DOIV    ANOP
         AIF   (&ONLYH OR &ONLYM).NEEDLAB
         AGO   .MISSLB2
.*
.NEEDLAB ANOP
CICS_DELAY_&SYSNDX._INVREQ DS 0H
.MISSLB2 ANOP
         MVI   EIBRCODE,X'FF'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(INVREQ) SET EIBRESP=INVREQ
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_DELAY_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_DELAY_&SYSNDX._EXPIRED DS 0H
         MVI   EIBRCODE,X'20'     SET EIBRCODE
         MVC   EIBRESP,DFHRESP(EXPIRED) SET EIBRESP=EXPIRED
         DC    AL3(0),C'ABEND'    MARKER FOR Z390KCP ESTAE
         DC    AL4(CICS_DELAY_&SYSNDX._IGNORE) ENTPT FOR IGNORE COND
.*
CICS_DELAY_&SYSNDX._IGNORE DS 0H
         MEXIT
.*
.BADREQ  MNOTE 12,'REQID NOT SUPPORTED'
         MEXIT
.*
.BOTHIT  MNOTE 12,'BOTH INTERVAL AND TIME ARE SPECIFIED'
         MEXIT
.*
.BOTHFU  MNOTE 12,'BOTH FOR AND UNTIL ARE SPECIFIED'
         MEXIT
.*
.BADFORUN MNOTE 12,'INTERVAL/TIME CANNOT BE SPECIFIED WITH FOR/UNTIL'
         MEXIT
.*
.BADHMS  MNOTE 12,'HOURS/MINUTES/SECONDS ARE INVALID WITH INTERVAL OR T-
               IME'
         MEXIT
.*
.BADHMS2 MNOTE 12,'HOURS/MINUTES/SECONDS ARE SPECIFIED WITHOUT FOR/UNTI-
               L'
         MEXIT
.*
.BADTIME MNOTE 12,'INTERVAL/TIME MUST BE 1 TO 6 BYTES'
         MEXIT
.*
.BADFUN  MNOTE 12,'FOR/UNTIL SPECIFIED, BUT NO TIME PARMS'
         MEXIT
         MEND
