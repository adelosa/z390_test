***********************************************************************
* Copyright 2006 Automated Software Tools Corporation                 *
* This source code is part of z390 assembler/emulator package         *
* The z390 package is distributed under GNU general public license    *
* Author - Don Higgins                                                *
***********************************************************************
LCLCEDF  CSECT
*
* EDF PROCESSOR
*
* R1  >>> LCL PARAMETER BLOCK POINTER (DIRECT LINKAGE)
* R3  >>> LCL PARAMETER BLOCK POINTER (NORMAL LINKAGE)
*
* EACH PARM STARTS WITH EIBFN
*
         BALR  R12,0              BASE ADDRESS
         USING *,R12
         USING DFHTCTTE,TCTTEAR
         CLI   TCTTEEDL,X'FF'     DIRECT LINKAGE ?
         BNE   NODIR              EXIT IF NOT
         LR    R3,R1              SAVE PARM ADDRESS
NODIR    EQU   *
         LA    R4,EDFTABL         R4=ADDRESS OF EDF TABLE
IXLOOP   EQU   *
         CLC   0(2,R4),0(R3)      TABLE MATCH ?
         BE    DOEDF              EXIT IF IT DOES
         AHI   R4,6               BUMP TABLE ENTRY
         CLC   0(2,R4),=X'FFFF'   STOPPER ?
         BNE   IXLOOP             LOOP IF NOT
         DC    H'0'               SHOULD NOT OCCUR
*
         LTORG
*
EDFTABL  EQU   *
*        DC    X'0202',AL4(EDF0202) ADDRESS
*        DC    X'0204',AL4(EDF0204) HANDLE CONDITION
*        DC    X'0206',AL4(EDF0206) HANDLE AID
*        DC    X'020A',AL4(EDF020A) IGNORE CONDITION
*        DC    X'020C',AL4(EDF020C) PUSH HANDLE
*        DC    X'020E',AL4(EDF020E) POP HANDLE
*
*        DC    X'0402',AL4(EDF0402) RECEIVE
         DC    X'0404',AL4(EDF0404) SEND
*
*        DC    X'0602',AL4(EDF0602) READ
*        DC    X'060C',AL4(EDF060C) STARTBR
*        DC    X'060E',AL4(EDF060E) READNEXT
*        DC    X'0610',AL4(EDF0610) READPREV
*        DC    X'0612',AL4(EDF0612) ENDBR
*        DC    X'0614',AL4(EDF0614) RESETBR
*
*        DC    X'0A02',AL4(EDF0A02) WRITEQ TS
*        DC    X'0A04',AL4(EDF0A04) READQ TS
*        DC    X'0A06',AL4(EDF0A06) WRITEQ TS
*
*        DC    X'0C02',AL4(EDF0C02) GETMAIN
*        DC    X'0C04',AL4(EDF0C04) FREEMAIN
*
         DC    X'0E02',AL4(EDF0E02) LINK     DIRECT LINKAGE
******** DC    X'0E04',AL4(EDF0E04) XCTL     DIRECT LINKAGE
*        DC    X'0E06',AL4(EDF0E06) LOAD
         DC    X'0E08',AL4(EDF0E08) RETURN   DIRECT LINKAGE
*        DC    X'0E0A',AL4(EDF0E0A) RELEASE
*        DC    X'0E0C',AL4(EDF0E0C) ABEND
*        DC    X'0E0E',AL4(EDF0E0E) HANDLE ABEND
*
*        DC    X'1002',AL4(EDF1002) ASKTIME
*        DC    X'1004',AL4(EDF1004) DELAY
*        DC    X'1008',AL4(EDF1008) START
*        DC    X'100A',AL4(EDF100A) RETRIEVE
*        DC    X'100C',AL4(EDF100C) CANCEL
*
*        DC    X'1204',AL4(EDF1204) ENQ
*        DC    X'1206',AL4(EDF1206) DEQ
*
*        DC    X'1802',AL4(EDF1802) RECEIVE MAP
*        DC    X'1804',AL4(EDF1804) SEND MAP
*        DC    X'1812',AL4(EDF1812) SEND CONTROL
*
*        DC    X'1C02',AL4(EDF1C02) DUMP
*
*        DC    X'4A02',AL4(EDF4A02) ASKTIME ABSTIME
*        DC    X'4A04',AL4(EDF4A04) FORMATTIME
*
         DC    X'FFFF'            STOPPER
*
DOEDF    EQU   *
         L     R12,2(R4)          R12=EDF MODULE ADDRESS BASE
         BR    R12                GO TO IT
         DROP  R12
*
* EDF MODULES
*
EDF0E02  DS    0H
* LINK
         USING *,R12
         USING (P0E02,P0E02END),R3
         L     DFHEIBR,P0E02EIB   LOAD EIB ADDRESS
         USING DFHEIBLK,DFHEIBR
         CLI   P0E02LV0,X'FF'     LEVEL 0 ?
         BNE   E0E02LNK           EXIT IF NOT 1ST LINK
* LEVEL 0 LINK
         LARL  R4,EDF01S          ADDRESS MAP
         USING EDF01S,R4
         LA    R6,EDF01S          AREA TO CLEAR
         LA    R7,EDF01L          LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E01TRANO,EIBTRNID  MOVE TRANSID
         MVC   E01PROGO,EIBPROG   MOVE PROGRAM NAME
* EIBTASKN
         UNPK  E01TSKNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E01TSKNO+6,X'F0'   SET SIGN
         MVC   E01SCRNO,=C' 00'   SET SCREEN NUMBER
         MVC   E01ENTO,=C'CONTINUE' SET ENTER DESCRIPTOR
         UNPK  E01EBTMO,EIBTIME   UNPACK TIME
         OI    E01EBTMO+6,X'F0'   SET SIGN
         UNPK  E01EBDTO,EIBDATE   UNPACK DATE
         OI    E01EBDTO+6,X'F0'   SET SIGN
         MVC   E01EBTDO,EIBTRNID  SET TRANSID
* EIBCPOSN
         LH    R6,EIBCPOSN        R6=CURSOR POSITION
         CVD   R6,E0E02DEC        CONVERT TO DECIMAL
         UNPK  E01EBCSO,E0E02DEC+5(3) UNPACK CURSOR POSITION
         OI    E01EBCSO+4,X'F0'   SET SIGN
* EIBCALEN
         LH    R6,EIBCALEN        R6=COMMAREA LENGTH
         CVD   R6,E0E02DEC        CONVERT TO DECIMAL
         UNPK  E01EBCLO,E0E02DEC+5(3) UNPACK COMMAREA LENGTH
         OI    E01EBCLO+4,X'F0'   SET SIGN
* EIBAID
         UNPK  WORK(3),EIBAID(2)  UNPACK EIBAID
         TR    WORK(2),TABLE-240  CONVERT TO DISPLAY HEX
         MVC   E01EBADO(2),=C'X''' SET HEX QUOTE
         MVC   E01EBADO+2(2),WORK SET EIBAID
         MVI   E01EBADO+4,C''''   SET ENDING QUOTE
* EIBFN
         UNPK  WORK(5),EIBFN(3)   UNPACK EIBFN
         TR    WORK(4),TABLE-240  CONVERT TO DISPLAY HEX
         MVC   E01EBFNO(2),=C'X''' SET HEX QUOTE
         MVC   E01EBFNO+2(4),WORK SET EIBFN
         MVI   E01EBFNO+6,C''''   SET ENDING QUOTE
* EIBRCODE
         UNPK  WORK(13),EIBRCODE(7) UNPACK EIBRCODE
         TR    WORK(12),TABLE-240 CONVERT TO DISPLAY HEX
         MVC   E01EBRCO(2),=C'X''' SET HEX QUOTE
         MVC   E01EBRCO+2(12),WORK SET EIBRCODE
         MVI   E01EBRCO+14,C''''  SET ENDING QUOTE
         MVC   E01EBRQO,EIBREQID  MOVE EIBREQID
         MVC   E01EBDSO,EIBDS     MOVE EIBDS
         MVC   E01EBRSO,EIBRSRCE  MOVE EIBRSRCE
* EIBRESP
         UNPK  WORK(9),EIBRESP(5) UNPACK EIBRESP
         TR    WORK(8),TABLE-240  CONVERT TO DISPLAY HEX
         MVC   E01EBRPO(2),=C'X''' SET HEX QUOTE
         MVC   E01EBRPO+2(8),WORK SET EIBRESP
         MVI   E01EBRPO+10,C''''  SET ENDING QUOTE
* EIBRESP2
         UNPK  WORK(9),EIBRESP2(5) UNPACK EIBRESP2
         TR    WORK(8),TABLE-240  CONVERT TO DISPLAY HEX
         MVC   E01EBR2O(2),=C'X''' SET HEX QUOTE
         MVC   E01EBR2O+2(8),WORK SET EIBRESP2
         MVI   E01EBR2O+10,C''''  SET ENDING QUOTE
         MVC   E01EBPGO,EIBPROG   MOVE EIBPROG
         MVC   E01EBDFO,EIBDTFRM  MOVE EIBDTFRM
* MAP DATA WITHOUT SEND
         MVC   E0E02PRG,EIBPROG   SAVE PROGRAM NAME
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF01') SET(R5) ERASE
         ST    R5,E0E02MPA        SAVE MAPPED DATA ADDRESS
         LHRL  R6,P1804OAL        R6=MAPPED DATA LENGTH
         ST    R6,E0E02MPL        SAVE IT
         LARL  R9,PCEDFHCN        ADDRESS PSEUDO DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAPPED DATA AND LENGTH
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(E0E02MPL) RTRANSID('SEND')                 X
                    FROM(E0E02MPA) LENGTH(E0E02MPL+2)
* FREEMAIN THE MAPPED DATA
         EXEC  CICS FREEMAIN DATA(E0E02MPA)
         MVC   EIBPROG,E0E02PRG   RESTORE PROGRAM NAME
* WAIT FOR THE DATA TO ARRIVE
         EXEC  CICS DELAY INTERVAL(2)
* SUSPEND THE TASK UNTIL THE INVOKER SAYS WE CAN GO
         MVC   E0E02NQT,TCTTETI   SET ENQ TERMID
         EXEC  CICS ENQ RESOURCE(E0E02NQN) LENGTH(9) INTCEDF
         PR    ,                  UNSTACK AND RETURN
*
E0E02DEC DS    PL8
E0E02MPA DS    AL4
E0E02MPL DS    XL4
E0E02NQN DC    C'CEDF-'
E0E02NQT DS    CL4
E0E02PRG DS    CL8
WORK     DS    CL13
TABLE    DC    C'0123456789ABCDEF'
*
E0E02LNK EQU   *
* ### NOT DONE YET
         PR    ,                  UNSTACK AND RETURN
         LTORG
         DROP  R12
*
EDF0E08  DS    0H
* RETURN - PROGRAM TERMINATION
         USING *,R12
         USING (P0E08,P0E08END),R3
         USING DFHEIBLK,DFHEIBR
         LARL  R4,EDF0E08S        ADDRESS MAP
         USING EDF0E08S,R4
         LA    R6,EDF0E08S        AREA TO CLEAR
         LA    R7,EDF0E08L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E0E08TSO,EIBTRNID  MOVE TRANSID
         MVC   E0E08PGO,EIBPROG   MOVE PROGRAM NAME
* EIBTASKN
         UNPK  E0E08TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0E08TNO+6,X'F0'   SET SIGN
         MVC   E0E08SCO,=C' 00'   SET SCREEN NUMBER
         LA    R5,E0E08RPO        R5=ADDRESS OF OUTPUT AREA
         BAL   R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0E08DEC        CONVERT TO DECIMAL
         UNPK  E0E08R2O,E0E08DEC+6(2) UNPACK EIBRESP2
         OI    E0E08R2O+2,X'F0'   SET SIGN
* MAP DATA WITHOUT SEND
         MVC   E0E08PRG,EIBPROG   SAVE PROGRAM NAME
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0E08') SET(R5) ERASE
         ST    R5,E0E08MPA        SAVE MAPPED DATA ADDRESS
         LHRL  R6,P1804OAL        R6=MAPPED DATA LENGTH
         ST    R6,E0E08MPL        SAVE IT
         LARL  R9,PCEDFHCN        ADDRESS PSEUDO DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAPPED DATA AND LENGTH
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(E0E08MPL) RTRANSID('SEND')                 X
                    FROM(E0E08MPA) LENGTH(E0E08MPL+2)
* FREEMAIN THE MAPPED DATA
         EXEC  CICS FREEMAIN DATA(E0E08MPA)
         MVC   EIBPROG,E0E08PRG   RESTORE PROGRAM NAME
* WAIT FOR THE DATA TO ARRIVE
         EXEC  CICS DELAY INTERVAL(2)
* SUSPEND THE TASK UNTIL THE INVOKER SAYS WE CAN GO
         MVC   E0E08NQT,TCTTETI   SET ENQ TERMID
         EXEC  CICS ENQ RESOURCE(E0E08NQN) LENGTH(9) INTCEDF
         PR    ,                  UNSTACK AND RETURN
*
E0E08DEC DS    PL8
E0E08MPA DS    AL4
E0E08MPL DS    XL4
E0E08NQN DC    C'CEDF-'
E0E08NQT DS    CL4
E0E08PRG DS    CL8
         LTORG
         DROP  R12
*
EDF0404  DS    0H
* SEND
         USING *,R12
         USING (P0404,P0404END),R3
         L     DFHEIBR,P0404EIB   LOAD EIB ADDRESS
         LARL  R4,EDF0404S        ADDRESS MAP
         USING EDF0404S,R4
         LA    R6,EDF0404S        AREA TO CLEAR
         LA    R7,EDF0404L        LENGTH TO CLEAR
         LR    R8,R6              AREA TO CLEAR
         SR    R9,R9              CLEAR SECOND LENGTH
         MVCLE R6,R8,X'00'        CLEAR MAP
* SET UP MAP
         MVC   E0404TSO,EIBTRNID  MOVE TRANSID
         MVC   E0404PGO,EIBPROG   MOVE PROGRAM NAME
* EIBTASKN
         UNPK  E0404TNO,EIBTASKN  UNPACK TASK NUMBER
         OI    E0404TNO+6,X'F0'   SET SIGN
         MVC   E0404SCO,=C' 00'   SET SCREEN NUMBER
         CLI   TCTTEEBA,X'00'     'BEFORE' COMMAND ?
         BNE   E0404AFT           EXIT IF NOT
         MVC   E0404STO(24),=C'ABOUT TO EXECUTE COMMAND' SET STATUS
         B     E0404PRM           EXIT
*
E0404AFT EQU   *
         MVC   E0404STO(26),=C'COMMAND EXECUTION COMPLETE' SET STATUS
         LA    R5,E0404RPO        R5=ADDRESS OF OUTPUT AREA
         BAL   R14,DORESP         INTERPRET EIBRESP
         L     R5,EIBRESP2        R5=EIBRESP2
         CVD   R5,E0404DEC        CONVERT TO DECIMAL
         UNPK  E0404R2O,E0404DEC+6(2) UNPACK EIBRESP2
         OI    E0404R2O+2,X'F0'   SET SIGN
E0404PRM EQU   *
         L     R5,P0404FRM        FROM ADDRESS
         LH    R6,P0404LEN        R6=LENGTH
         LR    R7,R6              R7=LENGTH
         CHI   R6,60              >60 ?
         BNH   E0404L60           EXIT IF IT IS
         LA    R7,60              SET MAXIMUM LENGTH
E0404L60 EQU   *
         BCTR  R7,0               -1 FOR EXECUTE
         EX    R7,E0404XMV        MOVE DATA IN CHAR FORM
         EX    R7,E0404XTR        TRANSLATE TO EBCDIC
         MVI   E0404FMO,C'('      SET FROM OPEN BRACKET
         LA    R5,E0404FMO+2(R7)  ADDRESS CLOSE BRACKET LOCATION
         MVI   0(R5),C')'         SET FROM CLOSE BRACKET
         LH    R5,P0404LEN        R5=LENGTH
         CVD   R5,E0404DEC        CONVERT TO DECIMAL
         UNPK  E0404LNO+1(5),E0404DEC+5(3) UNPACK LENGTH
         OI    E0404LNO+5,X'F0'   SET SIGN
         MVI   E0404LNO,C'('      SET LENGTH OPEN BRACKET
         MVI   E0404LNO+6,C')'    SET LENGTH CLOSE BRACKET
         CLI   P0404NOH,X'FF'     ANY NOHANDLE ?
         BNE   E0404NOH           EXIT IF NOT
         MVC   E0404NHO,=C'NOHANDLE' SET NOHANDLE
E0404NOH EQU   *
         MVC   E0404ENO,=C'CONTINUE' SET ENTER DESCRIPTOR
* MAP DATA WITHOUT SEND
         MVC   E0404PRG,EIBPROG   SAVE PROGRAM NAME
         EXEC  CICS SEND MAPSET('MAPEDF') MAP('EDF0404') SET(R5) ERASE
         ST    R5,E0404MPA        SAVE MAPPED DATA ADDRESS
         LHRL  R6,P1804OAL        R6=MAPPED DATA LENGTH
         ST    R6,E0404MPL        SAVE IT
         LARL  R9,PCEDFHCN        ADDRESS PSEUDO DSA
         USING PCEDFHCN,R9
* START TRANSID AT INVOKING TERMID WITH MAPPED DATA AND LENGTH
         EXEC  CICS START TRANSID('CEDZ') TERMID(TCTTEEDT)             X
                    RTERMID(E0404MPL) RTRANSID('SEND')                 X
                    FROM(E0404MPA) LENGTH(E0404MPL+2)
* FREEMAIN THE MAPPED DATA
         EXEC  CICS FREEMAIN DATA(E0404MPA)
         MVC   EIBPROG,E0404PRG   RESTORE PROGRAM NAME
* WAIT FOR THE DATA TO ARRIVE
         EXEC  CICS DELAY INTERVAL(2)
* SUSPEND THE TASK UNTIL THE INVOKER SAYS WE CAN GO
         MVC   E0404NQT,TCTTETI   SET ENQ TERMID
         EXEC  CICS ENQ RESOURCE(E0404NQN) LENGTH(9) INTCEDF
         PR    ,                  UNSTACK AND RETURN
*
E0404XMV MVC   E0404FMO+1(0),0(R5) MOVE DATA IN CHAR FORM
E0404XTR TR    E0404FMO+1(0),TRANEBC TRANSLATE TO EBCDIC
*
* SUBROUTINES
*
DORESP   DS    0H
         LARL  R6,RESPTAB         R6=RESPONSE TABLE
DORESPLP EQU   *
         CLC   0(4,R6),EIBRESP    GOT ONE ?
         BE    GOTRESP            EXIT IF WE HAVE
         AHI   R6,16              BUMP POINTER
         CLI   0(R6),X'FF'        END OF TABLE ?
         BNE   DORESPLP           LOOP IF NOT
         DC    H'0'               ABEND, NEED TABLE ENTRY
GOTRESP  EQU   *
         MVC   0(12,R5),4(R6)     MOVE INTERPRETED EIBRESP
         BR    R14                RETURN
*
* TRANSLATE TABLE FOR EBCDIC MODE
*
         DS    0D
TRANEBC  EQU   *
         DC    64X'FF'                              00-3F
*                0 1 2 3 4 5 6 7 8 9 A B C D E F
         DC    X'40FFFFFFFFFFFFFFFFFFFF4B4C4D4E4F'  40-4F
         DC    X'50FFFFFFFFFFFFFFFFFF5A5B5C5D5E5F'  50-5F
         DC    X'6061FFFFFFFFFFFFFFFFFF6B6C6D6E6F'  60-6F
         DC    X'FFFFFFFFFFFFFFFFFF797A7B7C7D7E7F'  70-7F
         DC    X'FF818283848586878889FF8BFFFFFFFF'  80-8F
         DC    X'FF919293949596979899FF9BFFFFFFFF'  90-9F
         DC    X'FFA1A2A3A4A5A6A7A8A9FFFFFFADFFFF'  A0-AF
         DC    X'FFFFFFFFFFFFFFFFFFFFFFFFFFBDFFFF'  B0-BF
         DC    X'FFC1C2C3C4C5C6C7C8C9FFFFFFFFFFFF'  C0-CF
         DC    X'FFD1D2D3D4D5D6D7D8D9FFFFFFFFFFFF'  D0-DF
         DC    X'E0FFE2E3E4E5E6E7E8E9FFFFFFFFFFFF'  E0-EF
         DC    X'F0F1F2F3F4F5F6F7F8F9FFFFFFFFFFFF'  F0-FF
*
E0404DEC DC    PL8'0'
E0404MPA DS    AL4
E0404MPL DS    XL4
E0404NQN DC    C'CEDF-'
E0404NQT DS    CL4
E0404PRG DS    CL8
         LTORG
         DROP  R12
*
* COMMON DATA AREAS
*
RESPTAB  DS    0F
         DC    F'0',CL12'NORMAL'
         DC    X'FF'              STOPPER
*
* PSEUDO DSA
*
PCEDFHCN DC    A(DFHEIHCN)        DUMMY A(DFHEIHCN)
DFHEIHCN DC    A(0)               DUMMY DFHEIHCN
*
         COPY  MAPEDF
*
P0E02    DSECT
P0E02FN  DS    XL2                FUNCTION CODE
P0E02PGM DS    CL8                PROGRAM
P0E02EIB DS    AL4                EIB
P0E02COM DS    AL4                COMMAREA ADDRESS
P0E02CLN DS    XL2                COMMAREA LENGTH
P0E02LV0 DS    X                  FF=LINK LEVEL 0
         DS    X
         DS    X                  FF=NOHANDLE
         DS    X
P0E02RSP DS    AL4                RESP
P0E02RS2 DS    AL4                RESP2
P0E02END EQU   *                  END MARKER
*
P0E08    DSECT
P0E08FN  DS    XL2                FUNCTION CODE
P0E08TRN DS    CL4                TRANSID
P0E08COM DS    AL4                COMMAREA ADDRESS
P0E08CLN DS    XL2                COMMAREA LENGTH
P0E08IMM DS    X                  FF=IMMEDIATE
         DS    X
P0E08CNR DS    X                  FF=CLEANER
         DS    X
P0E08RSP DS    AL4                RESP
P0E08RS2 DS    AL4                RESP2
P0E08END EQU   *                  END MARKER
*
         P0404 DSECT
*
         DFHEIBLK                 EIB
         DFHTCTTE                 TCTTE
*
         EQUREGS
*
         END
