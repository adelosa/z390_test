<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta name="GENERATOR" content="Microsoft FrontPage 5.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>z390 ZSTRMAC Structured Macro Assembler Language Extensions</title>
</head>

<body>


<table border="0" cellpadding="0" cellspacing="0" style="border-collapse: collapse" bordercolor="#111111" id="AutoNumber1">
            <tr>
              <td align="center" width="205" height="90">
              <b>
              <a href="http://www.z390.org/">
              <img border="0" src="images/z390.jpg" width="100" height="60" alt="z390 Portable Mainframe Assembler and Emulator"></a></b></td>
              <td align="center" width="402" height="90">
              <p align="center"><b><font size="5">z390 </font></b>
              <font size="5"><b>ZSTRMAC Structured <br>
              Macro Support</b></font></td>
              <td width="151" height="90" align="center">
              <b>
              <a href="http://www.AutomatedSoftwareTools.com">
              <img border="0" src="anim370.gif" alt="Automated Software Tools Corporation" width="100" height="59"></a></b></td>
            </tr>
            <tr>
              <td align="left" valign="top" colspan="3">
              <p><b>z390 Macro support has been extended to allow coding 
              mainframe conditional macro code using the following structured 
              programming extensions to the standard HLASM conditional macro 
              language:</b><ul>
                <li><b>Alternate selection of code blocks</b><ul>
                  <li><b>AIF&nbsp; (expression) 
                  - execute the following block of code if expression is true</b></li>
                  <li><b>AELSEIF (expression) - end prior block and execute 
                  following block if expression is true</b></li>
                  <li><b>AELSE 
                  - end prior block and execute following block 
                  if prior AIF and AELSEIF expressions false</b></li>
                  <li><b>AEND 
                  - end last block for AIF at current level of nesting</b></li>
                  </ul>
                  </li>
                  <li><b>Repeat execution of code block</b><ul>
                    <li><b>AWHILE (expression) - repeat following code block 
                    while expression is true (test at beginning)</b></li>
                    <li><b>AEXIT AWHILE - exit to end of inner most AWHILE 
                    (for exceptions within nested AIF)</b></li>
                    <li><b>AEND - end block of code for AWHILE at current level 
                    of nesting</b></li>
                    <li><b>AUNTIL (expression) - repeat following code block 
                    until expression is true (test at end)</b></li>
                    <li><b>AEXIT AUNTIL - exit to end of inner most AUNTIL 
                    (for exceptions within nested AIF)</b></li>
                    <li><b>AEND - end block of code for AUNTIL at current level 
                    of nesting</b></li>
                    </ul>
                    </li>
                    <li><b>Perform code block</b><ul>
                      <li><b>APM name&nbsp;- perform the named code block and return to next 
                      instruction</b></li>
                      <li><b>AENTRY name&nbsp;- define start of performed block of code (skip 
                      over if 
                      entered sequentially)</b></li>
                      <li><b>AEXIT AENTRY - exit from AENTRY block of code (for 
                      exceptions within nested AIF)</b></li>
                      <li><b>AEND 
                      - end the current performed code block and exit to next 
                      statement after APM</b></li>
                      </ul>
                      </li>
                      <li><b>Perform selection of code blocks based on index 
                      from 0 to 255</b><ul>
                        <li><b>ASELECT (expression) - execute selected block 
                        based on value of index expression</b></li>
                        <li><b>AWHEN values 
                        - define end of previous block and start of code block 
                        for index values</b><ul>
                        <li><b>values can be decimal (0-255), character C'?', or 
                        hex X'??'</b></li>
                        <li><b>one or more values may be specified separated 
                        by commas</b></li>
                        <li><b>a range of values may be specified as (value1,value2)</b></li>
                        <li><b>for example AWHEN (C'0',C'9') defines EBCDIC 
                        digits 240-249</b></li>
                        </ul>
                        </li>
                        <li><b>AEXIT ASELECT - exit to end of current ASELECT 
                        (for exceptions within nested AIF)</b></li>
                        <li><b>AELSE - define optional code block if no AWHEN 
                        block defined for current index</b></li>
                        <li><b>AEND&nbsp;- end code block for ASELECT</b></li>
                        </ul>
                        </li>
                        <li><b>Additional extension to indent label field by 
                        preceding with colon (:)</b></li>
                        </ul>
              <p><b>Starting with z390 v1.4.02e, a translator has been added (linklib\zstrmac.mlc) which will read structured 
              macro assembler source code from SYSUT1 and write standard HLASM 
              macro assembler source code 
              on SYSUT2.&nbsp; Starting with z390 v1.4.03, this support will 
              be included in the z390 macro processor so no separate translation 
              will be required to use the extensions to write structured macro 
              code.&nbsp; The mz390 macro processor will perform the translation 
              automatically during source input if option ZSTRMAC is on.</b><p>
              <b>The following new programs are included for general use:</b><ol>
                <li><b><a href="z390_ZSTRMAC_MLC_Generated_Source.pdf">linklib\ZSTRMAC.MLC</a> - structured translator generated using 
                bootstrap version 
                <a href="z390_ZSTRMAC_MLC_Bootstrap_Source.pdf">ZSTRMAC1.MLC</a> to translate the structured 
                version of itself
                <a href="z390_ZSTRMAC_ZSM_Structrued_Source.pdf">ZSTRMAC.ZSM</a>.</b></li>
                <li><b>
                <a href="z390_ZSTRMAC_BAT_Translate_Structrued_Source.pdf">ZSTRMAC.BAT</a> - command using %1 to set SYSUT1 input and %2 to 
                set SYSUT2 output and translate structured macro assembler to 
                standard HLASM macro assembler. </b> </li>
                </ol>
                <p><b>The following new regression test programs are included in 
                z390 v1.4.02e PTF:</b><ol>
                  <li><b><a href="z390_ZSTRMAC_MLC_Bootstrap_Source.pdf">rt\test\ZSTRMAC1.MLC</a> - bootstrap version of translator 
                  written in standard HLASM.</b></li>
                  <li><b><a href="z390_ZSTRMAC_ZSM_Structrued_Source.pdf">rt\test\ZSTRMAC2.ZSM</a> - structured version of the 
                  translator which uses all the structures.</b></li>
                  <li><b><a href="z390_TESTZSM1.ZSM_Test_Translator.pdf">rt\test\TESTZSM1.ZSM</a> - test program for ZSTRMAC1 with 
                  all the basic structures.</b></li>
                  <li><b><a href="z390_TESTZSM1.ZSM_Test_Translator.pdf">rt\test\TESTZSM2.ZSM</a> - test program for ZSTRMAC2 with 
                  all the basic structures (duplicate)</b></li>
                  <li><b><a href="z390_TESTZSM3.ZSM_Test_Translator.pdf">rt\test\TESTZSM3.ZSM</a> - test of all 256 ASELECT values 
                  using all forms of AWHEN operands</b></li>
                  <li><b><a href="z390_TESTZSM4.ZSM_Test_Translator.pdf">rt\test\TESTZSM4.ZSM</a> - test error messages</b></li>
                  </ol>
                  <p><b>Note that z390 also has structured assembler macro 
                  support including IF, ELSE, ENDIF, DO, and ENDO.&nbsp; For examples see the 
                  utilities linklib\REPRO.MLC and linklib\SUPERZAP.MLC.&nbsp; As 
                  time permits these old structured assembler macros could be 
                  rewritten using STRMAC extensions while adding additional 
                  function compatible with the IBM HLASM toolkit structured 
                  macros.</b></p>
                  <p><b>The translator and above test source programs are in z390 PTF 
                  v1.4.02e.&nbsp; The ZSTRMAC support will be integrated into 
                  the mz390 macro processor in z390 v1.4.03.&nbsp; The above 
                  ZSTRMAC1.MLC is the last unstructured macro code program I 
                  ever intend to write with 169 explicit macro labels.&nbsp; The 
                  structured version has no labels, and I would submit that it is 
                  significantly easier to read and maintain using APM performed 
                  blocks to reduce the logic down into small logical blocks.&nbsp; 
                  Any and all feedback is welcome as work proceeds on z390 v1.4.03.&nbsp; 
                  Send comments and suggestions to
                  <a href="mailto:don@higgins.net?subject=STRMAC Structured Macro Assembler Translator">
                  Don Higgins</a>.</b></td>
            </tr>
            <tr>
              <td align="left" valign="top" colspan="3" width="758">
              &nbsp;</td>
            </tr>
            </table>
         
        
        </table>
<p align="center"><b>IBM, CICS, HLASM, MVS, OS/390, VSAM, 
z9, z10, and z/OS are registered trademarks<br>
&nbsp;of International Business Machines Corporation</b></p>

<p align="center"><b>This page last updated
<!--webbot bot="Timestamp" S-Type="EDITED" S-Format="%A %B %d, %Y" startspan -->Sunday September 07, 2008<!--webbot bot="Timestamp" i-checksum="59270" endspan -->.&nbsp;&nbsp;
<a href="mailto:don@higgins.net?subject=Automated Software Tools">Webmaster</a>&nbsp;
<a href="pop-up/sitemap.html">Sitemap</a><br>
Copyright 2008 Automated Software Tools Corporation<br>
<br>
&nbsp; </b> </p>

</body>

</html>