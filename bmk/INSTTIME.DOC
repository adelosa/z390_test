INSTTIME -- Mel's instruction timer
===================================

Purpose
=======
To time instructions being executed in the Z390 enulator.

How it works
============
The main instruction timing is achieved by executing the instruction
a number of times using a BCT loop and timing the process.

In order to separate the instruction timing from the BCT time
we must first obtain an accurate timing for the BCT itself.
This only needs to be done once.
This time is referred to as timerBCT time in the following text.

eg.  BCT timing
     -- save start time --
     L   R7,bct_spin_count
     BCT R7,*
     -- save end time --
Calculate end-start.
Save as timerBCT time.

eg.  Instruction timing
     -- save start time --
     L   R7,spin_count
TEST DS  0H
     -- tested instruction --
     BCT R7,TEST
     -- save end time --
Calculate end-start-timerBCT time

Instructions like DP, ED and many others cannot be looped because
they change the destination field. In these cases, one or more
special instructions are timed before the main loop.

eg.  Special timing
     -- save start time --
     L   R7,spin_count
XTRA DS  0H
     -- tested extra instruction(s) --
     BCT R7,XTRA
     -- save end time --
Calculate end-start-timerBCT time
Saved as extra time

     -- save start time --
     L   R7,spin_count
TEST DS  0H
     -- extra instruction(s) --
     -- tested instruction --
     BCT R7,TEST
     -- save end time --
Calculate end-start-extra time-timerBCT time

Input and Output
================
The source should be modified to reflect the paths and file names
you wish to use. The following two statements are the only
modifications needed...

INPUT    DC    C"E:\Z390\PROGRAMS\INSTTIME.TXT",X'00'
RESULT   DC    C"E:\Z390\PROGRAMS\INSTTIME.OUT",X'00'

INPUT is the list of instructions to be timed and other special
parameters. All the options are described later.

RESULT is the output file. If the output file already exists it will
be overlayed by the new one.

The INPUT file is not supplied.
All the instruction variations are in the file INSTTIME.INS
Copy what you want timed from this file into INSTTIME.TXT
Any special parameters can then be added as you wish.

At the time of writing, the complete run takes about 5 mins.

INPUT parameters
================
All parameters start in col 1 and are generally inflexible.

*
   A comment line which is ignored.

BCTS=nnnnnnn
   This alters the number of times the timer-BCT is executed.
   Devised in order to optimise the initial BCT timing.
   The default is 5000000.
   The number must be 7 numeric digits.
   It can be placed anywhere in the input file and will cause
   retiming of the BCT instruction.
   Modifying this below the default may lead to inaccurate timing.

SPIN=nnnnnnn
   This alters the number of times each instruction is executed.
   The default is 0100000.
   The number must be 7 numeric digits.
   It can be placed anywhere in the input file.

   Modifying this below the default may lead to inaccurate timing.
   Modifying this above the default will lead to longer run times.

   There is one special case:
   SPIN=0000001 may be used to verify that an instruction is being
   formed properly by executing it once. The timings also reflect the
   overhead incurred per execution. These were used to justify the
   default.

STATS ON
   Sets an indicator to start the collection of timings.
   This does no resetting.
   All timings from this point, including the retiming of the BCT
   after a BCTS= parameter will be collected.

MEAN
   All the collected timing values are used to calculate the
   mean (or average) and is shown in the RESULT file.
   This does no resetting, so a 'running' mean is possible.

VARIANCE
   All the collected timing values are used to calculate the
   mean (or average) and variance and are both shown in the
   RESULT file.
   This does no resetting, so 'running' mean and variance is possible.

STATS OFF
   Stops the collection of timings, resets everything.
   Restart the collection with another STATS ON.

Input format
============
This is largely for information only.
Only length fields may be modified.
Each instruction is independent of any other, there is
no sequencing and the same instruction may be repeated.

*FMT  -INST-  TYPE --LL--    COMMENTS
*                  L1  L2
*                  XB

FMT, INST and TYPE must not be modified.

FMT   The instruction format.
      I reserve the right to invent my own variations.

INST  Instruction mnemonic.
      I may add the occasional synonyms.

TYPE  Documented in the source at label INSTTYPE.

The XB heading means:
   00   Don't use index or base.
   X0   Use index but not base registers.
   0B   Use base but not index registers.
   XB   Use both base and index registers.
     S  Store or formatted data type.
Note: Instructions that may operate incorrectly or damage system
      integrity with any of the above are rejected.

--LL-- for instructions that use a single length.
       Invalid lengths are rejected.
       1-999999 depending on instruction.

L1  L2 for instructions that use two lengths.
       Invalid lengths are rejected.
       SRP ignores L2.
       LM and STM use L1 as no. of registers.

The RESULT file
===============
INST, TYPE, XB or lengths.
Time in microseconds.
Dump of instruction.

Other data is used for integrity checking.
   Instructions that alter registers have the result after
   SPIN executions. Both even/odd registers are displayed
   in 32 or 64-bit format irrespective of which parts are
   actually used.

   Decimal instructions have a 16-byte field displayed, at
   least part of which has been used for a decimal instruction.
   Again, after SPIN executions.

Notes
=====
It is worth noting that the EX (execute) instruction timing is
the overhead involved and not the timing of an execute and target
instruction.

Synonyms...only base synonyms are supported as instructions. Others
can be timed using parameters.

eg. You can't specify NOPR as an opcode, but you can time a BCR with
a zero mask. The same goes for JNOP and BRC 0,label etc.

I don't support branch mnemonics with masks that are not 0 or 15.

FAQ
===
Q1) I have timed repetitions of the same instruction, so
    why aren't all the times the same.

A1) The Operating System (eg. Windows) has priority over any
    application programs. It can therefore 'steal' cycles from
    the Z390 environment to process other applications or to do
    general stuff like paging, interrupts, clock update etc.

    The best timings are obtained by not running any other applications
    and by not touching the keyboard or mouse.

    A small improvement may be made by running the program in a Command
    Prompt window and not in the Z390 GUI.

Author: Melvyn Maltz
Publication date: Jan 10, 2006
Z390 version: V1.0.09b
